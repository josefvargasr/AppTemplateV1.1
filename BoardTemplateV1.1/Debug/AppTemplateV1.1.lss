
AppTemplateV1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000025c4  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000884  20000000  000025c4  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          000001d0  20000884  00002e48  00010884  2**2
                  ALLOC
  3 .stack        00001004  20000a54  00003018  00010884  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  00010884  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  000108ae  2**0
                  CONTENTS, READONLY
  6 .debug_info   000145c3  00000000  00000000  00010909  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002ccc  00000000  00000000  00024ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000775f  00000000  00000000  00027b98  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000c80  00000000  00000000  0002f2f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000c00  00000000  00000000  0002ff77  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00007bba  00000000  00000000  00030b77  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00012e82  00000000  00000000  00038731  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000e130a  00000000  00000000  0004b5b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001f58  00000000  00000000  0012c8c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
       0:	20001a58 	.word	0x20001a58
       4:	00001a7d 	.word	0x00001a7d
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
       8:	000010b9 	.word	0x000010b9
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
       c:	00001a79 	.word	0x00001a79
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
      10:	00001a79 	.word	0x00001a79
		if (cpu_irq_is_enabled()) {
			cpu_irq_disable();
      14:	00001a79 	.word	0x00001a79
			cpu_irq_prev_interrupt_state = true;
      18:	00001a79 	.word	0x00001a79
	...
			cpu_irq_prev_interrupt_state = false;
		}

	}

	cpu_irq_critical_section_counter++;
      2c:	00001b4d 	.word	0x00001b4d
      30:	00001a79 	.word	0x00001a79
      34:	00000000 	.word	0x00000000
      38:	00001b6d 	.word	0x00001b6d
      3c:	00001a79 	.word	0x00001a79
      40:	00001a79 	.word	0x00001a79
      44:	00001a79 	.word	0x00001a79
      48:	00001a79 	.word	0x00001a79
      4c:	00001a79 	.word	0x00001a79
      50:	00001a79 	.word	0x00001a79
      54:	00001a79 	.word	0x00001a79
      58:	00001a79 	.word	0x00001a79
      5c:	00001a79 	.word	0x00001a79
      60:	00001a79 	.word	0x00001a79
      64:	00001a79 	.word	0x00001a79
      68:	00001a79 	.word	0x00001a79
      6c:	00001a79 	.word	0x00001a79
      70:	00001a79 	.word	0x00001a79
      74:	00001a79 	.word	0x00001a79
      78:	00001a79 	.word	0x00001a79
      7c:	00001a79 	.word	0x00001a79
      80:	00001a79 	.word	0x00001a79
      84:	00001a79 	.word	0x00001a79
      88:	00001a79 	.word	0x00001a79
      8c:	00001a79 	.word	0x00001a79
      90:	00001a79 	.word	0x00001a79
      94:	00001a79 	.word	0x00001a79
      98:	00001a79 	.word	0x00001a79
      9c:	00001a79 	.word	0x00001a79
      a0:	00001a79 	.word	0x00001a79
      a4:	00001a79 	.word	0x00001a79
      a8:	00001a79 	.word	0x00001a79
      ac:	00001a79 	.word	0x00001a79
      b0:	00001a79 	.word	0x00001a79
      b4:	00001a79 	.word	0x00001a79
      b8:	00001a79 	.word	0x00001a79
      bc:	00001a79 	.word	0x00001a79
      c0:	00001a79 	.word	0x00001a79
      c4:	00001a79 	.word	0x00001a79
      c8:	00001a79 	.word	0x00001a79
      cc:	00001a79 	.word	0x00001a79
      d0:	00001a79 	.word	0x00001a79
      d4:	00001a79 	.word	0x00001a79
      d8:	00001a79 	.word	0x00001a79
      dc:	00001a79 	.word	0x00001a79
      e0:	00001a79 	.word	0x00001a79
      e4:	00001a79 	.word	0x00001a79
      e8:	00001a79 	.word	0x00001a79
      ec:	00001a79 	.word	0x00001a79
      f0:	00001a79 	.word	0x00001a79
      f4:	000010c9 	.word	0x000010c9
      f8:	000010d9 	.word	0x000010d9
      fc:	000010e9 	.word	0x000010e9
     100:	000010f9 	.word	0x000010f9
     104:	00001109 	.word	0x00001109
     108:	00001119 	.word	0x00001119
     10c:	00001129 	.word	0x00001129
     110:	00001139 	.word	0x00001139
     114:	00001a79 	.word	0x00001a79
     118:	00001a79 	.word	0x00001a79
     11c:	00001a79 	.word	0x00001a79
     120:	00001a79 	.word	0x00001a79
     124:	00001a79 	.word	0x00001a79
     128:	00001a79 	.word	0x00001a79
     12c:	00001a79 	.word	0x00001a79
     130:	00001a79 	.word	0x00001a79
     134:	0000192d 	.word	0x0000192d
     138:	00001a79 	.word	0x00001a79
     13c:	00001941 	.word	0x00001941
     140:	00001a79 	.word	0x00001a79
     144:	00001a79 	.word	0x00001a79
     148:	00001a79 	.word	0x00001a79
     14c:	00001a79 	.word	0x00001a79
     150:	00001a79 	.word	0x00001a79
     154:	00001a79 	.word	0x00001a79
     158:	00001a79 	.word	0x00001a79
     15c:	00001a79 	.word	0x00001a79
     160:	00001a79 	.word	0x00001a79
     164:	00001a79 	.word	0x00001a79
     168:	00001a79 	.word	0x00001a79
     16c:	00001a79 	.word	0x00001a79
     170:	00001a79 	.word	0x00001a79
     174:	00001955 	.word	0x00001955
     178:	00001969 	.word	0x00001969
     17c:	00001a79 	.word	0x00001a79

00000180 <__do_global_dtors_aux>:
     180:	b510      	push	{r4, lr}
     182:	4c05      	ldr	r4, [pc, #20]	; (198 <__do_global_dtors_aux+0x18>)
     184:	7823      	ldrb	r3, [r4, #0]
     186:	b933      	cbnz	r3, 196 <__do_global_dtors_aux+0x16>
     188:	4b04      	ldr	r3, [pc, #16]	; (19c <__do_global_dtors_aux+0x1c>)
     18a:	b113      	cbz	r3, 192 <__do_global_dtors_aux+0x12>
     18c:	4804      	ldr	r0, [pc, #16]	; (1a0 <__do_global_dtors_aux+0x20>)
     18e:	f3af 8000 	nop.w
     192:	2301      	movs	r3, #1
     194:	7023      	strb	r3, [r4, #0]
     196:	bd10      	pop	{r4, pc}
     198:	20000884 	.word	0x20000884
     19c:	00000000 	.word	0x00000000
     1a0:	000025c4 	.word	0x000025c4

000001a4 <frame_dummy>:
     1a4:	b508      	push	{r3, lr}
     1a6:	4b06      	ldr	r3, [pc, #24]	; (1c0 <frame_dummy+0x1c>)
     1a8:	b11b      	cbz	r3, 1b2 <frame_dummy+0xe>
     1aa:	4806      	ldr	r0, [pc, #24]	; (1c4 <frame_dummy+0x20>)
     1ac:	4906      	ldr	r1, [pc, #24]	; (1c8 <frame_dummy+0x24>)
     1ae:	f3af 8000 	nop.w
     1b2:	4806      	ldr	r0, [pc, #24]	; (1cc <frame_dummy+0x28>)
     1b4:	6803      	ldr	r3, [r0, #0]
     1b6:	b113      	cbz	r3, 1be <frame_dummy+0x1a>
     1b8:	4b05      	ldr	r3, [pc, #20]	; (1d0 <frame_dummy+0x2c>)
     1ba:	b103      	cbz	r3, 1be <frame_dummy+0x1a>
     1bc:	4798      	blx	r3
     1be:	bd08      	pop	{r3, pc}
     1c0:	00000000 	.word	0x00000000
     1c4:	000025c4 	.word	0x000025c4
     1c8:	20000888 	.word	0x20000888
     1cc:	000025c4 	.word	0x000025c4
     1d0:	00000000 	.word	0x00000000

000001d4 <ADS1298_SPI_Address_Byte_Count>:


extern void ADS_DRDY_handler(void);

void ADS1298_SPI_Address_Byte_Count (unsigned char Read_Write_Address, unsigned char Number_Of_Bytes)
{ 
     1d4:	b530      	push	{r4, r5, lr}
     1d6:	b083      	sub	sp, #12
     1d8:	4603      	mov	r3, r0
     1da:	460d      	mov	r5, r1

    //UCB0IFG &= ~UCRXIFG;                // Clear reception flag
    //UNUSED(spi_read_status(SPI));
	
    //TX_BUF = Read_Write_Address;        // Transmit the address register where it's gonna be written or read
     spi_write(SPI, Read_Write_Address, spi_get_pcs(ADS_CS_VAL),  0); 
     1dc:	4816      	ldr	r0, [pc, #88]	; (238 <ADS1298_SPI_Address_Byte_Count+0x64>)
     1de:	4619      	mov	r1, r3
     1e0:	220d      	movs	r2, #13
     1e2:	2300      	movs	r3, #0
     1e4:	4c15      	ldr	r4, [pc, #84]	; (23c <ADS1298_SPI_Address_Byte_Count+0x68>)
     1e6:	47a0      	blx	r4
 *
 * \return SPI status register value.
 */
static inline uint32_t spi_read_status(Spi *p_spi)
{
	return p_spi->SPI_SR;
     1e8:	4a13      	ldr	r2, [pc, #76]	; (238 <ADS1298_SPI_Address_Byte_Count+0x64>)
     1ea:	6913      	ldr	r3, [r2, #16]
	 
    //while (!( UCB0IFG & UCRXIFG ));     // wait until the buffer is empty
	while((spi_read_status(SPI) & SPI_SR_RDRF) == 0);
     1ec:	f013 0f01 	tst.w	r3, #1
     1f0:	d0fb      	beq.n	1ea <ADS1298_SPI_Address_Byte_Count+0x16>
	spi_read(SPI, (uint16_t*) &r_data, (uint8_t*) &r_pcs);
     1f2:	4c11      	ldr	r4, [pc, #68]	; (238 <ADS1298_SPI_Address_Byte_Count+0x64>)
     1f4:	4620      	mov	r0, r4
     1f6:	f10d 0107 	add.w	r1, sp, #7
     1fa:	f10d 0206 	add.w	r2, sp, #6
     1fe:	4b10      	ldr	r3, [pc, #64]	; (240 <ADS1298_SPI_Address_Byte_Count+0x6c>)
     200:	4798      	blx	r3
	delay_cycles((unsigned long)(DELAY_TCKS_4));
     202:	2060      	movs	r0, #96	; 0x60
     204:	4b0f      	ldr	r3, [pc, #60]	; (244 <ADS1298_SPI_Address_Byte_Count+0x70>)
     206:	4798      	blx	r3

    //UCB0IFG &= ~UCTXIFG;                // Clear transmission flag
    //UCB0IFG &= ~UCRXIFG;                // Clear reception flag

    //TX_BUF = Number_Of_Bytes;           // Transmit the number of bytes that it's gonna be written or read
    spi_write(SPI, Number_Of_Bytes, spi_get_pcs(ADS_CS_VAL),  0);
     208:	4620      	mov	r0, r4
     20a:	4629      	mov	r1, r5
     20c:	220d      	movs	r2, #13
     20e:	2300      	movs	r3, #0
     210:	4c0a      	ldr	r4, [pc, #40]	; (23c <ADS1298_SPI_Address_Byte_Count+0x68>)
     212:	47a0      	blx	r4
     214:	4a08      	ldr	r2, [pc, #32]	; (238 <ADS1298_SPI_Address_Byte_Count+0x64>)
     216:	6913      	ldr	r3, [r2, #16]
	
    //while (!( UCB0IFG & UCRXIFG ));     // wait until the buffer is empty
	while((spi_read_status(SPI) & SPI_SR_RDRF) == 0);
     218:	f013 0f01 	tst.w	r3, #1
     21c:	d0fb      	beq.n	216 <ADS1298_SPI_Address_Byte_Count+0x42>
	spi_read(SPI, (uint16_t*) &r_data, (uint8_t*) &r_pcs);
     21e:	4806      	ldr	r0, [pc, #24]	; (238 <ADS1298_SPI_Address_Byte_Count+0x64>)
     220:	f10d 0107 	add.w	r1, sp, #7
     224:	f10d 0206 	add.w	r2, sp, #6
     228:	4b05      	ldr	r3, [pc, #20]	; (240 <ADS1298_SPI_Address_Byte_Count+0x6c>)
     22a:	4798      	blx	r3
	delay_cycles((unsigned long)(DELAY_TCKS_4));
     22c:	2060      	movs	r0, #96	; 0x60
     22e:	4b05      	ldr	r3, [pc, #20]	; (244 <ADS1298_SPI_Address_Byte_Count+0x70>)
     230:	4798      	blx	r3
    //UCB0IFG &= ~UCTXIFG;                // Clear transmission flag
    //UCB0IFG &= ~UCRXIFG;                // Clear reception flag
}
     232:	b003      	add	sp, #12
     234:	bd30      	pop	{r4, r5, pc}
     236:	bf00      	nop
     238:	40008000 	.word	0x40008000
     23c:	000012b9 	.word	0x000012b9
     240:	00001279 	.word	0x00001279
     244:	20000001 	.word	0x20000001

00000248 <ADS1298_SPI_Data>:




unsigned char ADS1298_SPI_Data (unsigned char Data)  
{
     248:	b510      	push	{r4, lr}
     24a:	b082      	sub	sp, #8
     24c:	4601      	mov	r1, r0
	
    //UCB0IFG &= ~UCRXIFG;                  //Clear reception flag
    //UNUSED(spi_read_status(SPI));
	
    //TX_BUF = Data;                       //Send the data to the transmission buffer.
    spi_write(SPI, Data, spi_get_pcs(ADS_CS_VAL),  0); 
     24e:	480c      	ldr	r0, [pc, #48]	; (280 <ADS1298_SPI_Data+0x38>)
     250:	220d      	movs	r2, #13
     252:	2300      	movs	r3, #0
     254:	4c0b      	ldr	r4, [pc, #44]	; (284 <ADS1298_SPI_Data+0x3c>)
     256:	47a0      	blx	r4
     258:	4a09      	ldr	r2, [pc, #36]	; (280 <ADS1298_SPI_Data+0x38>)
     25a:	6913      	ldr	r3, [r2, #16]
	//while (!( UCB0IFG & UCRXIFG ));
	while((spi_read_status(SPI) & SPI_SR_RDRF) == 0);
     25c:	f013 0f01 	tst.w	r3, #1
     260:	d0fb      	beq.n	25a <ADS1298_SPI_Data+0x12>
	
	spi_read(SPI, (uint16_t*) &r_data, (uint8_t*) &r_pcs);
     262:	4807      	ldr	r0, [pc, #28]	; (280 <ADS1298_SPI_Data+0x38>)
     264:	f10d 0106 	add.w	r1, sp, #6
     268:	f10d 0205 	add.w	r2, sp, #5
     26c:	4b06      	ldr	r3, [pc, #24]	; (288 <ADS1298_SPI_Data+0x40>)
     26e:	4798      	blx	r3
    //UCB0IFG &= ~UCRXIFG;                  // Clear reception flag
    
    //TODO: Adjust delay for SAM4L
	//unsigned char i;
    //for (i = 50; i > 0; i--);            // Delay
	delay_cycles((unsigned long)(DELAY_TCKS_4));  
     270:	2060      	movs	r0, #96	; 0x60
     272:	4b06      	ldr	r3, [pc, #24]	; (28c <ADS1298_SPI_Data+0x44>)
     274:	4798      	blx	r3
    
    
    //return RX_BUF;                       // Return the data read.
	return r_data;
}
     276:	f89d 0006 	ldrb.w	r0, [sp, #6]
     27a:	b002      	add	sp, #8
     27c:	bd10      	pop	{r4, pc}
     27e:	bf00      	nop
     280:	40008000 	.word	0x40008000
     284:	000012b9 	.word	0x000012b9
     288:	00001279 	.word	0x00001279
     28c:	20000001 	.word	0x20000001

00000290 <Soft_Reset_ADS1298>:
	 
    ADS1298_SPI_Data (PLACE_CONVERTER_IN_SLEEP_MODE);              // Send 0x04 to the ADS1298
}

void Soft_Reset_ADS1298 (void)
{
     290:	b508      	push	{r3, lr}
    //Set_ADS1298_Chip_Enable (); 
	 
    ADS1298_SPI_Data (RESET_CONVERTER);                            // Send 0x06 to the ADS1298
     292:	2006      	movs	r0, #6
     294:	4b01      	ldr	r3, [pc, #4]	; (29c <Soft_Reset_ADS1298+0xc>)
     296:	4798      	blx	r3
     298:	bd08      	pop	{r3, pc}
     29a:	bf00      	nop
     29c:	00000249 	.word	0x00000249

000002a0 <Stop_Read_Data_Continuous>:
    Set_ADS1298_Chip_Enable (); 
    ADS1298_SPI_Data (STOP_CONVERSION);                            // Send 0x0A to the ADS1298
}

void Stop_Read_Data_Continuous (void)								// Stop data read continious.Detiene la lectura de datos en modo continuo
{
     2a0:	b508      	push	{r3, lr}
    Set_ADS1298_Chip_Enable (); 									// Enable the ADS1294R to establish the SPI communication.
	
    ADS1298_SPI_Data (STOP_READ_DATA_CONTINUOUSLY);					// Send the OPCODE 0x11 in order to stop the data read continuous.
     2a2:	2011      	movs	r0, #17
     2a4:	4b01      	ldr	r3, [pc, #4]	; (2ac <Stop_Read_Data_Continuous+0xc>)
     2a6:	4798      	blx	r3
     2a8:	bd08      	pop	{r3, pc}
     2aa:	bf00      	nop
     2ac:	00000249 	.word	0x00000249

000002b0 <ADS_ioconfig>:
    return Version_ID;
} 


//SAM4L ioport service initialization must be called first
void ADS_ioconfig(void){
     2b0:	b510      	push	{r4, lr}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
     2b2:	4c15      	ldr	r4, [pc, #84]	; (308 <ADS_ioconfig+0x58>)
     2b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     2b8:	6463      	str	r3, [r4, #68]	; 0x44
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
     2ba:	f8c4 3168 	str.w	r3, [r4, #360]	; 0x168

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
     2be:	6563      	str	r3, [r4, #84]	; 0x54

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
     2c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
     2c4:	6463      	str	r3, [r4, #68]	; 0x44
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
     2c6:	f8c4 3168 	str.w	r3, [r4, #360]	; 0x168
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
     2ca:	65a3      	str	r3, [r4, #88]	; 0x58

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
     2cc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
     2d0:	6463      	str	r3, [r4, #68]	; 0x44
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
     2d2:	f8c4 3168 	str.w	r3, [r4, #360]	; 0x168

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
     2d6:	6563      	str	r3, [r4, #84]	; 0x54
	ioport_set_pin_level(PORT_ADS_START, false);
	
	//CLKSEL=1: Internal Clock
	ioport_set_pin_dir(PORT_ADS_CLKSEL, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(PORT_ADS_CLKSEL, true);
	delay_us(50);
     2d8:	20ac      	movs	r0, #172	; 0xac
     2da:	4b0c      	ldr	r3, [pc, #48]	; (30c <ADS_ioconfig+0x5c>)
     2dc:	4798      	blx	r3

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
     2de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
     2e2:	6463      	str	r3, [r4, #68]	; 0x44
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
     2e4:	f8c4 3168 	str.w	r3, [r4, #360]	; 0x168

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
     2e8:	6563      	str	r3, [r4, #84]	; 0x54
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
     2ea:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
     2ee:	67a3      	str	r3, [r4, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
     2f0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
     2f4:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
     2f8:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
     2fc:	61a3      	str	r3, [r4, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
     2fe:	6263      	str	r3, [r4, #36]	; 0x24

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
     300:	63a3      	str	r3, [r4, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
     302:	60a3      	str	r3, [r4, #8]
     304:	bd10      	pop	{r4, pc}
     306:	bf00      	nop
     308:	400e1000 	.word	0x400e1000
     30c:	20000001 	.word	0x20000001

00000310 <board_init>:
	ioport_set_pin_mode(pin, mode);\
	ioport_disable_pin(pin);\
} while (0)

void board_init(void)
{
     310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     314:	b093      	sub	sp, #76	; 0x4c
	return 1U << (pin & 0x1F);
}

__always_inline static void arch_ioport_init(void)
{
	sysclk_enable_peripheral_clock(GPIO);
     316:	4cad      	ldr	r4, [pc, #692]	; (5cc <board_init+0x2bc>)
     318:	4620      	mov	r0, r4
     31a:	4bad      	ldr	r3, [pc, #692]	; (5d0 <board_init+0x2c0>)
     31c:	4798      	blx	r3
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
     31e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
     322:	67a3      	str	r3, [r4, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
     324:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
     328:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
     32c:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
     330:	61a3      	str	r3, [r4, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
     332:	62a3      	str	r3, [r4, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
     334:	63a3      	str	r3, [r4, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
     336:	60a3      	str	r3, [r4, #8]
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
     338:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
     33c:	67a3      	str	r3, [r4, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
     33e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
     342:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
     346:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
     34a:	61a3      	str	r3, [r4, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
     34c:	62a3      	str	r3, [r4, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
     34e:	63a3      	str	r3, [r4, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
     350:	60a3      	str	r3, [r4, #8]
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
     352:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
     356:	67a3      	str	r3, [r4, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
     358:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
     35c:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
     360:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
     364:	61a3      	str	r3, [r4, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
     366:	62a3      	str	r3, [r4, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
     368:	63a3      	str	r3, [r4, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
     36a:	60a3      	str	r3, [r4, #8]
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
     36c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
     370:	67a3      	str	r3, [r4, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
     372:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
     376:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
     37a:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
     37e:	61a3      	str	r3, [r4, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
     380:	62a3      	str	r3, [r4, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
     382:	63a3      	str	r3, [r4, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
     384:	60a3      	str	r3, [r4, #8]
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
     386:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     38a:	67a3      	str	r3, [r4, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
     38c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
     390:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
     394:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
     398:	61a3      	str	r3, [r4, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
     39a:	6263      	str	r3, [r4, #36]	; 0x24

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
     39c:	63a3      	str	r3, [r4, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
     39e:	60a3      	str	r3, [r4, #8]
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
     3a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
     3a4:	67a3      	str	r3, [r4, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
     3a6:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
     3aa:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
     3ae:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
     3b2:	61a3      	str	r3, [r4, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
     3b4:	6263      	str	r3, [r4, #36]	; 0x24

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
     3b6:	63a3      	str	r3, [r4, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
     3b8:	60a3      	str	r3, [r4, #8]
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
     3ba:	4b86      	ldr	r3, [pc, #536]	; (5d4 <board_init+0x2c4>)
     3bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     3c0:	679a      	str	r2, [r3, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
     3c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
     3c6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
     3ca:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	}
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
     3ce:	615a      	str	r2, [r3, #20]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
     3d0:	629a      	str	r2, [r3, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
     3d2:	639a      	str	r2, [r3, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
     3d4:	609a      	str	r2, [r3, #8]
	//CS2
	ioport_set_pin_peripheral_mode(PIN_PA14, IOPORT_MODE_MUX_C);
	//CS3
	ioport_set_pin_peripheral_mode(PIN_PB12, IOPORT_MODE_MUX_B);

	spi_enable_clock(SPI);
     3d6:	f5a4 2459 	sub.w	r4, r4, #888832	; 0xd9000
     3da:	4620      	mov	r0, r4
     3dc:	4b7e      	ldr	r3, [pc, #504]	; (5d8 <board_init+0x2c8>)
     3de:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIDIS;
     3e0:	2302      	movs	r3, #2
     3e2:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SWRST;
     3e4:	2380      	movs	r3, #128	; 0x80
     3e6:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
     3e8:	6863      	ldr	r3, [r4, #4]
     3ea:	f043 0301 	orr.w	r3, r3, #1
     3ee:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
     3f0:	6863      	ldr	r3, [r4, #4]
     3f2:	f043 0310 	orr.w	r3, r3, #16
     3f6:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
     3f8:	6863      	ldr	r3, [r4, #4]
     3fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
     3fe:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_variable_peripheral_select(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_PS;
     400:	6863      	ldr	r3, [r4, #4]
     402:	f043 0302 	orr.w	r3, r3, #2
     406:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_peripheral_select_decode(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_PCSDEC);
     408:	6863      	ldr	r3, [r4, #4]
     40a:	f023 0304 	bic.w	r3, r3, #4
     40e:	6063      	str	r3, [r4, #4]
     410:	2400      	movs	r4, #0
	//spi_set_peripheral_chip_select_value(SPI, SPI_CHSEL);
	//spi_set_transfer_delay(SPI, 1, 50, 0);
	//spi_set_delay_between_chip_select(SPI, 0);

	for(char i = 0; i < 4; i++){
		spi_set_bits_per_transfer(SPI, i, 8);
     412:	4d72      	ldr	r5, [pc, #456]	; (5dc <board_init+0x2cc>)
     414:	4f72      	ldr	r7, [pc, #456]	; (5e0 <board_init+0x2d0>)
		//spi_set_baudrate_div(SPI, i, spi_calc_baudrate_div(1000000, sysclk_get_cpu_hz()));
		spi_set_baudrate_div(SPI, i, (sysclk_get_cpu_hz() / 500000));
     416:	4e73      	ldr	r6, [pc, #460]	; (5e4 <board_init+0x2d4>)
	//spi_set_peripheral_chip_select_value(SPI, SPI_CHSEL);
	//spi_set_transfer_delay(SPI, 1, 50, 0);
	//spi_set_delay_between_chip_select(SPI, 0);

	for(char i = 0; i < 4; i++){
		spi_set_bits_per_transfer(SPI, i, 8);
     418:	4628      	mov	r0, r5
     41a:	4621      	mov	r1, r4
     41c:	2208      	movs	r2, #8
     41e:	47b8      	blx	r7
		//spi_set_baudrate_div(SPI, i, spi_calc_baudrate_div(1000000, sysclk_get_cpu_hz()));
		spi_set_baudrate_div(SPI, i, (sysclk_get_cpu_hz() / 500000));
     420:	4628      	mov	r0, r5
     422:	4621      	mov	r1, r4
     424:	225f      	movs	r2, #95	; 0x5f
     426:	47b0      	blx	r6
		spi_configure_cs_behavior(SPI, i, SPI_CS_KEEP_LOW);
     428:	4628      	mov	r0, r5
     42a:	4621      	mov	r1, r4
     42c:	2208      	movs	r2, #8
     42e:	4b6e      	ldr	r3, [pc, #440]	; (5e8 <board_init+0x2d8>)
     430:	4798      	blx	r3
		spi_set_clock_polarity(SPI, i, 0);
     432:	4628      	mov	r0, r5
     434:	4621      	mov	r1, r4
     436:	2200      	movs	r2, #0
     438:	4b6c      	ldr	r3, [pc, #432]	; (5ec <board_init+0x2dc>)
     43a:	4798      	blx	r3
		spi_set_clock_phase(SPI, i, 0);
     43c:	4628      	mov	r0, r5
     43e:	4621      	mov	r1, r4
     440:	2200      	movs	r2, #0
     442:	4b6b      	ldr	r3, [pc, #428]	; (5f0 <board_init+0x2e0>)
     444:	4798      	blx	r3
     446:	3401      	adds	r4, #1
	spi_disable_peripheral_select_decode(SPI);
	//spi_set_peripheral_chip_select_value(SPI, SPI_CHSEL);
	//spi_set_transfer_delay(SPI, 1, 50, 0);
	//spi_set_delay_between_chip_select(SPI, 0);

	for(char i = 0; i < 4; i++){
     448:	2c04      	cmp	r4, #4
     44a:	d1e5      	bne.n	418 <board_init+0x108>
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIEN;
     44c:	2601      	movs	r6, #1
     44e:	4b63      	ldr	r3, [pc, #396]	; (5dc <board_init+0x2cc>)
     450:	601e      	str	r6, [r3, #0]
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
     452:	4d5e      	ldr	r5, [pc, #376]	; (5cc <board_init+0x2bc>)
     454:	f44f 6700 	mov.w	r7, #2048	; 0x800
     458:	67af      	str	r7, [r5, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
     45a:	f8c5 7088 	str.w	r7, [r5, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
     45e:	f8c5 70c8 	str.w	r7, [r5, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
     462:	f8c5 7108 	str.w	r7, [r5, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
     466:	61af      	str	r7, [r5, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
     468:	62af      	str	r7, [r5, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
     46a:	63af      	str	r7, [r5, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
     46c:	60af      	str	r7, [r5, #8]
#ifdef CONF_USART0
	//USART0 RXD
	ioport_set_pin_peripheral_mode(PIN_PA11, IOPORT_MODE_MUX_A);

	#if SAM4L
		sysclk_enable_peripheral_clock(USART0);
     46e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 618 <board_init+0x308>
     472:	4640      	mov	r0, r8
     474:	f8df b158 	ldr.w	fp, [pc, #344]	; 5d0 <board_init+0x2c0>
     478:	47d8      	blx	fp
	#endif
	
	//USART0 configuration struct
	const sam_usart_opt_t usart0_console_settings = {
     47a:	2400      	movs	r4, #0
     47c:	940f      	str	r4, [sp, #60]	; 0x3c
     47e:	9410      	str	r4, [sp, #64]	; 0x40
     480:	9411      	str	r4, [sp, #68]	; 0x44
     482:	f44f 5316 	mov.w	r3, #9600	; 0x2580
     486:	930c      	str	r3, [sp, #48]	; 0x30
     488:	23c0      	movs	r3, #192	; 0xc0
     48a:	930d      	str	r3, [sp, #52]	; 0x34
     48c:	970e      	str	r7, [sp, #56]	; 0x38
		CONF_USART_0_PARITY,
		CONF_USART_0_STOP_BITS,
		US_MR_CHMODE_NORMAL
	};
	
	usart_init_rs232(USART0, &usart0_console_settings, sysclk_get_main_hz());
     48e:	4640      	mov	r0, r8
     490:	a90c      	add	r1, sp, #48	; 0x30
     492:	f04f 7237 	mov.w	r2, #47972352	; 0x2dc0000
     496:	4b57      	ldr	r3, [pc, #348]	; (5f4 <board_init+0x2e4>)
     498:	4798      	blx	r3
	usart_enable_tx(USART0);
     49a:	4640      	mov	r0, r8
     49c:	4b56      	ldr	r3, [pc, #344]	; (5f8 <board_init+0x2e8>)
     49e:	4798      	blx	r3
	usart_enable_rx(USART0);
     4a0:	4640      	mov	r0, r8
     4a2:	4b56      	ldr	r3, [pc, #344]	; (5fc <board_init+0x2ec>)
     4a4:	4798      	blx	r3
	usart_enable_interrupt(USART0, US_IER_RXRDY);
     4a6:	4640      	mov	r0, r8
     4a8:	4631      	mov	r1, r6
     4aa:	f8df a170 	ldr.w	sl, [pc, #368]	; 61c <board_init+0x30c>
     4ae:	47d0      	blx	sl
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
     4b0:	f8df 916c 	ldr.w	r9, [pc, #364]	; 620 <board_init+0x310>
     4b4:	23a0      	movs	r3, #160	; 0xa0
     4b6:	f889 3341 	strb.w	r3, [r9, #833]	; 0x341
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
     4ba:	f04f 0802 	mov.w	r8, #2
     4be:	f8c9 8008 	str.w	r8, [r9, #8]
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
     4c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
     4c6:	67ab      	str	r3, [r5, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
     4c8:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
     4cc:	f8c5 30c8 	str.w	r3, [r5, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
     4d0:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
     4d4:	61ab      	str	r3, [r5, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
     4d6:	62ab      	str	r3, [r5, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
     4d8:	63ab      	str	r3, [r5, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
     4da:	60ab      	str	r3, [r5, #8]
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
     4dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     4e0:	67ab      	str	r3, [r5, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
     4e2:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
     4e6:	f8c5 30c8 	str.w	r3, [r5, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
     4ea:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
     4ee:	61ab      	str	r3, [r5, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
     4f0:	62ab      	str	r3, [r5, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
     4f2:	63ab      	str	r3, [r5, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
     4f4:	60ab      	str	r3, [r5, #8]
	ioport_set_pin_peripheral_mode(PIN_PA16, IOPORT_MODE_MUX_A);
	//USART1 RXD
	ioport_set_pin_peripheral_mode(PIN_PA15, IOPORT_MODE_MUX_A);
	
	#if SAM4L
		sysclk_enable_peripheral_clock(USART1);
     4f6:	f5a5 2539 	sub.w	r5, r5, #757760	; 0xb9000
     4fa:	4628      	mov	r0, r5
     4fc:	47d8      	blx	fp
	#endif
	
	//USART1 configuration struct
	const sam_usart_opt_t usart1_console_settings = {
     4fe:	9409      	str	r4, [sp, #36]	; 0x24
     500:	940a      	str	r4, [sp, #40]	; 0x28
     502:	940b      	str	r4, [sp, #44]	; 0x2c
     504:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
     508:	9306      	str	r3, [sp, #24]
     50a:	23c0      	movs	r3, #192	; 0xc0
     50c:	9307      	str	r3, [sp, #28]
     50e:	9708      	str	r7, [sp, #32]
		CONF_USART_1_PARITY,
		CONF_USART_1_STOP_BITS,
		US_MR_CHMODE_NORMAL
	};
	
	usart_init_rs232(USART1, &usart1_console_settings, sysclk_get_main_hz());
     510:	4628      	mov	r0, r5
     512:	a906      	add	r1, sp, #24
     514:	f04f 7237 	mov.w	r2, #47972352	; 0x2dc0000
     518:	4b36      	ldr	r3, [pc, #216]	; (5f4 <board_init+0x2e4>)
     51a:	4798      	blx	r3
	usart_enable_tx(USART1);
     51c:	4628      	mov	r0, r5
     51e:	4b36      	ldr	r3, [pc, #216]	; (5f8 <board_init+0x2e8>)
     520:	4798      	blx	r3
	usart_enable_rx(USART1);
     522:	4628      	mov	r0, r5
     524:	4b35      	ldr	r3, [pc, #212]	; (5fc <board_init+0x2ec>)
     526:	4798      	blx	r3
	usart_enable_interrupt(USART1, US_IER_RXRDY);
     528:	4628      	mov	r0, r5
     52a:	4631      	mov	r1, r6
     52c:	47d0      	blx	sl
     52e:	2304      	movs	r3, #4
     530:	f8c9 3008 	str.w	r3, [r9, #8]
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
     534:	4b27      	ldr	r3, [pc, #156]	; (5d4 <board_init+0x2c4>)
     536:	679e      	str	r6, [r3, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
     538:	f8c3 6088 	str.w	r6, [r3, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
     53c:	f8c3 60c8 	str.w	r6, [r3, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
     540:	f8c3 6108 	str.w	r6, [r3, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
     544:	619e      	str	r6, [r3, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
     546:	629e      	str	r6, [r3, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
     548:	639e      	str	r6, [r3, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
     54a:	609e      	str	r6, [r3, #8]
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
     54c:	f8c3 8078 	str.w	r8, [r3, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
     550:	f8c3 8088 	str.w	r8, [r3, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
     554:	f8c3 80c8 	str.w	r8, [r3, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
     558:	f8c3 8108 	str.w	r8, [r3, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
     55c:	f8c3 8018 	str.w	r8, [r3, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
     560:	f8c3 8028 	str.w	r8, [r3, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
     564:	f8c3 8038 	str.w	r8, [r3, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
     568:	f8c3 8008 	str.w	r8, [r3, #8]
	//SCL
	ioport_set_pin_peripheral_mode(PIN_PB01, IOPORT_MODE_MUX_A);

	/* Set TWIM options */
	uint32_t cpu_speed = 0;
	cpu_speed = sysclk_get_peripheral_bus_hz(EXAMPLE_TWIM);
     56c:	f5a5 4540 	sub.w	r5, r5, #49152	; 0xc000
     570:	4628      	mov	r0, r5
     572:	4b23      	ldr	r3, [pc, #140]	; (600 <board_init+0x2f0>)
     574:	4798      	blx	r3
	struct twim_config opts = {
     576:	f04f 7337 	mov.w	r3, #47972352	; 0x2dc0000
     57a:	9300      	str	r3, [sp, #0]
     57c:	4b21      	ldr	r3, [pc, #132]	; (604 <board_init+0x2f4>)
     57e:	9301      	str	r3, [sp, #4]
     580:	9402      	str	r4, [sp, #8]
     582:	f88d 400c 	strb.w	r4, [sp, #12]
     586:	f88d 400d 	strb.w	r4, [sp, #13]
     58a:	f88d 400e 	strb.w	r4, [sp, #14]
     58e:	f88d 400f 	strb.w	r4, [sp, #15]
     592:	f88d 4010 	strb.w	r4, [sp, #16]
     596:	f88d 4011 	strb.w	r4, [sp, #17]
     59a:	f88d 4012 	strb.w	r4, [sp, #18]
     59e:	f88d 4013 	strb.w	r4, [sp, #19]
     5a2:	f88d 4014 	strb.w	r4, [sp, #20]
     5a6:	f88d 4015 	strb.w	r4, [sp, #21]
     5aa:	f88d 4016 	strb.w	r4, [sp, #22]
     5ae:	f88d 4017 	strb.w	r4, [sp, #23]
		.hs_clock_drive_strength_low = 0,
		.hs_data_slew_limit = 0,
		.hs_data_drive_strength_low = 0,
	};
	/* Initialize the TWIM Module */
	twim_set_callback(EXAMPLE_TWIM, 0, twim_default_callback, 1);
     5b2:	4628      	mov	r0, r5
     5b4:	4621      	mov	r1, r4
     5b6:	4a14      	ldr	r2, [pc, #80]	; (608 <board_init+0x2f8>)
     5b8:	4633      	mov	r3, r6
     5ba:	4e14      	ldr	r6, [pc, #80]	; (60c <board_init+0x2fc>)
     5bc:	47b0      	blx	r6
	twim_set_config(EXAMPLE_TWIM, &opts);
     5be:	4628      	mov	r0, r5
     5c0:	4669      	mov	r1, sp
     5c2:	4b13      	ldr	r3, [pc, #76]	; (610 <board_init+0x300>)
     5c4:	4798      	blx	r3
#endif

//ADS 1294R initialization
#ifdef CONF_ADS

	 ADS_ioconfig();
     5c6:	4b13      	ldr	r3, [pc, #76]	; (614 <board_init+0x304>)
     5c8:	4798      	blx	r3
     5ca:	e02b      	b.n	624 <board_init+0x314>
     5cc:	400e1000 	.word	0x400e1000
     5d0:	00000b3d 	.word	0x00000b3d
     5d4:	400e1200 	.word	0x400e1200
     5d8:	0000126d 	.word	0x0000126d
     5dc:	40008000 	.word	0x40008000
     5e0:	00001375 	.word	0x00001375
     5e4:	00001389 	.word	0x00001389
     5e8:	00001331 	.word	0x00001331
     5ec:	000012f1 	.word	0x000012f1
     5f0:	00001311 	.word	0x00001311
     5f4:	00001a11 	.word	0x00001a11
     5f8:	00001a65 	.word	0x00001a65
     5fc:	00001a6d 	.word	0x00001a6d
     600:	00000979 	.word	0x00000979
     604:	000186a0 	.word	0x000186a0
     608:	000013c9 	.word	0x000013c9
     60c:	00001875 	.word	0x00001875
     610:	00001785 	.word	0x00001785
     614:	000002b1 	.word	0x000002b1
     618:	40024000 	.word	0x40024000
     61c:	00001a75 	.word	0x00001a75
     620:	e000e100 	.word	0xe000e100
	//ioport_set_pin_dir(PORT_ADS_POWER, IOPORT_DIR_OUTPUT);
	//ioport_set_pin_level(PORT_ADS_POWER, true);
	////!DRDY interrupt Enable
	//ioport_set_pin_peripheral_mode(PORT_ADS_DRDY, IOPORT_MODE_MUX_C);
	
	Soft_Reset_ADS1298();
     624:	4b19      	ldr	r3, [pc, #100]	; (68c <board_init+0x37c>)
     626:	4798      	blx	r3
	delay_us(50);
     628:	20ac      	movs	r0, #172	; 0xac
     62a:	4b19      	ldr	r3, [pc, #100]	; (690 <board_init+0x380>)
     62c:	4798      	blx	r3
	
	
	Stop_Read_Data_Continuous();
     62e:	4b19      	ldr	r3, [pc, #100]	; (694 <board_init+0x384>)
     630:	4798      	blx	r3
	/*Configuration register 1*/
	ADS1298_SPI_Address_Byte_Count(WRITE_CONFIG_1_REGISTER , SINGLE_BYTE);
     632:	2041      	movs	r0, #65	; 0x41
     634:	4621      	mov	r1, r4
     636:	4e18      	ldr	r6, [pc, #96]	; (698 <board_init+0x388>)
     638:	47b0      	blx	r6
	ADS1298_SPI_Data(0x06);
     63a:	2006      	movs	r0, #6
     63c:	4d17      	ldr	r5, [pc, #92]	; (69c <board_init+0x38c>)
     63e:	47a8      	blx	r5
	/*Configuration register 2*/
	ADS1298_SPI_Address_Byte_Count(WRITE_CONFIG_2_REGISTER , SINGLE_BYTE);
     640:	2042      	movs	r0, #66	; 0x42
     642:	4621      	mov	r1, r4
     644:	47b0      	blx	r6
	ADS1298_SPI_Data(0x00);
     646:	4620      	mov	r0, r4
     648:	47a8      	blx	r5
	/*Configuration register 3*/
	ADS1298_SPI_Address_Byte_Count(WRITE_CONFIG_3_REGISTER , SINGLE_BYTE);
     64a:	2043      	movs	r0, #67	; 0x43
     64c:	4621      	mov	r1, r4
     64e:	47b0      	blx	r6
	ADS1298_SPI_Data(0xDC);
     650:	20dc      	movs	r0, #220	; 0xdc
     652:	47a8      	blx	r5
	/*Channel 1 register*/
	ADS1298_SPI_Address_Byte_Count(WRITE_CHANNEL_1_SET_REGISTER, SINGLE_BYTE);
     654:	2045      	movs	r0, #69	; 0x45
     656:	4621      	mov	r1, r4
     658:	47b0      	blx	r6
	ADS1298_SPI_Data(0x00);
     65a:	4620      	mov	r0, r4
     65c:	47a8      	blx	r5
	/*Channel 2 register*/
	ADS1298_SPI_Address_Byte_Count(WRITE_CHANNEL_2_SET_REGISTER , SINGLE_BYTE);
     65e:	2046      	movs	r0, #70	; 0x46
     660:	4621      	mov	r1, r4
     662:	47b0      	blx	r6
	ADS1298_SPI_Data(0x00);
     664:	4620      	mov	r0, r4
     666:	47a8      	blx	r5
	/*Channel 3 register*/
	ADS1298_SPI_Address_Byte_Count(WRITE_CHANNEL_3_SET_REGISTER , SINGLE_BYTE);
     668:	2047      	movs	r0, #71	; 0x47
     66a:	4621      	mov	r1, r4
     66c:	47b0      	blx	r6
	ADS1298_SPI_Data(0x00);
     66e:	4620      	mov	r0, r4
     670:	47a8      	blx	r5
	/*RLD_SENSP register*/
	ADS1298_SPI_Address_Byte_Count(WRITE_RIGHT_LEG_DRIVE_SENSE_POSITIVE_REGISTER, SINGLE_BYTE);
     672:	204d      	movs	r0, #77	; 0x4d
     674:	4621      	mov	r1, r4
     676:	47b0      	blx	r6
	ADS1298_SPI_Data(0x0F);
     678:	200f      	movs	r0, #15
     67a:	47a8      	blx	r5
	/*RLD_SENSN register*/
	ADS1298_SPI_Address_Byte_Count(WRITE_RIGHT_LEG_DRIVE_SENSE_NEGATIVE_REGISTER, SINGLE_BYTE);
     67c:	204e      	movs	r0, #78	; 0x4e
     67e:	4621      	mov	r1, r4
     680:	47b0      	blx	r6
	ADS1298_SPI_Data(0x0F);
     682:	200f      	movs	r0, #15
     684:	47a8      	blx	r5
	/*Respiration control register*/
	//Respiration channel not enabled
#endif
}
     686:	b013      	add	sp, #76	; 0x4c
     688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     68c:	00000291 	.word	0x00000291
     690:	20000001 	.word	0x20000001
     694:	000002a1 	.word	0x000002a1
     698:	000001d5 	.word	0x000001d5
     69c:	00000249 	.word	0x00000249

000006a0 <dfll_enable_closed_loop>:
	/* Finally, stop the reference clock */
	genclk_disable(0);
}

void dfll_enable_closed_loop(const struct dfll_config *cfg, uint32_t dfll_id)
{
     6a0:	b410      	push	{r4}
}

static inline void genclk_enable(const struct genclk_config *cfg,
		uint32_t id)
{
	 SCIF->SCIF_GCCTRL[id].SCIF_GCCTRL = cfg->ctrl | SCIF_GCCTRL_CEN;
     6a2:	6803      	ldr	r3, [r0, #0]
     6a4:	f043 0201 	orr.w	r2, r3, #1
     6a8:	4b3e      	ldr	r3, [pc, #248]	; (7a4 <dfll_enable_closed_loop+0x104>)
     6aa:	675a      	str	r2, [r3, #116]	; 0x74
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     6ac:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
     6b0:	b672      	cpsid	i
     6b2:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
     6b6:	2400      	movs	r4, #0
     6b8:	493b      	ldr	r1, [pc, #236]	; (7a8 <dfll_enable_closed_loop+0x108>)
     6ba:	700c      	strb	r4, [r1, #0]
	 * Enable the DFLL first, but don't wait for the DFLL0RDY bit
	 * because if the DFLL has been disabled before, the DFLL0RDY
	 * bit stays cleared until it is re-enabled.
	 */
	flags = cpu_irq_save();
	SCIF->SCIF_UNLOCK = SCIF_UNLOCK_KEY(0xAAUL)
     6bc:	493b      	ldr	r1, [pc, #236]	; (7ac <dfll_enable_closed_loop+0x10c>)
     6be:	6199      	str	r1, [r3, #24]
		| SCIF_UNLOCK_ADDR((uint32_t)&SCIF->SCIF_DFLL0CONF - (uint32_t)SCIF);
	SCIF->SCIF_DFLL0CONF = SCIF_DFLL0CONF_EN;
     6c0:	2101      	movs	r1, #1
     6c2:	6299      	str	r1, [r3, #40]	; 0x28
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     6c4:	b922      	cbnz	r2, 6d0 <dfll_enable_closed_loop+0x30>
		cpu_irq_enable();
     6c6:	4b38      	ldr	r3, [pc, #224]	; (7a8 <dfll_enable_closed_loop+0x108>)
     6c8:	7019      	strb	r1, [r3, #0]
     6ca:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
     6ce:	b662      	cpsie	i

	/*
	 * Then, configure the DFLL, taking care to wait for the
	 * DFLL0RDY bit before every step.
	 */
	dfll_write_reg(DFLL0STEP, cfg->step);
     6d0:	4a34      	ldr	r2, [pc, #208]	; (7a4 <dfll_enable_closed_loop+0x104>)
     6d2:	6953      	ldr	r3, [r2, #20]
     6d4:	f013 0f08 	tst.w	r3, #8
     6d8:	d0fb      	beq.n	6d2 <dfll_enable_closed_loop+0x32>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     6da:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
     6de:	b672      	cpsid	i
     6e0:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
     6e4:	2200      	movs	r2, #0
     6e6:	4b30      	ldr	r3, [pc, #192]	; (7a8 <dfll_enable_closed_loop+0x108>)
     6e8:	701a      	strb	r2, [r3, #0]
     6ea:	4b2e      	ldr	r3, [pc, #184]	; (7a4 <dfll_enable_closed_loop+0x104>)
     6ec:	4a30      	ldr	r2, [pc, #192]	; (7b0 <dfll_enable_closed_loop+0x110>)
     6ee:	619a      	str	r2, [r3, #24]
     6f0:	68c2      	ldr	r2, [r0, #12]
     6f2:	635a      	str	r2, [r3, #52]	; 0x34
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     6f4:	b929      	cbnz	r1, 702 <dfll_enable_closed_loop+0x62>
		cpu_irq_enable();
     6f6:	2201      	movs	r2, #1
     6f8:	4b2b      	ldr	r3, [pc, #172]	; (7a8 <dfll_enable_closed_loop+0x108>)
     6fa:	701a      	strb	r2, [r3, #0]
     6fc:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
     700:	b662      	cpsie	i
	dfll_write_reg(DFLL0MUL, cfg->mul);
     702:	4a28      	ldr	r2, [pc, #160]	; (7a4 <dfll_enable_closed_loop+0x104>)
     704:	6953      	ldr	r3, [r2, #20]
     706:	f013 0f08 	tst.w	r3, #8
     70a:	d0fb      	beq.n	704 <dfll_enable_closed_loop+0x64>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     70c:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
     710:	b672      	cpsid	i
     712:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
     716:	2200      	movs	r2, #0
     718:	4b23      	ldr	r3, [pc, #140]	; (7a8 <dfll_enable_closed_loop+0x108>)
     71a:	701a      	strb	r2, [r3, #0]
     71c:	4b21      	ldr	r3, [pc, #132]	; (7a4 <dfll_enable_closed_loop+0x104>)
     71e:	4a25      	ldr	r2, [pc, #148]	; (7b4 <dfll_enable_closed_loop+0x114>)
     720:	619a      	str	r2, [r3, #24]
     722:	6882      	ldr	r2, [r0, #8]
     724:	631a      	str	r2, [r3, #48]	; 0x30
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     726:	b929      	cbnz	r1, 734 <dfll_enable_closed_loop+0x94>
		cpu_irq_enable();
     728:	2201      	movs	r2, #1
     72a:	4b1f      	ldr	r3, [pc, #124]	; (7a8 <dfll_enable_closed_loop+0x108>)
     72c:	701a      	strb	r2, [r3, #0]
     72e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
     732:	b662      	cpsie	i
	dfll_write_reg(DFLL0SSG, cfg->ssg);
     734:	4a1b      	ldr	r2, [pc, #108]	; (7a4 <dfll_enable_closed_loop+0x104>)
     736:	6953      	ldr	r3, [r2, #20]
     738:	f013 0f08 	tst.w	r3, #8
     73c:	d0fb      	beq.n	736 <dfll_enable_closed_loop+0x96>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     73e:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
     742:	b672      	cpsid	i
     744:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
     748:	2200      	movs	r2, #0
     74a:	4b17      	ldr	r3, [pc, #92]	; (7a8 <dfll_enable_closed_loop+0x108>)
     74c:	701a      	strb	r2, [r3, #0]
     74e:	4b15      	ldr	r3, [pc, #84]	; (7a4 <dfll_enable_closed_loop+0x104>)
     750:	4a19      	ldr	r2, [pc, #100]	; (7b8 <dfll_enable_closed_loop+0x118>)
     752:	619a      	str	r2, [r3, #24]
     754:	6902      	ldr	r2, [r0, #16]
     756:	639a      	str	r2, [r3, #56]	; 0x38
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     758:	b929      	cbnz	r1, 766 <dfll_enable_closed_loop+0xc6>
		cpu_irq_enable();
     75a:	2201      	movs	r2, #1
     75c:	4b12      	ldr	r3, [pc, #72]	; (7a8 <dfll_enable_closed_loop+0x108>)
     75e:	701a      	strb	r2, [r3, #0]
     760:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
     764:	b662      	cpsie	i
	dfll_write_reg(DFLL0CONF, cfg->conf | SCIF_DFLL0CONF_EN);
     766:	4a0f      	ldr	r2, [pc, #60]	; (7a4 <dfll_enable_closed_loop+0x104>)
     768:	6953      	ldr	r3, [r2, #20]
     76a:	f013 0f08 	tst.w	r3, #8
     76e:	d0fb      	beq.n	768 <dfll_enable_closed_loop+0xc8>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     770:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
     774:	b672      	cpsid	i
     776:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
     77a:	2100      	movs	r1, #0
     77c:	4b0a      	ldr	r3, [pc, #40]	; (7a8 <dfll_enable_closed_loop+0x108>)
     77e:	7019      	strb	r1, [r3, #0]
     780:	4b08      	ldr	r3, [pc, #32]	; (7a4 <dfll_enable_closed_loop+0x104>)
     782:	490a      	ldr	r1, [pc, #40]	; (7ac <dfll_enable_closed_loop+0x10c>)
     784:	6199      	str	r1, [r3, #24]
     786:	6841      	ldr	r1, [r0, #4]
     788:	f041 0101 	orr.w	r1, r1, #1
     78c:	6299      	str	r1, [r3, #40]	; 0x28
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     78e:	b92a      	cbnz	r2, 79c <dfll_enable_closed_loop+0xfc>
		cpu_irq_enable();
     790:	2201      	movs	r2, #1
     792:	4b05      	ldr	r3, [pc, #20]	; (7a8 <dfll_enable_closed_loop+0x108>)
     794:	701a      	strb	r2, [r3, #0]
     796:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
     79a:	b662      	cpsie	i
}
     79c:	f85d 4b04 	ldr.w	r4, [sp], #4
     7a0:	4770      	bx	lr
     7a2:	bf00      	nop
     7a4:	400e0800 	.word	0x400e0800
     7a8:	20000038 	.word	0x20000038
     7ac:	aa000028 	.word	0xaa000028
     7b0:	aa000034 	.word	0xaa000034
     7b4:	aa000030 	.word	0xaa000030
     7b8:	aa000038 	.word	0xaa000038

000007bc <dfll_enable_config_defaults>:
	/* Finally, stop the reference clock */
	genclk_disable(0);
}

void dfll_enable_config_defaults(uint32_t dfll_id)
{
     7bc:	b500      	push	{lr}
     7be:	b089      	sub	sp, #36	; 0x24
#ifdef CONFIG_DFLL0_SOURCE
	struct dfll_config dfllcfg;
#endif
	static bool open_loop_done = false;

	if((SCIF->SCIF_DFLL0CONF & SCIF_DFLL0CONF_MODE) &&
     7c0:	4b22      	ldr	r3, [pc, #136]	; (84c <dfll_enable_config_defaults+0x90>)
     7c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     7c4:	f013 0f02 	tst.w	r3, #2
     7c8:	d009      	beq.n	7de <dfll_enable_config_defaults+0x22>
	   (SCIF->SCIF_DFLL0CONF & SCIF_DFLL0CONF_EN)) {
     7ca:	4b20      	ldr	r3, [pc, #128]	; (84c <dfll_enable_config_defaults+0x90>)
     7cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
#ifdef CONFIG_DFLL0_SOURCE
	struct dfll_config dfllcfg;
#endif
	static bool open_loop_done = false;

	if((SCIF->SCIF_DFLL0CONF & SCIF_DFLL0CONF_MODE) &&
     7ce:	f013 0f01 	tst.w	r3, #1
     7d2:	d004      	beq.n	7de <dfll_enable_config_defaults+0x22>
}

static inline bool dfll_is_fine_locked(uint32_t dfll_id)
{
	UNUSED(dfll_id);
	return !!(SCIF->SCIF_PCLKSR & SCIF_PCLKSR_DFLL0LOCKF);
     7d4:	4b1d      	ldr	r3, [pc, #116]	; (84c <dfll_enable_config_defaults+0x90>)
     7d6:	695b      	ldr	r3, [r3, #20]
	   (SCIF->SCIF_DFLL0CONF & SCIF_DFLL0CONF_EN)) {
		// Closed-loop mode
		if (dfll_is_fine_locked(dfll_id)) {
     7d8:	f013 0f04 	tst.w	r3, #4
     7dc:	d133      	bne.n	846 <dfll_enable_config_defaults+0x8a>
	}
	if (open_loop_done == true) {
		return;
	}

	switch (dfll_id) {
     7de:	2800      	cmp	r0, #0
     7e0:	d131      	bne.n	846 <dfll_enable_config_defaults+0x8a>
		return !!(SCIF->SCIF_PCLKSR & SCIF_PCLKSR_OSC0RDY);
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return !!(BSCIF->BSCIF_PCLKSR & BSCIF_PCLKSR_OSC32RDY);
     7e2:	4b1b      	ldr	r3, [pc, #108]	; (850 <dfll_enable_config_defaults+0x94>)
     7e4:	695b      	ldr	r3, [r3, #20]
		/* Nothing to do */
		break;

#ifdef BOARD_OSC32_HZ
	case GENCLK_SRC_OSC32K:
		if (!osc_is_ready(OSC_ID_OSC32)) {
     7e6:	f013 0f01 	tst.w	r3, #1
     7ea:	d106      	bne.n	7fa <dfll_enable_config_defaults+0x3e>
		break;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		osc_priv_enable_osc32();
     7ec:	4b19      	ldr	r3, [pc, #100]	; (854 <dfll_enable_config_defaults+0x98>)
     7ee:	4798      	blx	r3
		return !!(SCIF->SCIF_PCLKSR & SCIF_PCLKSR_OSC0RDY);
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return !!(BSCIF->BSCIF_PCLKSR & BSCIF_PCLKSR_OSC32RDY);
     7f0:	4a17      	ldr	r2, [pc, #92]	; (850 <dfll_enable_config_defaults+0x94>)
     7f2:	6953      	ldr	r3, [r2, #20]
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     7f4:	f013 0f01 	tst.w	r3, #1
     7f8:	d0fb      	beq.n	7f2 <dfll_enable_config_defaults+0x36>
}

static inline void genclk_config_set_source(struct genclk_config *cfg,
		enum genclk_source src)
{
	cfg->ctrl = (cfg->ctrl & ~SCIF_GCCTRL_OSCSEL_Msk)
     7fa:	f44f 7380 	mov.w	r3, #256	; 0x100
     7fe:	9301      	str	r3, [sp, #4]
	genclk_config_defaults(&cfg->ref_cfg, 0);
	genclk_config_set_source(&cfg->ref_cfg, refclk);
	genclk_config_set_divider(&cfg->ref_cfg, divide);

	// Do a sync before reading a dfll conf register
	SCIF->SCIF_DFLL0SYNC = SCIF_DFLL0SYNC_SYNC;
     800:	2201      	movs	r2, #1
     802:	4b12      	ldr	r3, [pc, #72]	; (84c <dfll_enable_config_defaults+0x90>)
     804:	641a      	str	r2, [r3, #64]	; 0x40
	while (!(SCIF->SCIF_PCLKSR & SCIF_PCLKSR_DFLL0RDY));
     806:	461a      	mov	r2, r3
     808:	6953      	ldr	r3, [r2, #20]
     80a:	f013 0f08 	tst.w	r3, #8
     80e:	d0fb      	beq.n	808 <dfll_enable_config_defaults+0x4c>
	cfg->conf = SCIF->SCIF_DFLL0CONF;
     810:	4b0e      	ldr	r3, [pc, #56]	; (84c <dfll_enable_config_defaults+0x90>)
     812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
{
	if (freq < DFLL_MAX_RANGE3){
		cfg->freq_range = DFLL_RANGE3;
	}
	else if (freq < DFLL_MAX_RANGE2){
		cfg->freq_range = DFLL_RANGE2;
     814:	2202      	movs	r2, #2
     816:	f88d 201c 	strb.w	r2, [sp, #28]
		cfg->freq_range = DFLL_RANGE1;
	}
	else {
		cfg->freq_range = DFLL_RANGE0;
	}
	cfg->conf &= ~SCIF_DFLL0CONF_RANGE_Msk;
     81a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
	cfg->conf |=SCIF_DFLL0CONF_RANGE(cfg->freq_range);
     81e:	f043 1302 	orr.w	r3, r3, #131074	; 0x20002
     822:	9302      	str	r3, [sp, #8]
	// Select Closed Loop Mode
	cfg->conf |= SCIF_DFLL0CONF_MODE;
	// Write DFLL Frequency Range
	dfll_priv_set_frequency_range(cfg, CONFIG_DFLL0_FREQ);

	cfg->mul = mul;
     824:	f44f 63b7 	mov.w	r3, #1464	; 0x5b8
     828:	9303      	str	r3, [sp, #12]
	cfg->val = 0;
     82a:	2100      	movs	r1, #0
     82c:	9106      	str	r1, [sp, #24]
};

static inline void dfll_config_set_max_step(struct dfll_config *cfg,
		uint16_t coarse, uint16_t fine)
{
	cfg->step = (SCIF_DFLL0STEP_CSTEP(coarse)
     82e:	f04f 1304 	mov.w	r3, #262148	; 0x40004
     832:	9304      	str	r3, [sp, #16]
	/*
	 * Initial step length of 4. If this is set too high, the DFLL
	 * may fail to lock.
	 */
	dfll_config_set_max_step(cfg, 4, 4);
	cfg->ssg = 0;
     834:	9105      	str	r1, [sp, #20]
		dfll_config_init_closed_loop_mode(&dfllcfg,
			CONFIG_DFLL0_SOURCE,
			CONFIG_DFLL0_DIV,
			CONFIG_DFLL0_MUL);

		dfll_enable_closed_loop(&dfllcfg, dfll_id);
     836:	a801      	add	r0, sp, #4
     838:	4b07      	ldr	r3, [pc, #28]	; (858 <dfll_enable_config_defaults+0x9c>)
     83a:	4798      	blx	r3
}

static inline bool dfll_is_fine_locked(uint32_t dfll_id)
{
	UNUSED(dfll_id);
	return !!(SCIF->SCIF_PCLKSR & SCIF_PCLKSR_DFLL0LOCKF);
     83c:	4a03      	ldr	r2, [pc, #12]	; (84c <dfll_enable_config_defaults+0x90>)
     83e:	6953      	ldr	r3, [r2, #20]
		while (!dfll_is_fine_locked(dfll_id));
     840:	f013 0f04 	tst.w	r3, #4
     844:	d0fb      	beq.n	83e <dfll_enable_config_defaults+0x82>

	default:
		Assert(false);
		break;
	}
}
     846:	b009      	add	sp, #36	; 0x24
     848:	f85d fb04 	ldr.w	pc, [sp], #4
     84c:	400e0800 	.word	0x400e0800
     850:	400f0400 	.word	0x400f0400
     854:	0000085d 	.word	0x0000085d
     858:	000006a1 	.word	0x000006a1

0000085c <osc_priv_enable_osc32>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     85c:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
     860:	b672      	cpsid	i
     862:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
     866:	2100      	movs	r1, #0
     868:	4b07      	ldr	r3, [pc, #28]	; (888 <osc_priv_enable_osc32+0x2c>)
     86a:	7019      	strb	r1, [r3, #0]
void osc_priv_enable_osc32(void)
{
	irqflags_t flags;

	flags = cpu_irq_save();
	BSCIF->BSCIF_UNLOCK = BSCIF_UNLOCK_KEY(0xAAu)
     86c:	4b07      	ldr	r3, [pc, #28]	; (88c <osc_priv_enable_osc32+0x30>)
     86e:	4908      	ldr	r1, [pc, #32]	; (890 <osc_priv_enable_osc32+0x34>)
     870:	6199      	str	r1, [r3, #24]
		| BSCIF_UNLOCK_ADDR((uint32_t)&BSCIF->BSCIF_OSCCTRL32 - (uint32_t)BSCIF);
	BSCIF->BSCIF_OSCCTRL32 =
     872:	4908      	ldr	r1, [pc, #32]	; (894 <osc_priv_enable_osc32+0x38>)
     874:	6219      	str	r1, [r3, #32]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     876:	b92a      	cbnz	r2, 884 <osc_priv_enable_osc32+0x28>
		cpu_irq_enable();
     878:	2201      	movs	r2, #1
     87a:	4b03      	ldr	r3, [pc, #12]	; (888 <osc_priv_enable_osc32+0x2c>)
     87c:	701a      	strb	r2, [r3, #0]
     87e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
     882:	b662      	cpsie	i
     884:	4770      	bx	lr
     886:	bf00      	nop
     888:	20000038 	.word	0x20000038
     88c:	400f0400 	.word	0x400f0400
     890:	aa000020 	.word	0xaa000020
     894:	0005a10d 	.word	0x0005a10d

00000898 <sysclk_priv_enable_module>:
 * \param bus_id Bus index, given by the \c PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be enabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_enable_module(uint32_t bus_id, uint32_t module_index)
{
     898:	b470      	push	{r4, r5, r6}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     89a:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
     89e:	b672      	cpsid	i
     8a0:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
     8a4:	2400      	movs	r4, #0
     8a6:	4b0d      	ldr	r3, [pc, #52]	; (8dc <sysclk_priv_enable_module+0x44>)
     8a8:	701c      	strb	r4, [r3, #0]
	uint32_t   mask;

	flags = cpu_irq_save();

	/* Enable the clock */
	mask = *(&PM->PM_CPUMASK + bus_id);
     8aa:	0085      	lsls	r5, r0, #2
     8ac:	4b0c      	ldr	r3, [pc, #48]	; (8e0 <sysclk_priv_enable_module+0x48>)
     8ae:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	mask |= 1U << module_index;
     8b2:	2601      	movs	r6, #1
     8b4:	fa06 f101 	lsl.w	r1, r6, r1
     8b8:	4321      	orrs	r1, r4
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu) |
		BPM_UNLOCK_ADDR(((uint32_t)&PM->PM_CPUMASK - (uint32_t)PM) + (4 * bus_id));
     8ba:	3520      	adds	r5, #32
     8bc:	f405 757f 	and.w	r5, r5, #1020	; 0x3fc
	flags = cpu_irq_save();

	/* Enable the clock */
	mask = *(&PM->PM_CPUMASK + bus_id);
	mask |= 1U << module_index;
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu) |
     8c0:	f045 452a 	orr.w	r5, r5, #2852126720	; 0xaa000000
     8c4:	4c07      	ldr	r4, [pc, #28]	; (8e4 <sysclk_priv_enable_module+0x4c>)
     8c6:	65a5      	str	r5, [r4, #88]	; 0x58
		BPM_UNLOCK_ADDR(((uint32_t)&PM->PM_CPUMASK - (uint32_t)PM) + (4 * bus_id));
	*(&PM->PM_CPUMASK + bus_id) = mask;
     8c8:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     8cc:	b922      	cbnz	r2, 8d8 <sysclk_priv_enable_module+0x40>
		cpu_irq_enable();
     8ce:	4b03      	ldr	r3, [pc, #12]	; (8dc <sysclk_priv_enable_module+0x44>)
     8d0:	701e      	strb	r6, [r3, #0]
     8d2:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
     8d6:	b662      	cpsie	i

	cpu_irq_restore(flags);
}
     8d8:	bc70      	pop	{r4, r5, r6}
     8da:	4770      	bx	lr
     8dc:	20000038 	.word	0x20000038
     8e0:	400e0020 	.word	0x400e0020
     8e4:	400e0000 	.word	0x400e0000

000008e8 <sysclk_enable_pba_module>:
/**
 * \brief Enable a module clock derived from the PBA clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
void sysclk_enable_pba_module(uint32_t module_index)
{
     8e8:	b538      	push	{r3, r4, r5, lr}
     8ea:	4604      	mov	r4, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     8ec:	f3ef 8510 	mrs	r5, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
     8f0:	b672      	cpsid	i
     8f2:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
     8f6:	2200      	movs	r2, #0
     8f8:	4b0a      	ldr	r3, [pc, #40]	; (924 <sysclk_enable_pba_module+0x3c>)
     8fa:	701a      	strb	r2, [r3, #0]
	irqflags_t flags;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();

	if (PM->PM_PBAMASK == 0) {
     8fc:	4b0a      	ldr	r3, [pc, #40]	; (928 <sysclk_enable_pba_module+0x40>)
     8fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     900:	b91b      	cbnz	r3, 90a <sysclk_enable_pba_module+0x22>
 * \brief Enable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_HSB, module_index);
     902:	2001      	movs	r0, #1
     904:	2105      	movs	r1, #5
     906:	4b09      	ldr	r3, [pc, #36]	; (92c <sysclk_enable_pba_module+0x44>)
     908:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     90a:	b92d      	cbnz	r5, 918 <sysclk_enable_pba_module+0x30>
		cpu_irq_enable();
     90c:	2201      	movs	r2, #1
     90e:	4b05      	ldr	r3, [pc, #20]	; (924 <sysclk_enable_pba_module+0x3c>)
     910:	701a      	strb	r2, [r3, #0]
     912:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
     916:	b662      	cpsie	i
	}

	cpu_irq_restore(flags);

	/* Enable the module */
	sysclk_priv_enable_module(PM_CLK_GRP_PBA, module_index);
     918:	2002      	movs	r0, #2
     91a:	4621      	mov	r1, r4
     91c:	4b03      	ldr	r3, [pc, #12]	; (92c <sysclk_enable_pba_module+0x44>)
     91e:	4798      	blx	r3
     920:	bd38      	pop	{r3, r4, r5, pc}
     922:	bf00      	nop
     924:	20000038 	.word	0x20000038
     928:	400e0000 	.word	0x400e0000
     92c:	00000899 	.word	0x00000899

00000930 <sysclk_enable_pbb_module>:
/**
 * \brief Enable a module clock derived from the PBB clock
 * \param module_index Index of the module clock in the PBBMASK register
 */
void sysclk_enable_pbb_module(uint32_t module_index)
{
     930:	b538      	push	{r3, r4, r5, lr}
     932:	4604      	mov	r4, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     934:	f3ef 8510 	mrs	r5, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
     938:	b672      	cpsid	i
     93a:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
     93e:	2200      	movs	r2, #0
     940:	4b0a      	ldr	r3, [pc, #40]	; (96c <sysclk_enable_pbb_module+0x3c>)
     942:	701a      	strb	r2, [r3, #0]
	irqflags_t flags;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();

	if (PM->PM_PBBMASK == 0) {
     944:	4b0a      	ldr	r3, [pc, #40]	; (970 <sysclk_enable_pbb_module+0x40>)
     946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     948:	b91b      	cbnz	r3, 952 <sysclk_enable_pbb_module+0x22>
     94a:	2001      	movs	r0, #1
     94c:	2106      	movs	r1, #6
     94e:	4b09      	ldr	r3, [pc, #36]	; (974 <sysclk_enable_pbb_module+0x44>)
     950:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     952:	b92d      	cbnz	r5, 960 <sysclk_enable_pbb_module+0x30>
		cpu_irq_enable();
     954:	2201      	movs	r2, #1
     956:	4b05      	ldr	r3, [pc, #20]	; (96c <sysclk_enable_pbb_module+0x3c>)
     958:	701a      	strb	r2, [r3, #0]
     95a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
     95e:	b662      	cpsie	i
	}

	cpu_irq_restore(flags);

	/* Enable the module */
	sysclk_priv_enable_module(PM_CLK_GRP_PBB, module_index);
     960:	2003      	movs	r0, #3
     962:	4621      	mov	r1, r4
     964:	4b03      	ldr	r3, [pc, #12]	; (974 <sysclk_enable_pbb_module+0x44>)
     966:	4798      	blx	r3
     968:	bd38      	pop	{r3, r4, r5, pc}
     96a:	bf00      	nop
     96c:	20000038 	.word	0x20000038
     970:	400e0000 	.word	0x400e0000
     974:	00000899 	.word	0x00000899

00000978 <sysclk_get_peripheral_bus_hz>:
 * \return Frequency of the bus attached to the specified peripheral, in Hz.
 */
uint32_t sysclk_get_peripheral_bus_hz(const volatile void *module)
{
	/* Fallthroughs intended for modules sharing the same peripheral bus. */
	switch ((uintptr_t)module) {
     978:	4b60      	ldr	r3, [pc, #384]	; (afc <sysclk_get_peripheral_bus_hz+0x184>)
     97a:	4298      	cmp	r0, r3
     97c:	f000 80b8 	beq.w	af0 <sysclk_get_peripheral_bus_hz+0x178>
     980:	d860      	bhi.n	a44 <sysclk_get_peripheral_bus_hz+0xcc>
     982:	f5a3 23a0 	sub.w	r3, r3, #327680	; 0x50000
     986:	4298      	cmp	r0, r3
     988:	f000 80b2 	beq.w	af0 <sysclk_get_peripheral_bus_hz+0x178>
     98c:	d82f      	bhi.n	9ee <sysclk_get_peripheral_bus_hz+0x76>
     98e:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
     992:	4298      	cmp	r0, r3
     994:	f000 80ac 	beq.w	af0 <sysclk_get_peripheral_bus_hz+0x178>
     998:	d814      	bhi.n	9c4 <sysclk_get_peripheral_bus_hz+0x4c>
     99a:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
     99e:	4298      	cmp	r0, r3
     9a0:	f000 80a6 	beq.w	af0 <sysclk_get_peripheral_bus_hz+0x178>
     9a4:	d804      	bhi.n	9b0 <sysclk_get_peripheral_bus_hz+0x38>
     9a6:	f1b0 2f40 	cmp.w	r0, #1073758208	; 0x40004000
     9aa:	f040 80a4 	bne.w	af6 <sysclk_get_peripheral_bus_hz+0x17e>
     9ae:	e09f      	b.n	af0 <sysclk_get_peripheral_bus_hz+0x178>
     9b0:	4b53      	ldr	r3, [pc, #332]	; (b00 <sysclk_get_peripheral_bus_hz+0x188>)
     9b2:	4298      	cmp	r0, r3
     9b4:	f000 809c 	beq.w	af0 <sysclk_get_peripheral_bus_hz+0x178>
     9b8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
     9bc:	4298      	cmp	r0, r3
     9be:	f040 809a 	bne.w	af6 <sysclk_get_peripheral_bus_hz+0x17e>
     9c2:	e095      	b.n	af0 <sysclk_get_peripheral_bus_hz+0x178>
     9c4:	4b4f      	ldr	r3, [pc, #316]	; (b04 <sysclk_get_peripheral_bus_hz+0x18c>)
     9c6:	4298      	cmp	r0, r3
     9c8:	f000 8092 	beq.w	af0 <sysclk_get_peripheral_bus_hz+0x178>
     9cc:	d805      	bhi.n	9da <sysclk_get_peripheral_bus_hz+0x62>
     9ce:	f5a3 5370 	sub.w	r3, r3, #15360	; 0x3c00
     9d2:	4298      	cmp	r0, r3
     9d4:	f040 808f 	bne.w	af6 <sysclk_get_peripheral_bus_hz+0x17e>
     9d8:	e08a      	b.n	af0 <sysclk_get_peripheral_bus_hz+0x178>
     9da:	4b4b      	ldr	r3, [pc, #300]	; (b08 <sysclk_get_peripheral_bus_hz+0x190>)
     9dc:	4298      	cmp	r0, r3
     9de:	f000 8087 	beq.w	af0 <sysclk_get_peripheral_bus_hz+0x178>
     9e2:	f503 43f8 	add.w	r3, r3, #31744	; 0x7c00
     9e6:	4298      	cmp	r0, r3
     9e8:	f040 8085 	bne.w	af6 <sysclk_get_peripheral_bus_hz+0x17e>
     9ec:	e080      	b.n	af0 <sysclk_get_peripheral_bus_hz+0x178>
     9ee:	4b47      	ldr	r3, [pc, #284]	; (b0c <sysclk_get_peripheral_bus_hz+0x194>)
     9f0:	4298      	cmp	r0, r3
     9f2:	d07d      	beq.n	af0 <sysclk_get_peripheral_bus_hz+0x178>
     9f4:	d811      	bhi.n	a1a <sysclk_get_peripheral_bus_hz+0xa2>
     9f6:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
     9fa:	4298      	cmp	r0, r3
     9fc:	d078      	beq.n	af0 <sysclk_get_peripheral_bus_hz+0x178>
     9fe:	d804      	bhi.n	a0a <sysclk_get_peripheral_bus_hz+0x92>
     a00:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
     a04:	4298      	cmp	r0, r3
     a06:	d176      	bne.n	af6 <sysclk_get_peripheral_bus_hz+0x17e>
     a08:	e072      	b.n	af0 <sysclk_get_peripheral_bus_hz+0x178>
     a0a:	4b41      	ldr	r3, [pc, #260]	; (b10 <sysclk_get_peripheral_bus_hz+0x198>)
     a0c:	4298      	cmp	r0, r3
     a0e:	d06f      	beq.n	af0 <sysclk_get_peripheral_bus_hz+0x178>
     a10:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
     a14:	4298      	cmp	r0, r3
     a16:	d16e      	bne.n	af6 <sysclk_get_peripheral_bus_hz+0x17e>
     a18:	e06a      	b.n	af0 <sysclk_get_peripheral_bus_hz+0x178>
     a1a:	4b3e      	ldr	r3, [pc, #248]	; (b14 <sysclk_get_peripheral_bus_hz+0x19c>)
     a1c:	4298      	cmp	r0, r3
     a1e:	d067      	beq.n	af0 <sysclk_get_peripheral_bus_hz+0x178>
     a20:	d808      	bhi.n	a34 <sysclk_get_peripheral_bus_hz+0xbc>
     a22:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
     a26:	4298      	cmp	r0, r3
     a28:	d062      	beq.n	af0 <sysclk_get_peripheral_bus_hz+0x178>
     a2a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
     a2e:	4298      	cmp	r0, r3
     a30:	d161      	bne.n	af6 <sysclk_get_peripheral_bus_hz+0x17e>
     a32:	e05d      	b.n	af0 <sysclk_get_peripheral_bus_hz+0x178>
     a34:	4b38      	ldr	r3, [pc, #224]	; (b18 <sysclk_get_peripheral_bus_hz+0x1a0>)
     a36:	4298      	cmp	r0, r3
     a38:	d05a      	beq.n	af0 <sysclk_get_peripheral_bus_hz+0x178>
     a3a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
     a3e:	4298      	cmp	r0, r3
     a40:	d159      	bne.n	af6 <sysclk_get_peripheral_bus_hz+0x17e>
     a42:	e055      	b.n	af0 <sysclk_get_peripheral_bus_hz+0x178>
     a44:	4b35      	ldr	r3, [pc, #212]	; (b1c <sysclk_get_peripheral_bus_hz+0x1a4>)
     a46:	4298      	cmp	r0, r3
     a48:	d052      	beq.n	af0 <sysclk_get_peripheral_bus_hz+0x178>
     a4a:	d827      	bhi.n	a9c <sysclk_get_peripheral_bus_hz+0x124>
     a4c:	f5a3 337c 	sub.w	r3, r3, #258048	; 0x3f000
     a50:	4298      	cmp	r0, r3
     a52:	d04d      	beq.n	af0 <sysclk_get_peripheral_bus_hz+0x178>
     a54:	d811      	bhi.n	a7a <sysclk_get_peripheral_bus_hz+0x102>
     a56:	f5a3 3304 	sub.w	r3, r3, #135168	; 0x21000
     a5a:	4298      	cmp	r0, r3
     a5c:	d048      	beq.n	af0 <sysclk_get_peripheral_bus_hz+0x178>
     a5e:	d804      	bhi.n	a6a <sysclk_get_peripheral_bus_hz+0xf2>
     a60:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
     a64:	4298      	cmp	r0, r3
     a66:	d146      	bne.n	af6 <sysclk_get_peripheral_bus_hz+0x17e>
     a68:	e042      	b.n	af0 <sysclk_get_peripheral_bus_hz+0x178>
     a6a:	4b2d      	ldr	r3, [pc, #180]	; (b20 <sysclk_get_peripheral_bus_hz+0x1a8>)
     a6c:	4298      	cmp	r0, r3
     a6e:	d03f      	beq.n	af0 <sysclk_get_peripheral_bus_hz+0x178>
     a70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
     a74:	4298      	cmp	r0, r3
     a76:	d13e      	bne.n	af6 <sysclk_get_peripheral_bus_hz+0x17e>
     a78:	e03a      	b.n	af0 <sysclk_get_peripheral_bus_hz+0x178>
     a7a:	4b2a      	ldr	r3, [pc, #168]	; (b24 <sysclk_get_peripheral_bus_hz+0x1ac>)
     a7c:	4298      	cmp	r0, r3
     a7e:	d037      	beq.n	af0 <sysclk_get_peripheral_bus_hz+0x178>
     a80:	d804      	bhi.n	a8c <sysclk_get_peripheral_bus_hz+0x114>
     a82:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
     a86:	4298      	cmp	r0, r3
     a88:	d135      	bne.n	af6 <sysclk_get_peripheral_bus_hz+0x17e>
     a8a:	e031      	b.n	af0 <sysclk_get_peripheral_bus_hz+0x178>
     a8c:	4b26      	ldr	r3, [pc, #152]	; (b28 <sysclk_get_peripheral_bus_hz+0x1b0>)
     a8e:	4298      	cmp	r0, r3
     a90:	d02e      	beq.n	af0 <sysclk_get_peripheral_bus_hz+0x178>
     a92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
     a96:	4298      	cmp	r0, r3
     a98:	d12d      	bne.n	af6 <sysclk_get_peripheral_bus_hz+0x17e>
     a9a:	e029      	b.n	af0 <sysclk_get_peripheral_bus_hz+0x178>
     a9c:	4b23      	ldr	r3, [pc, #140]	; (b2c <sysclk_get_peripheral_bus_hz+0x1b4>)
     a9e:	4298      	cmp	r0, r3
     aa0:	d026      	beq.n	af0 <sysclk_get_peripheral_bus_hz+0x178>
     aa2:	d811      	bhi.n	ac8 <sysclk_get_peripheral_bus_hz+0x150>
     aa4:	f5a3 4378 	sub.w	r3, r3, #63488	; 0xf800
     aa8:	4298      	cmp	r0, r3
     aaa:	d021      	beq.n	af0 <sysclk_get_peripheral_bus_hz+0x178>
     aac:	d804      	bhi.n	ab8 <sysclk_get_peripheral_bus_hz+0x140>
     aae:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
     ab2:	4298      	cmp	r0, r3
     ab4:	d11f      	bne.n	af6 <sysclk_get_peripheral_bus_hz+0x17e>
     ab6:	e01b      	b.n	af0 <sysclk_get_peripheral_bus_hz+0x178>
     ab8:	4b1d      	ldr	r3, [pc, #116]	; (b30 <sysclk_get_peripheral_bus_hz+0x1b8>)
     aba:	4298      	cmp	r0, r3
     abc:	d018      	beq.n	af0 <sysclk_get_peripheral_bus_hz+0x178>
     abe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
     ac2:	4298      	cmp	r0, r3
     ac4:	d117      	bne.n	af6 <sysclk_get_peripheral_bus_hz+0x17e>
     ac6:	e013      	b.n	af0 <sysclk_get_peripheral_bus_hz+0x178>
     ac8:	4b1a      	ldr	r3, [pc, #104]	; (b34 <sysclk_get_peripheral_bus_hz+0x1bc>)
     aca:	4298      	cmp	r0, r3
     acc:	d010      	beq.n	af0 <sysclk_get_peripheral_bus_hz+0x178>
     ace:	d808      	bhi.n	ae2 <sysclk_get_peripheral_bus_hz+0x16a>
     ad0:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
     ad4:	4298      	cmp	r0, r3
     ad6:	d00b      	beq.n	af0 <sysclk_get_peripheral_bus_hz+0x178>
     ad8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
     adc:	4298      	cmp	r0, r3
     ade:	d10a      	bne.n	af6 <sysclk_get_peripheral_bus_hz+0x17e>
     ae0:	e006      	b.n	af0 <sysclk_get_peripheral_bus_hz+0x178>
     ae2:	4b15      	ldr	r3, [pc, #84]	; (b38 <sysclk_get_peripheral_bus_hz+0x1c0>)
     ae4:	4298      	cmp	r0, r3
     ae6:	d003      	beq.n	af0 <sysclk_get_peripheral_bus_hz+0x178>
     ae8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
     aec:	4298      	cmp	r0, r3
     aee:	d102      	bne.n	af6 <sysclk_get_peripheral_bus_hz+0x17e>
	case TWIM2_ADDR:
	case TWIM3_ADDR:
	#if !SAM4LS
	case LCDCA_ADDR:
	#endif
		return sysclk_get_pba_hz();
     af0:	f04f 7037 	mov.w	r0, #47972352	; 0x2dc0000
     af4:	4770      	bx	lr
	case PICOUART_ADDR:
		return sysclk_get_pbd_hz();

	default:
		Assert(false);
		return 0;
     af6:	2000      	movs	r0, #0
	}
}
     af8:	4770      	bx	lr
     afa:	bf00      	nop
     afc:	40078000 	.word	0x40078000
     b00:	40010000 	.word	0x40010000
     b04:	4001c000 	.word	0x4001c000
     b08:	4001c400 	.word	0x4001c400
     b0c:	40040000 	.word	0x40040000
     b10:	40038000 	.word	0x40038000
     b14:	40068000 	.word	0x40068000
     b18:	4006c000 	.word	0x4006c000
     b1c:	400e0000 	.word	0x400e0000
     b20:	400a0000 	.word	0x400a0000
     b24:	400a4000 	.word	0x400a4000
     b28:	400a5000 	.word	0x400a5000
     b2c:	400f0000 	.word	0x400f0000
     b30:	400e0c00 	.word	0x400e0c00
     b34:	400f0c00 	.word	0x400f0c00
     b38:	400f1000 	.word	0x400f1000

00000b3c <sysclk_enable_peripheral_clock>:
 *  has an associated clock on the HSB bus, this will be enabled also.
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_enable_peripheral_clock(const volatile void *module)
{
     b3c:	b508      	push	{r3, lr}
	switch ((uintptr_t)module) {
     b3e:	4bb3      	ldr	r3, [pc, #716]	; (e0c <sysclk_enable_peripheral_clock+0x2d0>)
     b40:	4298      	cmp	r0, r3
     b42:	f000 815a 	beq.w	dfa <sysclk_enable_peripheral_clock+0x2be>
     b46:	d86a      	bhi.n	c1e <sysclk_enable_peripheral_clock+0xe2>
     b48:	f5a3 23a0 	sub.w	r3, r3, #327680	; 0x50000
     b4c:	4298      	cmp	r0, r3
     b4e:	f000 8113 	beq.w	d78 <sysclk_enable_peripheral_clock+0x23c>
     b52:	d82f      	bhi.n	bb4 <sysclk_enable_peripheral_clock+0x78>
     b54:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
     b58:	4298      	cmp	r0, r3
     b5a:	f000 80f2 	beq.w	d42 <sysclk_enable_peripheral_clock+0x206>
     b5e:	d814      	bhi.n	b8a <sysclk_enable_peripheral_clock+0x4e>
     b60:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
     b64:	4298      	cmp	r0, r3
     b66:	f000 80d2 	beq.w	d0e <sysclk_enable_peripheral_clock+0x1d2>
     b6a:	d804      	bhi.n	b76 <sysclk_enable_peripheral_clock+0x3a>
     b6c:	f1b0 2f40 	cmp.w	r0, #1073758208	; 0x40004000
     b70:	f000 80c9 	beq.w	d06 <sysclk_enable_peripheral_clock+0x1ca>
     b74:	bd08      	pop	{r3, pc}
     b76:	4ba6      	ldr	r3, [pc, #664]	; (e10 <sysclk_enable_peripheral_clock+0x2d4>)
     b78:	4298      	cmp	r0, r3
     b7a:	f000 80cc 	beq.w	d16 <sysclk_enable_peripheral_clock+0x1da>
     b7e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
     b82:	4298      	cmp	r0, r3
     b84:	f000 80d2 	beq.w	d2c <sysclk_enable_peripheral_clock+0x1f0>
     b88:	bd08      	pop	{r3, pc}
     b8a:	4ba2      	ldr	r3, [pc, #648]	; (e14 <sysclk_enable_peripheral_clock+0x2d8>)
     b8c:	4298      	cmp	r0, r3
     b8e:	f000 80e0 	beq.w	d52 <sysclk_enable_peripheral_clock+0x216>
     b92:	d805      	bhi.n	ba0 <sysclk_enable_peripheral_clock+0x64>
     b94:	f5a3 5370 	sub.w	r3, r3, #15360	; 0x3c00
     b98:	4298      	cmp	r0, r3
     b9a:	f000 80d6 	beq.w	d4a <sysclk_enable_peripheral_clock+0x20e>
     b9e:	bd08      	pop	{r3, pc}
     ba0:	4b9d      	ldr	r3, [pc, #628]	; (e18 <sysclk_enable_peripheral_clock+0x2dc>)
     ba2:	4298      	cmp	r0, r3
     ba4:	f000 80d9 	beq.w	d5a <sysclk_enable_peripheral_clock+0x21e>
     ba8:	f503 43f8 	add.w	r3, r3, #31744	; 0x7c00
     bac:	4298      	cmp	r0, r3
     bae:	f000 80d8 	beq.w	d62 <sysclk_enable_peripheral_clock+0x226>
     bb2:	bd08      	pop	{r3, pc}
     bb4:	4b99      	ldr	r3, [pc, #612]	; (e1c <sysclk_enable_peripheral_clock+0x2e0>)
     bb6:	4298      	cmp	r0, r3
     bb8:	f000 8107 	beq.w	dca <sysclk_enable_peripheral_clock+0x28e>
     bbc:	d815      	bhi.n	bea <sysclk_enable_peripheral_clock+0xae>
     bbe:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
     bc2:	4298      	cmp	r0, r3
     bc4:	f000 80ee 	beq.w	da4 <sysclk_enable_peripheral_clock+0x268>
     bc8:	d805      	bhi.n	bd6 <sysclk_enable_peripheral_clock+0x9a>
     bca:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
     bce:	4298      	cmp	r0, r3
     bd0:	f000 80dd 	beq.w	d8e <sysclk_enable_peripheral_clock+0x252>
     bd4:	bd08      	pop	{r3, pc}
     bd6:	4b92      	ldr	r3, [pc, #584]	; (e20 <sysclk_enable_peripheral_clock+0x2e4>)
     bd8:	4298      	cmp	r0, r3
     bda:	f000 80ee 	beq.w	dba <sysclk_enable_peripheral_clock+0x27e>
     bde:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
     be2:	4298      	cmp	r0, r3
     be4:	f000 80ed 	beq.w	dc2 <sysclk_enable_peripheral_clock+0x286>
     be8:	bd08      	pop	{r3, pc}
     bea:	4b8e      	ldr	r3, [pc, #568]	; (e24 <sysclk_enable_peripheral_clock+0x2e8>)
     bec:	4298      	cmp	r0, r3
     bee:	f000 80f8 	beq.w	de2 <sysclk_enable_peripheral_clock+0x2a6>
     bf2:	d80a      	bhi.n	c0a <sysclk_enable_peripheral_clock+0xce>
     bf4:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
     bf8:	4298      	cmp	r0, r3
     bfa:	f000 80ea 	beq.w	dd2 <sysclk_enable_peripheral_clock+0x296>
     bfe:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
     c02:	4298      	cmp	r0, r3
     c04:	f000 80e9 	beq.w	dda <sysclk_enable_peripheral_clock+0x29e>
     c08:	bd08      	pop	{r3, pc}
     c0a:	4b87      	ldr	r3, [pc, #540]	; (e28 <sysclk_enable_peripheral_clock+0x2ec>)
     c0c:	4298      	cmp	r0, r3
     c0e:	f000 80ec 	beq.w	dea <sysclk_enable_peripheral_clock+0x2ae>
     c12:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
     c16:	4298      	cmp	r0, r3
     c18:	f000 80eb 	beq.w	df2 <sysclk_enable_peripheral_clock+0x2b6>
     c1c:	bd08      	pop	{r3, pc}
     c1e:	4b83      	ldr	r3, [pc, #524]	; (e2c <sysclk_enable_peripheral_clock+0x2f0>)
     c20:	4298      	cmp	r0, r3
     c22:	f000 814d 	beq.w	ec0 <sysclk_enable_peripheral_clock+0x384>
     c26:	d834      	bhi.n	c92 <sysclk_enable_peripheral_clock+0x156>
     c28:	f5a3 337c 	sub.w	r3, r3, #258048	; 0x3f000
     c2c:	4298      	cmp	r0, r3
     c2e:	f000 8127 	beq.w	e80 <sysclk_enable_peripheral_clock+0x344>
     c32:	d815      	bhi.n	c60 <sysclk_enable_peripheral_clock+0x124>
     c34:	f5a3 3304 	sub.w	r3, r3, #135168	; 0x21000
     c38:	4298      	cmp	r0, r3
     c3a:	f000 810d 	beq.w	e58 <sysclk_enable_peripheral_clock+0x31c>
     c3e:	d805      	bhi.n	c4c <sysclk_enable_peripheral_clock+0x110>
     c40:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
     c44:	4298      	cmp	r0, r3
     c46:	f000 80dc 	beq.w	e02 <sysclk_enable_peripheral_clock+0x2c6>
     c4a:	bd08      	pop	{r3, pc}
     c4c:	4b78      	ldr	r3, [pc, #480]	; (e30 <sysclk_enable_peripheral_clock+0x2f4>)
     c4e:	4298      	cmp	r0, r3
     c50:	f000 8106 	beq.w	e60 <sysclk_enable_peripheral_clock+0x324>
     c54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
     c58:	4298      	cmp	r0, r3
     c5a:	f000 8109 	beq.w	e70 <sysclk_enable_peripheral_clock+0x334>
     c5e:	bd08      	pop	{r3, pc}
     c60:	4b74      	ldr	r3, [pc, #464]	; (e34 <sysclk_enable_peripheral_clock+0x2f8>)
     c62:	4298      	cmp	r0, r3
     c64:	f000 8120 	beq.w	ea8 <sysclk_enable_peripheral_clock+0x36c>
     c68:	d80a      	bhi.n	c80 <sysclk_enable_peripheral_clock+0x144>
     c6a:	f5a3 5340 	sub.w	r3, r3, #12288	; 0x3000
     c6e:	4298      	cmp	r0, r3
     c70:	f000 810a 	beq.w	e88 <sysclk_enable_peripheral_clock+0x34c>
     c74:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
     c78:	4298      	cmp	r0, r3
     c7a:	f000 810d 	beq.w	e98 <sysclk_enable_peripheral_clock+0x35c>
     c7e:	bd08      	pop	{r3, pc}
     c80:	4b6d      	ldr	r3, [pc, #436]	; (e38 <sysclk_enable_peripheral_clock+0x2fc>)
     c82:	4298      	cmp	r0, r3
     c84:	f000 8118 	beq.w	eb8 <sysclk_enable_peripheral_clock+0x37c>
     c88:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
     c8c:	4298      	cmp	r0, r3
     c8e:	d035      	beq.n	cfc <sysclk_enable_peripheral_clock+0x1c0>
     c90:	bd08      	pop	{r3, pc}
     c92:	4b6a      	ldr	r3, [pc, #424]	; (e3c <sysclk_enable_peripheral_clock+0x300>)
     c94:	4298      	cmp	r0, r3
     c96:	f000 812c 	beq.w	ef2 <sysclk_enable_peripheral_clock+0x3b6>
     c9a:	d815      	bhi.n	cc8 <sysclk_enable_peripheral_clock+0x18c>
     c9c:	f5a3 4378 	sub.w	r3, r3, #63488	; 0xf800
     ca0:	4298      	cmp	r0, r3
     ca2:	f000 8117 	beq.w	ed4 <sysclk_enable_peripheral_clock+0x398>
     ca6:	d805      	bhi.n	cb4 <sysclk_enable_peripheral_clock+0x178>
     ca8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
     cac:	4298      	cmp	r0, r3
     cae:	f000 810c 	beq.w	eca <sysclk_enable_peripheral_clock+0x38e>
     cb2:	bd08      	pop	{r3, pc}
     cb4:	4b62      	ldr	r3, [pc, #392]	; (e40 <sysclk_enable_peripheral_clock+0x304>)
     cb6:	4298      	cmp	r0, r3
     cb8:	f000 8111 	beq.w	ede <sysclk_enable_peripheral_clock+0x3a2>
     cbc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
     cc0:	4298      	cmp	r0, r3
     cc2:	f000 8111 	beq.w	ee8 <sysclk_enable_peripheral_clock+0x3ac>
     cc6:	bd08      	pop	{r3, pc}
     cc8:	4b5e      	ldr	r3, [pc, #376]	; (e44 <sysclk_enable_peripheral_clock+0x308>)
     cca:	4298      	cmp	r0, r3
     ccc:	f000 8120 	beq.w	f10 <sysclk_enable_peripheral_clock+0x3d4>
     cd0:	d80a      	bhi.n	ce8 <sysclk_enable_peripheral_clock+0x1ac>
     cd2:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
     cd6:	4298      	cmp	r0, r3
     cd8:	f000 8110 	beq.w	efc <sysclk_enable_peripheral_clock+0x3c0>
     cdc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
     ce0:	4298      	cmp	r0, r3
     ce2:	f000 8110 	beq.w	f06 <sysclk_enable_peripheral_clock+0x3ca>
     ce6:	bd08      	pop	{r3, pc}
     ce8:	4b57      	ldr	r3, [pc, #348]	; (e48 <sysclk_enable_peripheral_clock+0x30c>)
     cea:	4298      	cmp	r0, r3
     cec:	f000 8115 	beq.w	f1a <sysclk_enable_peripheral_clock+0x3de>
     cf0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
     cf4:	4298      	cmp	r0, r3
     cf6:	f000 8115 	beq.w	f24 <sysclk_enable_peripheral_clock+0x3e8>
     cfa:	bd08      	pop	{r3, pc}
     cfc:	2001      	movs	r0, #1
     cfe:	2109      	movs	r1, #9
     d00:	4b52      	ldr	r3, [pc, #328]	; (e4c <sysclk_enable_peripheral_clock+0x310>)
     d02:	4798      	blx	r3
     d04:	bd08      	pop	{r3, pc}
		sysclk_enable_hsb_module(SYSCLK_AESA_HSB);
		break;
	#endif

	case IISC_ADDR:
		sysclk_enable_pba_module(SYSCLK_IISC);
     d06:	2000      	movs	r0, #0
     d08:	4b51      	ldr	r3, [pc, #324]	; (e50 <sysclk_enable_peripheral_clock+0x314>)
     d0a:	4798      	blx	r3
		break;
     d0c:	bd08      	pop	{r3, pc}

	case SPI_ADDR:
		sysclk_enable_pba_module(SYSCLK_SPI);
     d0e:	2001      	movs	r0, #1
     d10:	4b4f      	ldr	r3, [pc, #316]	; (e50 <sysclk_enable_peripheral_clock+0x314>)
     d12:	4798      	blx	r3
		break;
     d14:	bd08      	pop	{r3, pc}

	case TC0_ADDR:
		sysclk_enable_pba_module(SYSCLK_TC0);
     d16:	2002      	movs	r0, #2
     d18:	4b4d      	ldr	r3, [pc, #308]	; (e50 <sysclk_enable_peripheral_clock+0x314>)
     d1a:	4798      	blx	r3
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
     d1c:	4b43      	ldr	r3, [pc, #268]	; (e2c <sysclk_enable_peripheral_clock+0x2f0>)
     d1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	temp_mask |= mask;
     d20:	f042 0255 	orr.w	r2, r2, #85	; 0x55
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
     d24:	494b      	ldr	r1, [pc, #300]	; (e54 <sysclk_enable_peripheral_clock+0x318>)
     d26:	6599      	str	r1, [r3, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
     d28:	641a      	str	r2, [r3, #64]	; 0x40
     d2a:	bd08      	pop	{r3, pc}
			| PBA_DIVMASK_TIMER_CLOCK5
			);
		break;

	case TC1_ADDR:
		sysclk_enable_pba_module(SYSCLK_TC1);
     d2c:	2003      	movs	r0, #3
     d2e:	4b48      	ldr	r3, [pc, #288]	; (e50 <sysclk_enable_peripheral_clock+0x314>)
     d30:	4798      	blx	r3
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
     d32:	4b3e      	ldr	r3, [pc, #248]	; (e2c <sysclk_enable_peripheral_clock+0x2f0>)
     d34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	temp_mask |= mask;
     d36:	f042 0255 	orr.w	r2, r2, #85	; 0x55
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
     d3a:	4946      	ldr	r1, [pc, #280]	; (e54 <sysclk_enable_peripheral_clock+0x318>)
     d3c:	6599      	str	r1, [r3, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
     d3e:	641a      	str	r2, [r3, #64]	; 0x40
     d40:	bd08      	pop	{r3, pc}
			| PBA_DIVMASK_TIMER_CLOCK5
			);
		break;

	case TWIM0_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIM0);
     d42:	2004      	movs	r0, #4
     d44:	4b42      	ldr	r3, [pc, #264]	; (e50 <sysclk_enable_peripheral_clock+0x314>)
     d46:	4798      	blx	r3
		break;
     d48:	bd08      	pop	{r3, pc}

	case TWIS0_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIS0);
     d4a:	2005      	movs	r0, #5
     d4c:	4b40      	ldr	r3, [pc, #256]	; (e50 <sysclk_enable_peripheral_clock+0x314>)
     d4e:	4798      	blx	r3
		break;
     d50:	bd08      	pop	{r3, pc}

	case TWIM1_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIM1);
     d52:	2006      	movs	r0, #6
     d54:	4b3e      	ldr	r3, [pc, #248]	; (e50 <sysclk_enable_peripheral_clock+0x314>)
     d56:	4798      	blx	r3
		break;
     d58:	bd08      	pop	{r3, pc}

	case TWIS1_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIS1);
     d5a:	2007      	movs	r0, #7
     d5c:	4b3c      	ldr	r3, [pc, #240]	; (e50 <sysclk_enable_peripheral_clock+0x314>)
     d5e:	4798      	blx	r3
		break;
     d60:	bd08      	pop	{r3, pc}

	case USART0_ADDR:
		sysclk_enable_pba_module(SYSCLK_USART0);
     d62:	2008      	movs	r0, #8
     d64:	4b3a      	ldr	r3, [pc, #232]	; (e50 <sysclk_enable_peripheral_clock+0x314>)
     d66:	4798      	blx	r3
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
     d68:	4b30      	ldr	r3, [pc, #192]	; (e2c <sysclk_enable_peripheral_clock+0x2f0>)
     d6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	temp_mask |= mask;
     d6c:	f042 0204 	orr.w	r2, r2, #4
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
     d70:	4938      	ldr	r1, [pc, #224]	; (e54 <sysclk_enable_peripheral_clock+0x318>)
     d72:	6599      	str	r1, [r3, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
     d74:	641a      	str	r2, [r3, #64]	; 0x40
     d76:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_divmask(PBA_DIVMASK_CLK_USART);
		break;

	case USART1_ADDR:
		sysclk_enable_pba_module(SYSCLK_USART1);
     d78:	2009      	movs	r0, #9
     d7a:	4b35      	ldr	r3, [pc, #212]	; (e50 <sysclk_enable_peripheral_clock+0x314>)
     d7c:	4798      	blx	r3
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
     d7e:	4b2b      	ldr	r3, [pc, #172]	; (e2c <sysclk_enable_peripheral_clock+0x2f0>)
     d80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	temp_mask |= mask;
     d82:	f042 0204 	orr.w	r2, r2, #4
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
     d86:	4933      	ldr	r1, [pc, #204]	; (e54 <sysclk_enable_peripheral_clock+0x318>)
     d88:	6599      	str	r1, [r3, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
     d8a:	641a      	str	r2, [r3, #64]	; 0x40
     d8c:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_divmask(PBA_DIVMASK_CLK_USART);
		break;

	case USART2_ADDR:
		sysclk_enable_pba_module(SYSCLK_USART2);
     d8e:	200a      	movs	r0, #10
     d90:	4b2f      	ldr	r3, [pc, #188]	; (e50 <sysclk_enable_peripheral_clock+0x314>)
     d92:	4798      	blx	r3
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
     d94:	4b25      	ldr	r3, [pc, #148]	; (e2c <sysclk_enable_peripheral_clock+0x2f0>)
     d96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	temp_mask |= mask;
     d98:	f042 0204 	orr.w	r2, r2, #4
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
     d9c:	492d      	ldr	r1, [pc, #180]	; (e54 <sysclk_enable_peripheral_clock+0x318>)
     d9e:	6599      	str	r1, [r3, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
     da0:	641a      	str	r2, [r3, #64]	; 0x40
     da2:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_divmask(PBA_DIVMASK_CLK_USART);
		break;

	case USART3_ADDR:
		sysclk_enable_pba_module(SYSCLK_USART3);
     da4:	200b      	movs	r0, #11
     da6:	4b2a      	ldr	r3, [pc, #168]	; (e50 <sysclk_enable_peripheral_clock+0x314>)
     da8:	4798      	blx	r3
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
     daa:	4b20      	ldr	r3, [pc, #128]	; (e2c <sysclk_enable_peripheral_clock+0x2f0>)
     dac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	temp_mask |= mask;
     dae:	f042 0204 	orr.w	r2, r2, #4
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
     db2:	4928      	ldr	r1, [pc, #160]	; (e54 <sysclk_enable_peripheral_clock+0x318>)
     db4:	6599      	str	r1, [r3, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
     db6:	641a      	str	r2, [r3, #64]	; 0x40
     db8:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_divmask(PBA_DIVMASK_CLK_USART);
		break;

	case ADCIFE_ADDR:
		sysclk_enable_pba_module(SYSCLK_ADCIFE);
     dba:	200c      	movs	r0, #12
     dbc:	4b24      	ldr	r3, [pc, #144]	; (e50 <sysclk_enable_peripheral_clock+0x314>)
     dbe:	4798      	blx	r3
		break;
     dc0:	bd08      	pop	{r3, pc}

	case DACC_ADDR:
		sysclk_enable_pba_module(SYSCLK_DACC);
     dc2:	200d      	movs	r0, #13
     dc4:	4b22      	ldr	r3, [pc, #136]	; (e50 <sysclk_enable_peripheral_clock+0x314>)
     dc6:	4798      	blx	r3
		break;
     dc8:	bd08      	pop	{r3, pc}

	case ACIFC_ADDR:
		sysclk_enable_pba_module(SYSCLK_ACIFC);
     dca:	200e      	movs	r0, #14
     dcc:	4b20      	ldr	r3, [pc, #128]	; (e50 <sysclk_enable_peripheral_clock+0x314>)
     dce:	4798      	blx	r3
		break;
     dd0:	bd08      	pop	{r3, pc}

	case GLOC_ADDR:
		sysclk_enable_pba_module(SYSCLK_GLOC);
     dd2:	200f      	movs	r0, #15
     dd4:	4b1e      	ldr	r3, [pc, #120]	; (e50 <sysclk_enable_peripheral_clock+0x314>)
     dd6:	4798      	blx	r3
		break;
     dd8:	bd08      	pop	{r3, pc}

	case ABDACB_ADDR:
		sysclk_enable_pba_module(SYSCLK_ABDACB);
     dda:	2010      	movs	r0, #16
     ddc:	4b1c      	ldr	r3, [pc, #112]	; (e50 <sysclk_enable_peripheral_clock+0x314>)
     dde:	4798      	blx	r3
		break;
     de0:	bd08      	pop	{r3, pc}

	case TRNG_ADDR:
		sysclk_enable_pba_module(SYSCLK_TRNG);
     de2:	2011      	movs	r0, #17
     de4:	4b1a      	ldr	r3, [pc, #104]	; (e50 <sysclk_enable_peripheral_clock+0x314>)
     de6:	4798      	blx	r3
		break;
     de8:	bd08      	pop	{r3, pc}

	case PARC_ADDR:
		sysclk_enable_pba_module(SYSCLK_PARC);
     dea:	2012      	movs	r0, #18
     dec:	4b18      	ldr	r3, [pc, #96]	; (e50 <sysclk_enable_peripheral_clock+0x314>)
     dee:	4798      	blx	r3
		break;
     df0:	bd08      	pop	{r3, pc}

	case CATB_ADDR:
		sysclk_enable_pba_module(SYSCLK_CATB);
     df2:	2013      	movs	r0, #19
     df4:	4b16      	ldr	r3, [pc, #88]	; (e50 <sysclk_enable_peripheral_clock+0x314>)
     df6:	4798      	blx	r3
		break;
     df8:	bd08      	pop	{r3, pc}

	case TWIM2_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIM2);
     dfa:	2015      	movs	r0, #21
     dfc:	4b14      	ldr	r3, [pc, #80]	; (e50 <sysclk_enable_peripheral_clock+0x314>)
     dfe:	4798      	blx	r3
		break;
     e00:	bd08      	pop	{r3, pc}

	case TWIM3_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIM3);
     e02:	2016      	movs	r0, #22
     e04:	4b12      	ldr	r3, [pc, #72]	; (e50 <sysclk_enable_peripheral_clock+0x314>)
     e06:	4798      	blx	r3
		break;
     e08:	bd08      	pop	{r3, pc}
     e0a:	bf00      	nop
     e0c:	40078000 	.word	0x40078000
     e10:	40010000 	.word	0x40010000
     e14:	4001c000 	.word	0x4001c000
     e18:	4001c400 	.word	0x4001c400
     e1c:	40040000 	.word	0x40040000
     e20:	40038000 	.word	0x40038000
     e24:	40068000 	.word	0x40068000
     e28:	4006c000 	.word	0x4006c000
     e2c:	400e0000 	.word	0x400e0000
     e30:	400a0000 	.word	0x400a0000
     e34:	400a5000 	.word	0x400a5000
     e38:	400a6000 	.word	0x400a6000
     e3c:	400f0000 	.word	0x400f0000
     e40:	400e0c00 	.word	0x400e0c00
     e44:	400f0c00 	.word	0x400f0c00
     e48:	400f1000 	.word	0x400f1000
     e4c:	00000899 	.word	0x00000899
     e50:	000008e9 	.word	0x000008e9
     e54:	aa000040 	.word	0xaa000040

	#if !SAM4LS
	case LCDCA_ADDR:
		sysclk_enable_pba_module(SYSCLK_LCDCA);
     e58:	2017      	movs	r0, #23
     e5a:	4b35      	ldr	r3, [pc, #212]	; (f30 <sysclk_enable_peripheral_clock+0x3f4>)
     e5c:	4798      	blx	r3
		break;
     e5e:	bd08      	pop	{r3, pc}
 * \brief Enable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_HSB, module_index);
     e60:	2001      	movs	r0, #1
     e62:	4601      	mov	r1, r0
     e64:	4b33      	ldr	r3, [pc, #204]	; (f34 <sysclk_enable_peripheral_clock+0x3f8>)
     e66:	4798      	blx	r3
	#endif

	case HFLASHC_ADDR:
		sysclk_enable_hsb_module(SYSCLK_HFLASHC_DATA);
		sysclk_enable_pbb_module(SYSCLK_HFLASHC_REGS);
     e68:	2000      	movs	r0, #0
     e6a:	4b33      	ldr	r3, [pc, #204]	; (f38 <sysclk_enable_peripheral_clock+0x3fc>)
     e6c:	4798      	blx	r3
		break;
     e6e:	bd08      	pop	{r3, pc}
     e70:	2001      	movs	r0, #1
     e72:	2102      	movs	r1, #2
     e74:	4b2f      	ldr	r3, [pc, #188]	; (f34 <sysclk_enable_peripheral_clock+0x3f8>)
     e76:	4798      	blx	r3

	case HCACHE_ADDR:
		sysclk_enable_hsb_module(SYSCLK_HRAMC1_DATA);
		sysclk_enable_pbb_module(SYSCLK_HRAMC1_REGS);
     e78:	2001      	movs	r0, #1
     e7a:	4b2f      	ldr	r3, [pc, #188]	; (f38 <sysclk_enable_peripheral_clock+0x3fc>)
     e7c:	4798      	blx	r3
		break;
     e7e:	bd08      	pop	{r3, pc}

	case HMATRIX_ADDR:
		sysclk_enable_pbb_module(SYSCLK_HMATRIX);
     e80:	2002      	movs	r0, #2
     e82:	4b2d      	ldr	r3, [pc, #180]	; (f38 <sysclk_enable_peripheral_clock+0x3fc>)
     e84:	4798      	blx	r3
		break;
     e86:	bd08      	pop	{r3, pc}
     e88:	2001      	movs	r0, #1
     e8a:	2100      	movs	r1, #0
     e8c:	4b29      	ldr	r3, [pc, #164]	; (f34 <sysclk_enable_peripheral_clock+0x3f8>)
     e8e:	4798      	blx	r3

	case PDCA_ADDR:
		sysclk_enable_hsb_module(SYSCLK_PDCA_HSB);
		sysclk_enable_pbb_module(SYSCLK_PDCA_PB);
     e90:	2003      	movs	r0, #3
     e92:	4b29      	ldr	r3, [pc, #164]	; (f38 <sysclk_enable_peripheral_clock+0x3fc>)
     e94:	4798      	blx	r3
		break;
     e96:	bd08      	pop	{r3, pc}
     e98:	2001      	movs	r0, #1
     e9a:	2104      	movs	r1, #4
     e9c:	4b25      	ldr	r3, [pc, #148]	; (f34 <sysclk_enable_peripheral_clock+0x3f8>)
     e9e:	4798      	blx	r3

	case CRCCU_ADDR:
		sysclk_enable_hsb_module(SYSCLK_CRCCU_DATA);
		sysclk_enable_pbb_module(SYSCLK_CRCCU_REGS);
     ea0:	2004      	movs	r0, #4
     ea2:	4b25      	ldr	r3, [pc, #148]	; (f38 <sysclk_enable_peripheral_clock+0x3fc>)
     ea4:	4798      	blx	r3
		break;
     ea6:	bd08      	pop	{r3, pc}
     ea8:	2001      	movs	r0, #1
     eaa:	2103      	movs	r1, #3
     eac:	4b21      	ldr	r3, [pc, #132]	; (f34 <sysclk_enable_peripheral_clock+0x3f8>)
     eae:	4798      	blx	r3

	case USBC_ADDR:
		sysclk_enable_hsb_module(SYSCLK_USBC_DATA);
		sysclk_enable_pbb_module(SYSCLK_USBC_REGS);
     eb0:	2005      	movs	r0, #5
     eb2:	4b21      	ldr	r3, [pc, #132]	; (f38 <sysclk_enable_peripheral_clock+0x3fc>)
     eb4:	4798      	blx	r3
		break;
     eb6:	bd08      	pop	{r3, pc}

	case PEVC_ADDR:
		sysclk_enable_pbb_module(SYSCLK_PEVC);
     eb8:	2006      	movs	r0, #6
     eba:	4b1f      	ldr	r3, [pc, #124]	; (f38 <sysclk_enable_peripheral_clock+0x3fc>)
     ebc:	4798      	blx	r3
		break;
     ebe:	bd08      	pop	{r3, pc}
 * \brief Enable a module clock derived from the PBC clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pbc_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_PBC, module_index);
     ec0:	2004      	movs	r0, #4
     ec2:	2100      	movs	r1, #0
     ec4:	4b1b      	ldr	r3, [pc, #108]	; (f34 <sysclk_enable_peripheral_clock+0x3f8>)
     ec6:	4798      	blx	r3
     ec8:	bd08      	pop	{r3, pc}
     eca:	2004      	movs	r0, #4
     ecc:	2101      	movs	r1, #1
     ece:	4b19      	ldr	r3, [pc, #100]	; (f34 <sysclk_enable_peripheral_clock+0x3f8>)
     ed0:	4798      	blx	r3
     ed2:	bd08      	pop	{r3, pc}
     ed4:	2004      	movs	r0, #4
     ed6:	2102      	movs	r1, #2
     ed8:	4b16      	ldr	r3, [pc, #88]	; (f34 <sysclk_enable_peripheral_clock+0x3f8>)
     eda:	4798      	blx	r3
     edc:	bd08      	pop	{r3, pc}
     ede:	2004      	movs	r0, #4
     ee0:	2103      	movs	r1, #3
     ee2:	4b14      	ldr	r3, [pc, #80]	; (f34 <sysclk_enable_peripheral_clock+0x3f8>)
     ee4:	4798      	blx	r3
     ee6:	bd08      	pop	{r3, pc}
     ee8:	2004      	movs	r0, #4
     eea:	4601      	mov	r1, r0
     eec:	4b11      	ldr	r3, [pc, #68]	; (f34 <sysclk_enable_peripheral_clock+0x3f8>)
     eee:	4798      	blx	r3
     ef0:	bd08      	pop	{r3, pc}
 * \brief Enable a module clock derived from the PBD clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pbd_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_PBD, module_index);
     ef2:	2005      	movs	r0, #5
     ef4:	2100      	movs	r1, #0
     ef6:	4b0f      	ldr	r3, [pc, #60]	; (f34 <sysclk_enable_peripheral_clock+0x3f8>)
     ef8:	4798      	blx	r3
     efa:	bd08      	pop	{r3, pc}
     efc:	2005      	movs	r0, #5
     efe:	2101      	movs	r1, #1
     f00:	4b0c      	ldr	r3, [pc, #48]	; (f34 <sysclk_enable_peripheral_clock+0x3f8>)
     f02:	4798      	blx	r3
     f04:	bd08      	pop	{r3, pc}
     f06:	2005      	movs	r0, #5
     f08:	2102      	movs	r1, #2
     f0a:	4b0a      	ldr	r3, [pc, #40]	; (f34 <sysclk_enable_peripheral_clock+0x3f8>)
     f0c:	4798      	blx	r3
     f0e:	bd08      	pop	{r3, pc}
     f10:	2005      	movs	r0, #5
     f12:	2103      	movs	r1, #3
     f14:	4b07      	ldr	r3, [pc, #28]	; (f34 <sysclk_enable_peripheral_clock+0x3f8>)
     f16:	4798      	blx	r3
     f18:	bd08      	pop	{r3, pc}
     f1a:	2005      	movs	r0, #5
     f1c:	2104      	movs	r1, #4
     f1e:	4b05      	ldr	r3, [pc, #20]	; (f34 <sysclk_enable_peripheral_clock+0x3f8>)
     f20:	4798      	blx	r3
     f22:	bd08      	pop	{r3, pc}
     f24:	2005      	movs	r0, #5
     f26:	4601      	mov	r1, r0
     f28:	4b02      	ldr	r3, [pc, #8]	; (f34 <sysclk_enable_peripheral_clock+0x3f8>)
     f2a:	4798      	blx	r3
     f2c:	bd08      	pop	{r3, pc}
     f2e:	bf00      	nop
     f30:	000008e9 	.word	0x000008e9
     f34:	00000899 	.word	0x00000899
     f38:	00000931 	.word	0x00000931

00000f3c <sysclk_set_source>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     f3c:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
     f40:	b672      	cpsid	i
     f42:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
     f46:	2100      	movs	r1, #0
     f48:	4b07      	ldr	r3, [pc, #28]	; (f68 <sysclk_set_source+0x2c>)
     f4a:	7019      	strb	r1, [r3, #0]
{
	irqflags_t flags;
	Assert(src <= SYSCLK_SRC_RC1M);

	flags = cpu_irq_save();
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
     f4c:	4b07      	ldr	r3, [pc, #28]	; (f6c <sysclk_set_source+0x30>)
     f4e:	f04f 412a 	mov.w	r1, #2852126720	; 0xaa000000
     f52:	6599      	str	r1, [r3, #88]	; 0x58
		| PM_UNLOCK_ADDR((uint32_t)&PM->PM_MCCTRL - (uint32_t)PM);
	PM->PM_MCCTRL = src;
     f54:	6018      	str	r0, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     f56:	b92a      	cbnz	r2, f64 <sysclk_set_source+0x28>
		cpu_irq_enable();
     f58:	2201      	movs	r2, #1
     f5a:	4b03      	ldr	r3, [pc, #12]	; (f68 <sysclk_set_source+0x2c>)
     f5c:	701a      	strb	r2, [r3, #0]
     f5e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
     f62:	b662      	cpsie	i
     f64:	4770      	bx	lr
     f66:	bf00      	nop
     f68:	20000038 	.word	0x20000038
     f6c:	400e0000 	.word	0x400e0000

00000f70 <sysclk_init>:
   genclk_disable(7);
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
     f70:	b538      	push	{r3, r4, r5, lr}
	uint32_t ps_value = 0;
	bool is_fwu_enabled = false;

#if CONFIG_HCACHE_ENABLE == 1
	/* Enable HCACHE */
	sysclk_enable_peripheral_clock(HCACHE);
     f72:	4c19      	ldr	r4, [pc, #100]	; (fd8 <sysclk_init+0x68>)
     f74:	4620      	mov	r0, r4
     f76:	4b19      	ldr	r3, [pc, #100]	; (fdc <sysclk_init+0x6c>)
     f78:	4798      	blx	r3
	HCACHE->HCACHE_CTRL = HCACHE_CTRL_CEN_YES;
     f7a:	2301      	movs	r3, #1
     f7c:	60a3      	str	r3, [r4, #8]
	while (!(HCACHE->HCACHE_SR & HCACHE_SR_CSTS_EN));
     f7e:	4622      	mov	r2, r4
     f80:	68d3      	ldr	r3, [r2, #12]
     f82:	f013 0f01 	tst.w	r3, #1
     f86:	d0fb      	beq.n	f80 <sysclk_init+0x10>
		sysclk_set_source(SYSCLK_SRC_OSC0);
	}
#endif
#ifdef CONFIG_DFLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_DFLL) {
		dfll_enable_config_defaults(0);
     f88:	2000      	movs	r0, #0
     f8a:	4b15      	ldr	r3, [pc, #84]	; (fe0 <sysclk_init+0x70>)
     f8c:	4798      	blx	r3
		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(sysclk_get_cpu_hz(), ps_value, is_fwu_enabled);
     f8e:	f04f 7037 	mov.w	r0, #47972352	; 0x2dc0000
     f92:	2100      	movs	r1, #0
     f94:	460a      	mov	r2, r1
     f96:	4b13      	ldr	r3, [pc, #76]	; (fe4 <sysclk_init+0x74>)
     f98:	4798      	blx	r3
		sysclk_set_source(SYSCLK_SRC_DFLL);
     f9a:	2003      	movs	r0, #3
     f9c:	4b12      	ldr	r3, [pc, #72]	; (fe8 <sysclk_init+0x78>)
     f9e:	4798      	blx	r3
	if (!no_halt) {
		bpm_power_scaling_cpu(bpm, ps_value);
		return true;
	}

	return bpm_power_scaling_cpu_failsafe(bpm, ps_value, 240000);
     fa0:	4812      	ldr	r0, [pc, #72]	; (fec <sysclk_init+0x7c>)
     fa2:	2100      	movs	r1, #0
     fa4:	4a12      	ldr	r2, [pc, #72]	; (ff0 <sysclk_init+0x80>)
     fa6:	4b13      	ldr	r3, [pc, #76]	; (ff4 <sysclk_init+0x84>)
     fa8:	4798      	blx	r3
		Assert(false);
	}

	/* Automatically switch to low power mode */
	bpm_configure_power_scaling(BPM, ps_value, BPM_PSCM_CPU_NOT_HALT);
	while ((bpm_get_status(BPM) & BPM_SR_PSOK) == 0);
     faa:	4d10      	ldr	r5, [pc, #64]	; (fec <sysclk_init+0x7c>)
     fac:	4c12      	ldr	r4, [pc, #72]	; (ff8 <sysclk_init+0x88>)
     fae:	4628      	mov	r0, r5
     fb0:	47a0      	blx	r4
     fb2:	f010 0f01 	tst.w	r0, #1
     fb6:	d0fa      	beq.n	fae <sysclk_init+0x3e>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     fb8:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
     fbc:	b672      	cpsid	i
     fbe:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
     fc2:	2100      	movs	r1, #0
     fc4:	4a0d      	ldr	r2, [pc, #52]	; (ffc <sysclk_init+0x8c>)
     fc6:	7011      	strb	r1, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     fc8:	b92b      	cbnz	r3, fd6 <sysclk_init+0x66>
		cpu_irq_enable();
     fca:	2201      	movs	r2, #1
     fcc:	4b0b      	ldr	r3, [pc, #44]	; (ffc <sysclk_init+0x8c>)
     fce:	701a      	strb	r2, [r3, #0]
     fd0:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
     fd4:	b662      	cpsie	i
     fd6:	bd38      	pop	{r3, r4, r5, pc}
     fd8:	400a0400 	.word	0x400a0400
     fdc:	00000b3d 	.word	0x00000b3d
     fe0:	000007bd 	.word	0x000007bd
     fe4:	000011d9 	.word	0x000011d9
     fe8:	00000f3d 	.word	0x00000f3d
     fec:	400f0000 	.word	0x400f0000
     ff0:	0003a980 	.word	0x0003a980
     ff4:	00001001 	.word	0x00001001
     ff8:	00001065 	.word	0x00001065
     ffc:	20000038 	.word	0x20000038

00001000 <bpm_power_scaling_cpu_failsafe>:
}


bool bpm_power_scaling_cpu_failsafe(Bpm *bpm, uint32_t ps_value,
	uint32_t timeout)
{
    1000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t pmcon = 0;

	/* Read last PM_CON value */
	pmcon = bpm->BPM_PMCON;
    1004:	69c3      	ldr	r3, [r0, #28]

	/* Clear last PS Value & Write new one */
	pmcon &= ~BPM_PMCON_PS_Msk;
    1006:	f023 0303 	bic.w	r3, r3, #3
	pmcon |= BPM_PMCON_PS(ps_value);
    100a:	f043 030c 	orr.w	r3, r3, #12
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    100e:	f3ef 8610 	mrs	r6, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1012:	b672      	cpsid	i
    1014:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    1018:	2500      	movs	r5, #0
    101a:	4c0f      	ldr	r4, [pc, #60]	; (1058 <__stack_size__+0x58>)
    101c:	7025      	strb	r5, [r4, #0]
	uint32_t ctrl, load, val;
	/* Avoid interrupt while flash halt */
	flags = cpu_irq_save();

	/* Save SysTick */
	val = SysTick->VAL;
    101e:	4c0f      	ldr	r4, [pc, #60]	; (105c <__stack_size__+0x5c>)
    1020:	f8d4 8008 	ldr.w	r8, [r4, #8]
	ctrl = SysTick->CTRL;
    1024:	6827      	ldr	r7, [r4, #0]
	load = SysTick->LOAD;
    1026:	f8d4 9004 	ldr.w	r9, [r4, #4]
	/* Setup SysTick & start counting */
	SysTick->LOAD = timeout;
    102a:	6062      	str	r2, [r4, #4]
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    102c:	2205      	movs	r2, #5
    102e:	6022      	str	r2, [r4, #0]
	/* Read last PM_CON value */
	pmcon = bpm->BPM_PMCON;

	/* Clear last PS Value & Write new one */
	pmcon &= ~BPM_PMCON_PS_Msk;
	pmcon |= BPM_PMCON_PS(ps_value);
    1030:	f001 0103 	and.w	r1, r1, #3
	load = SysTick->LOAD;
	/* Setup SysTick & start counting */
	SysTick->LOAD = timeout;
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;

	b_psok = bpm_ps_no_halt_exec(bpm, pmcon);
    1034:	4319      	orrs	r1, r3
    1036:	4b0a      	ldr	r3, [pc, #40]	; (1060 <__stack_size__+0x60>)
    1038:	4798      	blx	r3

	/* Restore SysTick */
	SysTick->CTRL = 0;
    103a:	6025      	str	r5, [r4, #0]
	SysTick->LOAD = load;
    103c:	f8c4 9004 	str.w	r9, [r4, #4]
	SysTick->VAL = val;
    1040:	f8c4 8008 	str.w	r8, [r4, #8]
	SysTick->CTRL = ctrl;
    1044:	6027      	str	r7, [r4, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1046:	b92e      	cbnz	r6, 1054 <bpm_power_scaling_cpu_failsafe+0x54>
		cpu_irq_enable();
    1048:	2201      	movs	r2, #1
    104a:	4b03      	ldr	r3, [pc, #12]	; (1058 <__stack_size__+0x58>)
    104c:	701a      	strb	r2, [r3, #0]
    104e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1052:	b662      	cpsie	i

	cpu_irq_restore(flags);
	return b_psok;
}
    1054:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1058:	20000038 	.word	0x20000038
    105c:	e000e010 	.word	0xe000e010
    1060:	2000000d 	.word	0x2000000d

00001064 <bpm_get_status>:
	bpm->BPM_ICR = sources;
}

uint32_t bpm_get_status(Bpm *bpm)
{
	return bpm->BPM_SR;
    1064:	6940      	ldr	r0, [r0, #20]
}
    1066:	4770      	bx	lr

00001068 <eic_line_interrupt>:
 * eic_line_set_callback() function.
 *
 * \param [in]  line_number EIC line number to handle interrupt for
 */
static void eic_line_interrupt(uint8_t line_number)
{
    1068:	b508      	push	{r3, lr}
	if (eic_callback_pointer[line_number]) {
    106a:	4b03      	ldr	r3, [pc, #12]	; (1078 <eic_line_interrupt+0x10>)
    106c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    1070:	b103      	cbz	r3, 1074 <eic_line_interrupt+0xc>
		eic_callback_pointer[line_number]();
    1072:	4798      	blx	r3
    1074:	bd08      	pop	{r3, pc}
    1076:	bf00      	nop
    1078:	20000a1c 	.word	0x20000a1c

0000107c <eic_enable>:
 * \brief Enable the EIC module
 *
 * \param [in]  eic Base address of the EIC module
 */
void eic_enable(Eic *eic)
{
    107c:	b508      	push	{r3, lr}
	sysclk_enable_peripheral_clock(eic);
    107e:	4b0b      	ldr	r3, [pc, #44]	; (10ac <eic_enable+0x30>)
    1080:	4798      	blx	r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1082:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1086:	b672      	cpsid	i
    1088:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    108c:	2100      	movs	r1, #0
    108e:	4b08      	ldr	r3, [pc, #32]	; (10b0 <eic_enable+0x34>)
    1090:	7019      	strb	r1, [r3, #0]
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    1092:	4b08      	ldr	r3, [pc, #32]	; (10b4 <eic_enable+0x38>)
    1094:	79d9      	ldrb	r1, [r3, #7]
    1096:	3101      	adds	r1, #1
    1098:	71d9      	strb	r1, [r3, #7]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    109a:	b92a      	cbnz	r2, 10a8 <eic_enable+0x2c>
		cpu_irq_enable();
    109c:	2201      	movs	r2, #1
    109e:	4b04      	ldr	r3, [pc, #16]	; (10b0 <eic_enable+0x34>)
    10a0:	701a      	strb	r2, [r3, #0]
    10a2:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    10a6:	b662      	cpsie	i
    10a8:	bd08      	pop	{r3, pc}
    10aa:	bf00      	nop
    10ac:	00000b3d 	.word	0x00000b3d
    10b0:	20000038 	.word	0x20000038
    10b4:	20000a14 	.word	0x20000a14

000010b8 <NMI_Handler>:

/**
 * \brief Interrupt handler for EIC NMI.
 */
void NMI_Handler(void)
{
    10b8:	b508      	push	{r3, lr}
	eic_line_interrupt(0);
    10ba:	2000      	movs	r0, #0
    10bc:	4b01      	ldr	r3, [pc, #4]	; (10c4 <NMI_Handler+0xc>)
    10be:	4798      	blx	r3
    10c0:	bd08      	pop	{r3, pc}
    10c2:	bf00      	nop
    10c4:	00001069 	.word	0x00001069

000010c8 <EIC_1_Handler>:

/**
 * \brief Interrupt handler for EIC line 1.
 */
void EIC_1_Handler(void)
{
    10c8:	b508      	push	{r3, lr}
	eic_line_interrupt(1);
    10ca:	2001      	movs	r0, #1
    10cc:	4b01      	ldr	r3, [pc, #4]	; (10d4 <EIC_1_Handler+0xc>)
    10ce:	4798      	blx	r3
    10d0:	bd08      	pop	{r3, pc}
    10d2:	bf00      	nop
    10d4:	00001069 	.word	0x00001069

000010d8 <EIC_2_Handler>:

/**
 * \brief Interrupt handler for EIC line 2.
 */
void EIC_2_Handler(void)
{
    10d8:	b508      	push	{r3, lr}
	eic_line_interrupt(2);
    10da:	2002      	movs	r0, #2
    10dc:	4b01      	ldr	r3, [pc, #4]	; (10e4 <EIC_2_Handler+0xc>)
    10de:	4798      	blx	r3
    10e0:	bd08      	pop	{r3, pc}
    10e2:	bf00      	nop
    10e4:	00001069 	.word	0x00001069

000010e8 <EIC_3_Handler>:

/**
 * \brief Interrupt handler for EIC line 3.
 */
void EIC_3_Handler(void)
{
    10e8:	b508      	push	{r3, lr}
	eic_line_interrupt(3);
    10ea:	2003      	movs	r0, #3
    10ec:	4b01      	ldr	r3, [pc, #4]	; (10f4 <EIC_3_Handler+0xc>)
    10ee:	4798      	blx	r3
    10f0:	bd08      	pop	{r3, pc}
    10f2:	bf00      	nop
    10f4:	00001069 	.word	0x00001069

000010f8 <EIC_4_Handler>:

/**
 * \brief Interrupt handler for EIC line 4.
 */
void EIC_4_Handler(void)
{
    10f8:	b508      	push	{r3, lr}
	eic_line_interrupt(4);
    10fa:	2004      	movs	r0, #4
    10fc:	4b01      	ldr	r3, [pc, #4]	; (1104 <EIC_4_Handler+0xc>)
    10fe:	4798      	blx	r3
    1100:	bd08      	pop	{r3, pc}
    1102:	bf00      	nop
    1104:	00001069 	.word	0x00001069

00001108 <EIC_5_Handler>:

/**
 * \brief Interrupt handler for EIC line 5.
 */
void EIC_5_Handler(void)
{
    1108:	b508      	push	{r3, lr}
	eic_line_interrupt(5);
    110a:	2005      	movs	r0, #5
    110c:	4b01      	ldr	r3, [pc, #4]	; (1114 <EIC_5_Handler+0xc>)
    110e:	4798      	blx	r3
    1110:	bd08      	pop	{r3, pc}
    1112:	bf00      	nop
    1114:	00001069 	.word	0x00001069

00001118 <EIC_6_Handler>:

/**
 * \brief Interrupt handler for EIC line 6.
 */
void EIC_6_Handler(void)
{
    1118:	b508      	push	{r3, lr}
	eic_line_interrupt(6);
    111a:	2006      	movs	r0, #6
    111c:	4b01      	ldr	r3, [pc, #4]	; (1124 <EIC_6_Handler+0xc>)
    111e:	4798      	blx	r3
    1120:	bd08      	pop	{r3, pc}
    1122:	bf00      	nop
    1124:	00001069 	.word	0x00001069

00001128 <EIC_7_Handler>:

/**
 * \brief Interrupt handler for EIC line 7.
 */
void EIC_7_Handler(void)
{
    1128:	b508      	push	{r3, lr}
	eic_line_interrupt(7);
    112a:	2007      	movs	r0, #7
    112c:	4b01      	ldr	r3, [pc, #4]	; (1134 <EIC_7_Handler+0xc>)
    112e:	4798      	blx	r3
    1130:	bd08      	pop	{r3, pc}
    1132:	bf00      	nop
    1134:	00001069 	.word	0x00001069

00001138 <EIC_8_Handler>:

/**
 * \brief Interrupt handler for EIC line 8.
 */
void EIC_8_Handler(void)
{
    1138:	b508      	push	{r3, lr}
	eic_line_interrupt(8);
    113a:	2008      	movs	r0, #8
    113c:	4b01      	ldr	r3, [pc, #4]	; (1144 <EIC_8_Handler+0xc>)
    113e:	4798      	blx	r3
    1140:	bd08      	pop	{r3, pc}
    1142:	bf00      	nop
    1144:	00001069 	.word	0x00001069

00001148 <flashcalw_set_wait_state>:
 * \param wait_state The number of wait states of flash read accesses: \c 0 to
 *                   \c 1.
 */
void flashcalw_set_wait_state(uint32_t wait_state)
{
	HFLASHC->FLASHCALW_FCR = (HFLASHC->FLASHCALW_FCR & ~FLASHCALW_FCR_FWS)
    1148:	4b05      	ldr	r3, [pc, #20]	; (1160 <flashcalw_set_wait_state+0x18>)
    114a:	681b      	ldr	r3, [r3, #0]
    114c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
			| (wait_state ? FLASHCALW_FCR_FWS_1 :
    1150:	2800      	cmp	r0, #0
    1152:	bf0c      	ite	eq
    1154:	2200      	moveq	r2, #0
    1156:	2240      	movne	r2, #64	; 0x40
    1158:	4313      	orrs	r3, r2
 * \param wait_state The number of wait states of flash read accesses: \c 0 to
 *                   \c 1.
 */
void flashcalw_set_wait_state(uint32_t wait_state)
{
	HFLASHC->FLASHCALW_FCR = (HFLASHC->FLASHCALW_FCR & ~FLASHCALW_FCR_FWS)
    115a:	4a01      	ldr	r2, [pc, #4]	; (1160 <flashcalw_set_wait_state+0x18>)
    115c:	6013      	str	r3, [r2, #0]
    115e:	4770      	bx	lr
    1160:	400a0000 	.word	0x400a0000

00001164 <flashcalw_is_ready>:
 *
 * \return Whether the FLASHCALW is ready to run a new command.
 */
bool flashcalw_is_ready(void)
{
	return ((HFLASHC->FLASHCALW_FSR & FLASHCALW_FSR_FRDY) != 0);
    1164:	4b02      	ldr	r3, [pc, #8]	; (1170 <flashcalw_is_ready+0xc>)
    1166:	6898      	ldr	r0, [r3, #8]
}
    1168:	f000 0001 	and.w	r0, r0, #1
    116c:	4770      	bx	lr
    116e:	bf00      	nop
    1170:	400a0000 	.word	0x400a0000

00001174 <flashcalw_default_wait_until_ready>:
/*! \brief Waits actively until the FLASHCALW is ready to run a new command.
 *
 * This is the default function assigned to \ref flashcalw_wait_until_ready.
 */
void flashcalw_default_wait_until_ready(void)
{
    1174:	b510      	push	{r4, lr}
	while (!flashcalw_is_ready()) {
    1176:	4c02      	ldr	r4, [pc, #8]	; (1180 <flashcalw_default_wait_until_ready+0xc>)
    1178:	47a0      	blx	r4
    117a:	2800      	cmp	r0, #0
    117c:	d0fc      	beq.n	1178 <flashcalw_default_wait_until_ready+0x4>
	}
}
    117e:	bd10      	pop	{r4, pc}
    1180:	00001165 	.word	0x00001165

00001184 <flashcalw_issue_command>:
 *
 * \note The FLASHCALW error status returned by \ref flashcalw_is_lock_error and
 *       \ref flashcalw_is_programming_error is updated.
 */
void flashcalw_issue_command(uint32_t command, int page_number)
{
    1184:	b538      	push	{r3, r4, r5, lr}
    1186:	4605      	mov	r5, r0
    1188:	460c      	mov	r4, r1
	uint32_t tempo;

	flashcalw_wait_until_ready();
    118a:	4b10      	ldr	r3, [pc, #64]	; (11cc <flashcalw_issue_command+0x48>)
    118c:	681b      	ldr	r3, [r3, #0]
    118e:	4798      	blx	r3
	tempo = HFLASHC->FLASHCALW_FCMD;
    1190:	4b0f      	ldr	r3, [pc, #60]	; (11d0 <flashcalw_issue_command+0x4c>)
    1192:	685b      	ldr	r3, [r3, #4]
	/* Clear the command bitfield. */
	tempo &= ~FLASHCALW_FCMD_CMD_Msk;
	if (page_number >= 0) {
    1194:	2c00      	cmp	r4, #0
    1196:	db08      	blt.n	11aa <flashcalw_issue_command+0x26>
		tempo = (FLASHCALW_FCMD_KEY_KEY
				| FLASHCALW_FCMD_PAGEN(page_number) | command);
    1198:	f045 4525 	orr.w	r5, r5, #2768240640	; 0xa5000000
    119c:	0224      	lsls	r4, r4, #8
    119e:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    11a2:	f024 04ff 	bic.w	r4, r4, #255	; 0xff
	flashcalw_wait_until_ready();
	tempo = HFLASHC->FLASHCALW_FCMD;
	/* Clear the command bitfield. */
	tempo &= ~FLASHCALW_FCMD_CMD_Msk;
	if (page_number >= 0) {
		tempo = (FLASHCALW_FCMD_KEY_KEY
    11a6:	432c      	orrs	r4, r5
    11a8:	e004      	b.n	11b4 <flashcalw_issue_command+0x30>
	uint32_t tempo;

	flashcalw_wait_until_ready();
	tempo = HFLASHC->FLASHCALW_FCMD;
	/* Clear the command bitfield. */
	tempo &= ~FLASHCALW_FCMD_CMD_Msk;
    11aa:	f023 043f 	bic.w	r4, r3, #63	; 0x3f
	if (page_number >= 0) {
		tempo = (FLASHCALW_FCMD_KEY_KEY
				| FLASHCALW_FCMD_PAGEN(page_number) | command);
	} else {
		tempo |= (FLASHCALW_FCMD_KEY_KEY | command);
    11ae:	f044 4425 	orr.w	r4, r4, #2768240640	; 0xa5000000
    11b2:	432c      	orrs	r4, r5
	}

	HFLASHC->FLASHCALW_FCMD = tempo;
    11b4:	4b06      	ldr	r3, [pc, #24]	; (11d0 <flashcalw_issue_command+0x4c>)
    11b6:	605c      	str	r4, [r3, #4]
 *          the driver's API which instead presents \ref flashcalw_is_lock_error
 *          and \ref flashcalw_is_programming_error.
 */
static uint32_t flashcalw_get_error_status(void)
{
	return HFLASHC->FLASHCALW_FSR &
    11b8:	689a      	ldr	r2, [r3, #8]
    11ba:	f002 020c 	and.w	r2, r2, #12
	} else {
		tempo |= (FLASHCALW_FCMD_KEY_KEY | command);
	}

	HFLASHC->FLASHCALW_FCMD = tempo;
	flashcalw_error_status = flashcalw_get_error_status();
    11be:	4b05      	ldr	r3, [pc, #20]	; (11d4 <flashcalw_issue_command+0x50>)
    11c0:	601a      	str	r2, [r3, #0]
	flashcalw_wait_until_ready();
    11c2:	4b02      	ldr	r3, [pc, #8]	; (11cc <flashcalw_issue_command+0x48>)
    11c4:	681b      	ldr	r3, [r3, #0]
    11c6:	4798      	blx	r3
    11c8:	bd38      	pop	{r3, r4, r5, pc}
    11ca:	bf00      	nop
    11cc:	2000003c 	.word	0x2000003c
    11d0:	400a0000 	.word	0x400a0000
    11d4:	200008a0 	.word	0x200008a0

000011d8 <flashcalw_set_flash_waitstate_and_readmode>:
 * \param ps_value Power Scaling mode value (0, 1)
 * \param is_fwu_enabled (boolean), Is fast wakeup mode enabled or not
 */
void flashcalw_set_flash_waitstate_and_readmode(uint32_t cpu_f_hz,
		uint32_t ps_value, bool is_fwu_enabled)
{
    11d8:	b508      	push	{r3, lr}
	}

	/* Enable the high-speed read mode. */
	flashcalw_issue_command(FLASHCALW_FCMD_CMD_HSEN, -1);
#else
	if (ps_value == 0) {
    11da:	2900      	cmp	r1, #0
    11dc:	d12d      	bne.n	123a <flashcalw_set_flash_waitstate_and_readmode+0x62>
		if (cpu_f_hz > FLASH_FREQ_PS0_FWS_0_MAX_FREQ) {
    11de:	4b1d      	ldr	r3, [pc, #116]	; (1254 <flashcalw_set_flash_waitstate_and_readmode+0x7c>)
    11e0:	4298      	cmp	r0, r3
    11e2:	d914      	bls.n	120e <flashcalw_set_flash_waitstate_and_readmode+0x36>
			// > 18MHz
			if (cpu_f_hz <= FLASH_FREQ_PS0_FWS_1_MAX_FREQ) {
    11e4:	4b1c      	ldr	r3, [pc, #112]	; (1258 <flashcalw_set_flash_waitstate_and_readmode+0x80>)
    11e6:	4298      	cmp	r0, r3
    11e8:	d808      	bhi.n	11fc <flashcalw_set_flash_waitstate_and_readmode+0x24>
				// <= 36MHz
				/* Set a wait-state, disable the high-speed read
				 * mode. */
				flashcalw_set_wait_state(1);
    11ea:	2001      	movs	r0, #1
    11ec:	4b1b      	ldr	r3, [pc, #108]	; (125c <flashcalw_set_flash_waitstate_and_readmode+0x84>)
    11ee:	4798      	blx	r3
				flashcalw_issue_command(
    11f0:	2011      	movs	r0, #17
    11f2:	f04f 31ff 	mov.w	r1, #4294967295
    11f6:	4b1a      	ldr	r3, [pc, #104]	; (1260 <flashcalw_set_flash_waitstate_and_readmode+0x88>)
    11f8:	4798      	blx	r3
    11fa:	bd08      	pop	{r3, pc}
						FLASHCALW_FCMD_CMD_HSDIS, -1);
			} else {
				// > 36 MHz
				/* Set a wait-state, enable the high-speed read
				mode. */
				flashcalw_set_wait_state(1);
    11fc:	2001      	movs	r0, #1
    11fe:	4b17      	ldr	r3, [pc, #92]	; (125c <flashcalw_set_flash_waitstate_and_readmode+0x84>)
    1200:	4798      	blx	r3
				flashcalw_issue_command(FLASHCALW_FCMD_CMD_HSEN,
    1202:	2010      	movs	r0, #16
    1204:	f04f 31ff 	mov.w	r1, #4294967295
    1208:	4b15      	ldr	r3, [pc, #84]	; (1260 <flashcalw_set_flash_waitstate_and_readmode+0x88>)
    120a:	4798      	blx	r3
    120c:	bd08      	pop	{r3, pc}
						-1);
			}
		} else { // <= 18MHz
			if((is_fwu_enabled == true) &&
    120e:	b15a      	cbz	r2, 1228 <flashcalw_set_flash_waitstate_and_readmode+0x50>
    1210:	4b14      	ldr	r3, [pc, #80]	; (1264 <flashcalw_set_flash_waitstate_and_readmode+0x8c>)
    1212:	4298      	cmp	r0, r3
    1214:	d808      	bhi.n	1228 <flashcalw_set_flash_waitstate_and_readmode+0x50>
				(cpu_f_hz <= FLASH_FREQ_PS1_FWS_1_FWU_MAX_FREQ))
			{
				// <= 12MHz
				/* Set a wait-state, disable the high-speed read
				mode. */
				flashcalw_set_wait_state(1);
    1216:	2001      	movs	r0, #1
    1218:	4b10      	ldr	r3, [pc, #64]	; (125c <flashcalw_set_flash_waitstate_and_readmode+0x84>)
    121a:	4798      	blx	r3
				flashcalw_issue_command(
    121c:	2011      	movs	r0, #17
    121e:	f04f 31ff 	mov.w	r1, #4294967295
    1222:	4b0f      	ldr	r3, [pc, #60]	; (1260 <flashcalw_set_flash_waitstate_and_readmode+0x88>)
    1224:	4798      	blx	r3
    1226:	bd08      	pop	{r3, pc}
						FLASHCALW_FCMD_CMD_HSDIS, -1);
			} else {
				/* No wait-state, disable the high-speed read
				mode */
				flashcalw_set_wait_state(0);
    1228:	2000      	movs	r0, #0
    122a:	4b0c      	ldr	r3, [pc, #48]	; (125c <flashcalw_set_flash_waitstate_and_readmode+0x84>)
    122c:	4798      	blx	r3
				flashcalw_issue_command(
    122e:	2011      	movs	r0, #17
    1230:	f04f 31ff 	mov.w	r1, #4294967295
    1234:	4b0a      	ldr	r3, [pc, #40]	; (1260 <flashcalw_set_flash_waitstate_and_readmode+0x88>)
    1236:	4798      	blx	r3
    1238:	bd08      	pop	{r3, pc}
					FLASHCALW_FCMD_CMD_HSDIS, -1);
			}
		}
	} else { /* ps_value == 1 */
		if (cpu_f_hz > FLASH_FREQ_PS1_FWS_0_MAX_FREQ) { /* > 8MHz */
    123a:	4b0b      	ldr	r3, [pc, #44]	; (1268 <flashcalw_set_flash_waitstate_and_readmode+0x90>)
    123c:	4298      	cmp	r0, r3
			/* Set a wait-state. */
			flashcalw_set_wait_state(1);
    123e:	bf8c      	ite	hi
    1240:	2001      	movhi	r0, #1
		} else {
			/* No wait-state. */
			flashcalw_set_wait_state(0);
    1242:	2000      	movls	r0, #0
    1244:	4b05      	ldr	r3, [pc, #20]	; (125c <flashcalw_set_flash_waitstate_and_readmode+0x84>)
    1246:	4798      	blx	r3
		}

		/* Disable the high-speed read mode. */
		flashcalw_issue_command(FLASHCALW_FCMD_CMD_HSDIS, -1);
    1248:	2011      	movs	r0, #17
    124a:	f04f 31ff 	mov.w	r1, #4294967295
    124e:	4b04      	ldr	r3, [pc, #16]	; (1260 <flashcalw_set_flash_waitstate_and_readmode+0x88>)
    1250:	4798      	blx	r3
    1252:	bd08      	pop	{r3, pc}
    1254:	0112a880 	.word	0x0112a880
    1258:	02255100 	.word	0x02255100
    125c:	00001149 	.word	0x00001149
    1260:	00001185 	.word	0x00001185
    1264:	00b71b00 	.word	0x00b71b00
    1268:	007a1200 	.word	0x007a1200

0000126c <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
    126c:	b508      	push	{r3, lr}
	else if (p_spi == SPI7) {
		sysclk_enable_peripheral_clock(ID_FLEXCOM7);
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
    126e:	4b01      	ldr	r3, [pc, #4]	; (1274 <spi_enable_clock+0x8>)
    1270:	4798      	blx	r3
    1272:	bd08      	pop	{r3, pc}
    1274:	00000b3d 	.word	0x00000b3d

00001278 <spi_read>:
 *
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
    1278:	b410      	push	{r4}
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
    127a:	f643 2399 	movw	r3, #15001	; 0x3a99
    127e:	e001      	b.n	1284 <spi_read+0xc>
		if (!timeout--) {
    1280:	3b01      	subs	r3, #1
    1282:	d012      	beq.n	12aa <spi_read+0x32>
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
    1284:	6904      	ldr	r4, [r0, #16]
    1286:	f014 0f01 	tst.w	r4, #1
    128a:	d0f9      	beq.n	1280 <spi_read+0x8>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	reg_value = p_spi->SPI_RDR;
    128c:	6883      	ldr	r3, [r0, #8]
    128e:	4c09      	ldr	r4, [pc, #36]	; (12b4 <spi_read+0x3c>)
    1290:	6023      	str	r3, [r4, #0]
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
    1292:	6840      	ldr	r0, [r0, #4]
	if (spi_get_peripheral_select_mode(p_spi)) {
    1294:	f010 0f02 	tst.w	r0, #2
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
    1298:	bf1c      	itt	ne
    129a:	f3c3 4303 	ubfxne	r3, r3, #16, #4
    129e:	7013      	strbne	r3, [r2, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
    12a0:	4b04      	ldr	r3, [pc, #16]	; (12b4 <spi_read+0x3c>)
    12a2:	681b      	ldr	r3, [r3, #0]
    12a4:	800b      	strh	r3, [r1, #0]

	return SPI_OK;
    12a6:	2000      	movs	r0, #0
    12a8:	e000      	b.n	12ac <spi_read+0x34>
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
    12aa:	2001      	movs	r0, #1
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);

	return SPI_OK;
}
    12ac:	f85d 4b04 	ldr.w	r4, [sp], #4
    12b0:	4770      	bx	lr
    12b2:	bf00      	nop
    12b4:	200008a4 	.word	0x200008a4

000012b8 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
    12b8:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
    12ba:	f643 2499 	movw	r4, #15001	; 0x3a99
    12be:	e001      	b.n	12c4 <spi_write+0xc>
		if (!timeout--) {
    12c0:	3c01      	subs	r4, #1
    12c2:	d011      	beq.n	12e8 <spi_write+0x30>
		uint8_t uc_pcs, uint8_t uc_last)
{
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
    12c4:	6905      	ldr	r5, [r0, #16]
    12c6:	f015 0f02 	tst.w	r5, #2
    12ca:	d0f9      	beq.n	12c0 <spi_write+0x8>
    12cc:	6844      	ldr	r4, [r0, #4]
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
    12ce:	f014 0f02 	tst.w	r4, #2
    12d2:	d006      	beq.n	12e2 <spi_write+0x2a>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
    12d4:	0412      	lsls	r2, r2, #16
    12d6:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
    12da:	4311      	orrs	r1, r2
		if (uc_last) {
    12dc:	b10b      	cbz	r3, 12e2 <spi_write+0x2a>
			value |= SPI_TDR_LASTXFER;
    12de:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
    12e2:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
    12e4:	2000      	movs	r0, #0
    12e6:	e000      	b.n	12ea <spi_write+0x32>
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
    12e8:	2001      	movs	r0, #1
	}

	p_spi->SPI_TDR = value;

	return SPI_OK;
}
    12ea:	bc30      	pop	{r4, r5}
    12ec:	4770      	bx	lr
    12ee:	bf00      	nop

000012f0 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
    12f0:	b132      	cbz	r2, 1300 <spi_set_clock_polarity+0x10>
    12f2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
    12f6:	6b03      	ldr	r3, [r0, #48]	; 0x30
    12f8:	f043 0301 	orr.w	r3, r3, #1
    12fc:	6303      	str	r3, [r0, #48]	; 0x30
    12fe:	4770      	bx	lr
    1300:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
    1304:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1306:	f023 0301 	bic.w	r3, r3, #1
    130a:	6303      	str	r3, [r0, #48]	; 0x30
    130c:	4770      	bx	lr
    130e:	bf00      	nop

00001310 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
    1310:	b132      	cbz	r2, 1320 <spi_set_clock_phase+0x10>
    1312:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
    1316:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1318:	f043 0302 	orr.w	r3, r3, #2
    131c:	6303      	str	r3, [r0, #48]	; 0x30
    131e:	4770      	bx	lr
    1320:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
    1324:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1326:	f023 0302 	bic.w	r3, r3, #2
    132a:	6303      	str	r3, [r0, #48]	; 0x30
    132c:	4770      	bx	lr
    132e:	bf00      	nop

00001330 <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
    1330:	2a04      	cmp	r2, #4
    1332:	d10a      	bne.n	134a <spi_configure_cs_behavior+0x1a>
    1334:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
    1338:	6b03      	ldr	r3, [r0, #48]	; 0x30
    133a:	f023 0308 	bic.w	r3, r3, #8
    133e:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
    1340:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1342:	f043 0304 	orr.w	r3, r3, #4
    1346:	6303      	str	r3, [r0, #48]	; 0x30
    1348:	4770      	bx	lr
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
    134a:	b952      	cbnz	r2, 1362 <spi_configure_cs_behavior+0x32>
    134c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
    1350:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1352:	f023 0308 	bic.w	r3, r3, #8
    1356:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
    1358:	6b03      	ldr	r3, [r0, #48]	; 0x30
    135a:	f023 0304 	bic.w	r3, r3, #4
    135e:	6303      	str	r3, [r0, #48]	; 0x30
    1360:	4770      	bx	lr
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
    1362:	2a08      	cmp	r2, #8
    1364:	d105      	bne.n	1372 <spi_configure_cs_behavior+0x42>
    1366:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
    136a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    136c:	f043 0308 	orr.w	r3, r3, #8
    1370:	6303      	str	r3, [r0, #48]	; 0x30
    1372:	4770      	bx	lr

00001374 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
    1374:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
    1378:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    137a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    137e:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
    1380:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    1382:	431a      	orrs	r2, r3
    1384:	630a      	str	r2, [r1, #48]	; 0x30
    1386:	4770      	bx	lr

00001388 <spi_set_baudrate_div>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param uc_baudrate_divider Baudrate divider from MCK.
 */
void spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    1388:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
    138c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    138e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
    1392:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
    1394:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    1396:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
    139a:	630a      	str	r2, [r1, #48]	; 0x30
    139c:	4770      	bx	lr
    139e:	bf00      	nop

000013a0 <find_twim_channel_num>:
 * \return      TWIM channel number
 */
static uint32_t find_twim_channel_num(Twim *twim)
{
#if defined(ID_TWIM3)
	if (twim == TWIM3) {
    13a0:	4b08      	ldr	r3, [pc, #32]	; (13c4 <find_twim_channel_num+0x24>)
    13a2:	4298      	cmp	r0, r3
    13a4:	d00a      	beq.n	13bc <find_twim_channel_num+0x1c>
		return 3;
	}
#endif
#if defined(ID_TWIM2)
	if (twim == TWIM2) {
    13a6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    13aa:	4298      	cmp	r0, r3
    13ac:	d008      	beq.n	13c0 <find_twim_channel_num+0x20>
		return 2;
	}
#endif
#if defined(ID_TWIM1)
	if (twim == TWIM1) {
    13ae:	f5a3 23b8 	sub.w	r3, r3, #376832	; 0x5c000
    13b2:	4298      	cmp	r0, r3
    13b4:	bf14      	ite	ne
    13b6:	2000      	movne	r0, #0
    13b8:	2001      	moveq	r0, #1
    13ba:	4770      	bx	lr
 */
static uint32_t find_twim_channel_num(Twim *twim)
{
#if defined(ID_TWIM3)
	if (twim == TWIM3) {
		return 3;
    13bc:	2003      	movs	r0, #3
    13be:	4770      	bx	lr
	}
#endif
#if defined(ID_TWIM2)
	if (twim == TWIM2) {
		return 2;
    13c0:	2002      	movs	r0, #2
		return 0;
	}
#endif

	return 0;
}
    13c2:	4770      	bx	lr
    13c4:	4007c000 	.word	0x4007c000

000013c8 <twim_default_callback>:

/**
 * \brief TWIM default callback function
 */
void twim_default_callback(Twim *twim)
{
    13c8:	b510      	push	{r4, lr}
    13ca:	b082      	sub	sp, #8
    13cc:	4604      	mov	r4, r0
#define NCMDR_FREE_WAIT    2000
	volatile uint32_t ncmdr_wait = NCMDR_FREE_WAIT;
    13ce:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
    13d2:	9301      	str	r3, [sp, #4]

	/* Get masked status register value */
	uint32_t twim_ch = find_twim_channel_num(twim);
    13d4:	4bb1      	ldr	r3, [pc, #708]	; (169c <twim_default_callback+0x2d4>)
    13d6:	4798      	blx	r3
	uint32_t status = twim->TWIM_SR;
    13d8:	69e3      	ldr	r3, [r4, #28]
	status &= twim_it_mask[twim_ch];
    13da:	4ab1      	ldr	r2, [pc, #708]	; (16a0 <twim_default_callback+0x2d8>)
    13dc:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
    13e0:	4013      	ands	r3, r2
	uint32_t cmdr_reg;

	/* This is a NACK */
	if (status & TWIM_SR_STD_MASK) {
    13e2:	f413 6fa0 	tst.w	r3, #1280	; 0x500
    13e6:	d017      	beq.n	1418 <twim_default_callback+0x50>
		/*
		 * If we get a NACK, clear the valid bit in CMDR,
		 * otherwise the command will be re-sent.
		 */
		transfer_status[twim_ch] = (status & TWIM_IER_ANAK) ?
    13e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
    13ec:	2b00      	cmp	r3, #0
    13ee:	bf0c      	ite	eq
    13f0:	22fe      	moveq	r2, #254	; 0xfe
    13f2:	22fc      	movne	r2, #252	; 0xfc
    13f4:	4bab      	ldr	r3, [pc, #684]	; (16a4 <twim_default_callback+0x2dc>)
    13f6:	541a      	strb	r2, [r3, r0]
				TWI_RECEIVE_NACK : TWI_ARBITRATION_LOST;
		twim->TWIM_NCMDR &= ~TWIM_NCMDR_VALID;
    13f8:	6923      	ldr	r3, [r4, #16]
    13fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    13fe:	6123      	str	r3, [r4, #16]
		twim->TWIM_CMDR &= ~TWIM_CMDR_VALID;
    1400:	68e3      	ldr	r3, [r4, #12]
    1402:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    1406:	60e3      	str	r3, [r4, #12]
		twim->TWIM_SCR = ~0UL;
    1408:	f04f 33ff 	mov.w	r3, #4294967295
    140c:	62e3      	str	r3, [r4, #44]	; 0x2c
		twim->TWIM_IDR = ~0UL;
    140e:	6263      	str	r3, [r4, #36]	; 0x24
		twim_next_cmd_xfer_valid[twim_ch] = false;
    1410:	2200      	movs	r2, #0
    1412:	4ba5      	ldr	r3, [pc, #660]	; (16a8 <twim_default_callback+0x2e0>)
    1414:	541a      	strb	r2, [r3, r0]
    1416:	e13f      	b.n	1698 <twim_default_callback+0x2d0>
	}
	/* This is a RXRDY */
	else if (status & TWIM_SR_RXRDY) {
    1418:	f013 0f01 	tst.w	r3, #1
    141c:	d07e      	beq.n	151c <twim_default_callback+0x154>
		/* Get data from Receive Holding Register */
		*p_twim_rx_data[twim_ch] = twim->TWIM_RHR;
    141e:	4aa3      	ldr	r2, [pc, #652]	; (16ac <twim_default_callback+0x2e4>)
    1420:	6961      	ldr	r1, [r4, #20]
    1422:	b2c9      	uxtb	r1, r1
    1424:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
    1428:	f803 1b01 	strb.w	r1, [r3], #1
		p_twim_rx_data[twim_ch]++;
    142c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
		/* Decrease received bytes number */
		twim_rx_nb_bytes[twim_ch]--;
    1430:	4b9f      	ldr	r3, [pc, #636]	; (16b0 <twim_default_callback+0x2e8>)
    1432:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    1436:	3a01      	subs	r2, #1
    1438:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
		/* Receive complete for current command */
		if (twim_rx_nb_bytes[twim_ch] == 0) {
    143c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    1440:	2b00      	cmp	r3, #0
    1442:	f040 8129 	bne.w	1698 <twim_default_callback+0x2d0>
			/* Check for next transfer */
			if ((twim_next_cmd_xfer_valid[twim_ch]) &&
    1446:	4b98      	ldr	r3, [pc, #608]	; (16a8 <twim_default_callback+0x2e0>)
    1448:	5c1b      	ldrb	r3, [r3, r0]
    144a:	f013 0fff 	tst.w	r3, #255	; 0xff
    144e:	d055      	beq.n	14fc <twim_default_callback+0x134>
					(twim_next_rx_nb_bytes[twim_ch] != 0)) {
    1450:	4b98      	ldr	r3, [pc, #608]	; (16b4 <twim_default_callback+0x2ec>)
    1452:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
		/* Decrease received bytes number */
		twim_rx_nb_bytes[twim_ch]--;
		/* Receive complete for current command */
		if (twim_rx_nb_bytes[twim_ch] == 0) {
			/* Check for next transfer */
			if ((twim_next_cmd_xfer_valid[twim_ch]) &&
    1456:	2b00      	cmp	r3, #0
    1458:	d050      	beq.n	14fc <twim_default_callback+0x134>
					(twim_next_rx_nb_bytes[twim_ch] != 0)) {
				p_twim_rx_data[twim_ch] = p_twim_next_rx_data[twim_ch];
    145a:	4b97      	ldr	r3, [pc, #604]	; (16b8 <twim_default_callback+0x2f0>)
    145c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    1460:	4a92      	ldr	r2, [pc, #584]	; (16ac <twim_default_callback+0x2e4>)
    1462:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
				if (twim_next_rx_nb_bytes[twim_ch] > TWIM_MAX_NBYTES_PER_XFER) {
    1466:	4a93      	ldr	r2, [pc, #588]	; (16b4 <twim_default_callback+0x2ec>)
    1468:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
    146c:	2aff      	cmp	r2, #255	; 0xff
    146e:	d90e      	bls.n	148e <twim_default_callback+0xc6>
					twim_rx_nb_bytes[twim_ch] = TWIM_MAX_NBYTES_PER_XFER;
    1470:	21ff      	movs	r1, #255	; 0xff
    1472:	4a8f      	ldr	r2, [pc, #572]	; (16b0 <twim_default_callback+0x2e8>)
    1474:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
					p_twim_next_rx_data[twim_ch] += TWIM_MAX_NBYTES_PER_XFER;
    1478:	440b      	add	r3, r1
    147a:	4a8f      	ldr	r2, [pc, #572]	; (16b8 <twim_default_callback+0x2f0>)
    147c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
					twim_next_rx_nb_bytes[twim_ch] -= TWIM_MAX_NBYTES_PER_XFER;
    1480:	4b8c      	ldr	r3, [pc, #560]	; (16b4 <twim_default_callback+0x2ec>)
    1482:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    1486:	3aff      	subs	r2, #255	; 0xff
    1488:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    148c:	e008      	b.n	14a0 <twim_default_callback+0xd8>
				} else {
					twim_rx_nb_bytes[twim_ch] = twim_next_rx_nb_bytes[twim_ch];
    148e:	4b89      	ldr	r3, [pc, #548]	; (16b4 <twim_default_callback+0x2ec>)
    1490:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
    1494:	4a86      	ldr	r2, [pc, #536]	; (16b0 <twim_default_callback+0x2e8>)
    1496:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
					twim_next_rx_nb_bytes[twim_ch] = 0;
    149a:	2200      	movs	r2, #0
    149c:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
				}
				/* Need next transfer? */
				if (twim_next_rx_nb_bytes[twim_ch] > 0) {
    14a0:	4b84      	ldr	r3, [pc, #528]	; (16b4 <twim_default_callback+0x2ec>)
    14a2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    14a6:	b32b      	cbz	r3, 14f4 <twim_default_callback+0x12c>
					ncmdr_wait = NCMDR_FREE_WAIT;
    14a8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
    14ac:	9301      	str	r3, [sp, #4]
					while ((twim->TWIM_NCMDR & TWIM_NCMDR_VALID) && (ncmdr_wait--)) {
    14ae:	6923      	ldr	r3, [r4, #16]
    14b0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    14b4:	d004      	beq.n	14c0 <twim_default_callback+0xf8>
    14b6:	9b01      	ldr	r3, [sp, #4]
    14b8:	1e5a      	subs	r2, r3, #1
    14ba:	9201      	str	r2, [sp, #4]
    14bc:	2b00      	cmp	r3, #0
    14be:	d1f6      	bne.n	14ae <twim_default_callback+0xe6>
					}
					/* Fill transfer command */
					cmdr_reg = twim->TWIM_CMDR;
    14c0:	68e3      	ldr	r3, [r4, #12]
					cmdr_reg &= (~(TWIM_CMDR_NBYTES_Msk | TWIM_CMDR_START | TWIM_CMDR_ACKLAST));
    14c2:	f023 733f 	bic.w	r3, r3, #50069504	; 0x2fc0000
    14c6:	f423 3348 	bic.w	r3, r3, #204800	; 0x32000
					if (twim_next_rx_nb_bytes[twim_ch] > TWIM_MAX_NBYTES_PER_XFER) {
    14ca:	4a7a      	ldr	r2, [pc, #488]	; (16b4 <twim_default_callback+0x2ec>)
    14cc:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
    14d0:	2aff      	cmp	r2, #255	; 0xff
    14d2:	d904      	bls.n	14de <twim_default_callback+0x116>
						cmdr_reg |=  (TWIM_CMDR_NBYTES(TWIM_MAX_NBYTES_PER_XFER) | TWIM_CMDR_ACKLAST);
    14d4:	f043 733f 	orr.w	r3, r3, #50069504	; 0x2fc0000
    14d8:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    14dc:	e008      	b.n	14f0 <twim_default_callback+0x128>
					} else {
						cmdr_reg |=  (TWIM_CMDR_NBYTES(twim_next_rx_nb_bytes[twim_ch])
    14de:	4a75      	ldr	r2, [pc, #468]	; (16b4 <twim_default_callback+0x2ec>)
    14e0:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
    14e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    14e8:	0412      	lsls	r2, r2, #16
    14ea:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
    14ee:	4313      	orrs	r3, r2
								| TWIM_CMDR_STOP);
					}
					twim->TWIM_NCMDR = cmdr_reg;
    14f0:	6123      	str	r3, [r4, #16]
    14f2:	e0d1      	b.n	1698 <twim_default_callback+0x2d0>
				} else {
					twim_next_cmd_xfer_valid[twim_ch] = false;
    14f4:	2200      	movs	r2, #0
    14f6:	4b6c      	ldr	r3, [pc, #432]	; (16a8 <twim_default_callback+0x2e0>)
    14f8:	541a      	strb	r2, [r3, r0]
    14fa:	e0cd      	b.n	1698 <twim_default_callback+0x2d0>
				}
			} else {
				/* Finish the receive operation */
				twim->TWIM_IDR = TWIM_IDR_RXRDY;
    14fc:	2301      	movs	r3, #1
    14fe:	6263      	str	r3, [r4, #36]	; 0x24
				/* Set next transfer to false */
				twim_next_cmd_xfer_valid[twim_ch] = false;
    1500:	2200      	movs	r2, #0
    1502:	4b69      	ldr	r3, [pc, #420]	; (16a8 <twim_default_callback+0x2e0>)
    1504:	541a      	strb	r2, [r3, r0]
#if TWIM_LOW_POWER_ENABLE
				twim->TWIM_SCR = TWIM_SCR_CCOMP;
    1506:	2308      	movs	r3, #8
    1508:	62e3      	str	r3, [r4, #44]	; 0x2c
				twim->TWIM_IER = TWIM_IER_CCOMP;
    150a:	6223      	str	r3, [r4, #32]
				twim_it_mask[twim_ch] |= TWIM_IER_CCOMP;
    150c:	4b64      	ldr	r3, [pc, #400]	; (16a0 <twim_default_callback+0x2d8>)
    150e:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    1512:	f042 0208 	orr.w	r2, r2, #8
    1516:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    151a:	e0bd      	b.n	1698 <twim_default_callback+0x2d0>
#endif
			}
		}
	}
	/* This is a TXRDY */
	else if (status & TWIM_SR_TXRDY) {
    151c:	f013 0f02 	tst.w	r3, #2
    1520:	f000 80b4 	beq.w	168c <twim_default_callback+0x2c4>
		/* No more bytes to transmit */
		if (twim_tx_nb_bytes[twim_ch] == 0) {
    1524:	4b65      	ldr	r3, [pc, #404]	; (16bc <twim_default_callback+0x2f4>)
    1526:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    152a:	b99b      	cbnz	r3, 1554 <twim_default_callback+0x18c>
			/* Finish the receive operation */
			twim->TWIM_IDR = TWIM_IDR_TXRDY;
    152c:	2302      	movs	r3, #2
    152e:	6263      	str	r3, [r4, #36]	; 0x24
			/* Set next transfer to false */
			if (twim_next_rx_nb_bytes[twim_ch] == 0) {
    1530:	4b60      	ldr	r3, [pc, #384]	; (16b4 <twim_default_callback+0x2ec>)
    1532:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    1536:	b913      	cbnz	r3, 153e <twim_default_callback+0x176>
				twim_next_cmd_xfer_valid[twim_ch] = false;
    1538:	2200      	movs	r2, #0
    153a:	4b5b      	ldr	r3, [pc, #364]	; (16a8 <twim_default_callback+0x2e0>)
    153c:	541a      	strb	r2, [r3, r0]
			}
#if TWIM_LOW_POWER_ENABLE
			twim->TWIM_SCR = TWIM_SCR_CCOMP;
    153e:	2308      	movs	r3, #8
    1540:	62e3      	str	r3, [r4, #44]	; 0x2c
			twim->TWIM_IER = TWIM_IER_CCOMP;
    1542:	6223      	str	r3, [r4, #32]
			twim_it_mask[twim_ch] |= TWIM_IER_CCOMP;
    1544:	4b56      	ldr	r3, [pc, #344]	; (16a0 <twim_default_callback+0x2d8>)
    1546:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    154a:	f042 0208 	orr.w	r2, r2, #8
    154e:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    1552:	e0a1      	b.n	1698 <twim_default_callback+0x2d0>
#endif
		} else {
			/* Put the byte in the Transmit Holding Register */
			twim->TWIM_THR = *p_twim_tx_data[twim_ch]++;
    1554:	4a5a      	ldr	r2, [pc, #360]	; (16c0 <twim_default_callback+0x2f8>)
    1556:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
    155a:	1c59      	adds	r1, r3, #1
    155c:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
    1560:	781b      	ldrb	r3, [r3, #0]
    1562:	b2db      	uxtb	r3, r3
    1564:	61a3      	str	r3, [r4, #24]
			/* Decrease transmitted bytes number */
			twim_tx_nb_bytes[twim_ch]--;
    1566:	4b55      	ldr	r3, [pc, #340]	; (16bc <twim_default_callback+0x2f4>)
    1568:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    156c:	3a01      	subs	r2, #1
    156e:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
			if (twim_tx_nb_bytes[twim_ch] == 0) {
    1572:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    1576:	2b00      	cmp	r3, #0
    1578:	f040 808e 	bne.w	1698 <twim_default_callback+0x2d0>
				/* Check for next transfer */
				if ((twim_next_cmd_xfer_valid[twim_ch]) &&
    157c:	4b4a      	ldr	r3, [pc, #296]	; (16a8 <twim_default_callback+0x2e0>)
    157e:	5c1b      	ldrb	r3, [r3, r0]
    1580:	f013 0fff 	tst.w	r3, #255	; 0xff
    1584:	d053      	beq.n	162e <twim_default_callback+0x266>
						(twim_next_tx_nb_bytes[twim_ch] != 0)) {
    1586:	4b4f      	ldr	r3, [pc, #316]	; (16c4 <twim_default_callback+0x2fc>)
    1588:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
			twim->TWIM_THR = *p_twim_tx_data[twim_ch]++;
			/* Decrease transmitted bytes number */
			twim_tx_nb_bytes[twim_ch]--;
			if (twim_tx_nb_bytes[twim_ch] == 0) {
				/* Check for next transfer */
				if ((twim_next_cmd_xfer_valid[twim_ch]) &&
    158c:	2b00      	cmp	r3, #0
    158e:	d04e      	beq.n	162e <twim_default_callback+0x266>
						(twim_next_tx_nb_bytes[twim_ch] != 0)) {
					p_twim_tx_data[twim_ch] = p_twim_next_tx_data[twim_ch];
    1590:	4b4d      	ldr	r3, [pc, #308]	; (16c8 <twim_default_callback+0x300>)
    1592:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    1596:	4a4a      	ldr	r2, [pc, #296]	; (16c0 <twim_default_callback+0x2f8>)
    1598:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
					if (twim_next_tx_nb_bytes[twim_ch] > TWIM_MAX_NBYTES_PER_XFER) {
    159c:	4a49      	ldr	r2, [pc, #292]	; (16c4 <twim_default_callback+0x2fc>)
    159e:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
    15a2:	2aff      	cmp	r2, #255	; 0xff
    15a4:	d90e      	bls.n	15c4 <twim_default_callback+0x1fc>
						twim_tx_nb_bytes[twim_ch] = TWIM_MAX_NBYTES_PER_XFER;
    15a6:	21ff      	movs	r1, #255	; 0xff
    15a8:	4a44      	ldr	r2, [pc, #272]	; (16bc <twim_default_callback+0x2f4>)
    15aa:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
						p_twim_next_tx_data[twim_ch] += TWIM_MAX_NBYTES_PER_XFER;
    15ae:	440b      	add	r3, r1
    15b0:	4a45      	ldr	r2, [pc, #276]	; (16c8 <twim_default_callback+0x300>)
    15b2:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
						twim_next_tx_nb_bytes[twim_ch] -= TWIM_MAX_NBYTES_PER_XFER;
    15b6:	4b43      	ldr	r3, [pc, #268]	; (16c4 <twim_default_callback+0x2fc>)
    15b8:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    15bc:	3aff      	subs	r2, #255	; 0xff
    15be:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    15c2:	e008      	b.n	15d6 <twim_default_callback+0x20e>
					} else {
						twim_tx_nb_bytes[twim_ch] = twim_next_tx_nb_bytes[twim_ch];
    15c4:	4b3f      	ldr	r3, [pc, #252]	; (16c4 <twim_default_callback+0x2fc>)
    15c6:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
    15ca:	4a3c      	ldr	r2, [pc, #240]	; (16bc <twim_default_callback+0x2f4>)
    15cc:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
						twim_next_tx_nb_bytes[twim_ch] = 0;
    15d0:	2200      	movs	r2, #0
    15d2:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
					}
					/* Need next transfer? */
					if (twim_next_tx_nb_bytes[twim_ch] > 0) {
    15d6:	4b3b      	ldr	r3, [pc, #236]	; (16c4 <twim_default_callback+0x2fc>)
    15d8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    15dc:	b31b      	cbz	r3, 1626 <twim_default_callback+0x25e>
						ncmdr_wait = NCMDR_FREE_WAIT;
    15de:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
    15e2:	9301      	str	r3, [sp, #4]
						while ((twim->TWIM_NCMDR & TWIM_NCMDR_VALID) && (ncmdr_wait--)) {
    15e4:	6923      	ldr	r3, [r4, #16]
    15e6:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    15ea:	d004      	beq.n	15f6 <twim_default_callback+0x22e>
    15ec:	9b01      	ldr	r3, [sp, #4]
    15ee:	1e5a      	subs	r2, r3, #1
    15f0:	9201      	str	r2, [sp, #4]
    15f2:	2b00      	cmp	r3, #0
    15f4:	d1f6      	bne.n	15e4 <twim_default_callback+0x21c>
						}
						/* Fill transfer command */
						cmdr_reg = twim->TWIM_CMDR;
    15f6:	68e3      	ldr	r3, [r4, #12]
						cmdr_reg &= (~(TWIM_CMDR_NBYTES_Msk | TWIM_CMDR_START));
    15f8:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    15fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
						if (twim_next_tx_nb_bytes[twim_ch] > TWIM_MAX_NBYTES_PER_XFER) {
    1600:	4a30      	ldr	r2, [pc, #192]	; (16c4 <twim_default_callback+0x2fc>)
    1602:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
    1606:	2aff      	cmp	r2, #255	; 0xff
    1608:	d902      	bls.n	1610 <twim_default_callback+0x248>
							cmdr_reg |=  TWIM_CMDR_NBYTES(TWIM_MAX_NBYTES_PER_XFER);
    160a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
    160e:	e008      	b.n	1622 <twim_default_callback+0x25a>
						} else {
							cmdr_reg |=  (TWIM_CMDR_NBYTES(twim_next_tx_nb_bytes[twim_ch])
    1610:	4a2c      	ldr	r2, [pc, #176]	; (16c4 <twim_default_callback+0x2fc>)
    1612:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
    1616:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    161a:	0412      	lsls	r2, r2, #16
    161c:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
    1620:	4313      	orrs	r3, r2
									| TWIM_CMDR_STOP);
						}
						twim->TWIM_NCMDR = cmdr_reg;
    1622:	6123      	str	r3, [r4, #16]
    1624:	e038      	b.n	1698 <twim_default_callback+0x2d0>
					} else {
						twim_next_cmd_xfer_valid[twim_ch] = false;
    1626:	2200      	movs	r2, #0
    1628:	4b1f      	ldr	r3, [pc, #124]	; (16a8 <twim_default_callback+0x2e0>)
    162a:	541a      	strb	r2, [r3, r0]
    162c:	e034      	b.n	1698 <twim_default_callback+0x2d0>
					}
				} else if ((twim_next_cmd_xfer_valid[twim_ch]) &&
    162e:	4b1e      	ldr	r3, [pc, #120]	; (16a8 <twim_default_callback+0x2e0>)
    1630:	5c1b      	ldrb	r3, [r3, r0]
    1632:	f013 0fff 	tst.w	r3, #255	; 0xff
    1636:	d02f      	beq.n	1698 <twim_default_callback+0x2d0>
						(twim_next_rx_nb_bytes[twim_ch] != 0)) {
    1638:	4b1e      	ldr	r3, [pc, #120]	; (16b4 <twim_default_callback+0x2ec>)
    163a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
						}
						twim->TWIM_NCMDR = cmdr_reg;
					} else {
						twim_next_cmd_xfer_valid[twim_ch] = false;
					}
				} else if ((twim_next_cmd_xfer_valid[twim_ch]) &&
    163e:	b35b      	cbz	r3, 1698 <twim_default_callback+0x2d0>
						(twim_next_rx_nb_bytes[twim_ch] != 0)) {
					/* Fill transfer command (In case of RX after internal address write) */
					ncmdr_wait = NCMDR_FREE_WAIT;
    1640:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
    1644:	9301      	str	r3, [sp, #4]
					while ((twim->TWIM_NCMDR & TWIM_NCMDR_VALID) && (ncmdr_wait--)) {
    1646:	6923      	ldr	r3, [r4, #16]
    1648:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    164c:	d004      	beq.n	1658 <twim_default_callback+0x290>
    164e:	9b01      	ldr	r3, [sp, #4]
    1650:	1e5a      	subs	r2, r3, #1
    1652:	9201      	str	r2, [sp, #4]
    1654:	2b00      	cmp	r3, #0
    1656:	d1f6      	bne.n	1646 <twim_default_callback+0x27e>
					}
					cmdr_reg = twim->TWIM_CMDR;
    1658:	68e3      	ldr	r3, [r4, #12]
					cmdr_reg &= (~(TWIM_CMDR_NBYTES_Msk | TWIM_CMDR_START | TWIM_CMDR_ACKLAST));
    165a:	f023 733f 	bic.w	r3, r3, #50069504	; 0x2fc0000
    165e:	f423 3348 	bic.w	r3, r3, #204800	; 0x32000
					if (twim_next_rx_nb_bytes[twim_ch] > TWIM_MAX_NBYTES_PER_XFER) {
    1662:	4a14      	ldr	r2, [pc, #80]	; (16b4 <twim_default_callback+0x2ec>)
    1664:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
    1668:	2aff      	cmp	r2, #255	; 0xff
    166a:	d904      	bls.n	1676 <twim_default_callback+0x2ae>
						cmdr_reg |=  (TWIM_CMDR_NBYTES(TWIM_MAX_NBYTES_PER_XFER) | TWIM_CMDR_ACKLAST);
    166c:	f043 733f 	orr.w	r3, r3, #50069504	; 0x2fc0000
    1670:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    1674:	e008      	b.n	1688 <twim_default_callback+0x2c0>
					} else {
						cmdr_reg |=  (TWIM_CMDR_NBYTES(twim_next_rx_nb_bytes[twim_ch])
    1676:	4a0f      	ldr	r2, [pc, #60]	; (16b4 <twim_default_callback+0x2ec>)
    1678:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
    167c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1680:	0412      	lsls	r2, r2, #16
    1682:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
    1686:	4313      	orrs	r3, r2
								| TWIM_CMDR_STOP);
					}
					twim->TWIM_NCMDR = cmdr_reg;
    1688:	6123      	str	r3, [r4, #16]
    168a:	e005      	b.n	1698 <twim_default_callback+0x2d0>
				}
			}
		}
	}
#if TWIM_LOW_POWER_ENABLE
	else if (status & TWIM_SR_CCOMP) {
    168c:	f013 0f08 	tst.w	r3, #8
    1690:	d002      	beq.n	1698 <twim_default_callback+0x2d0>
		twim->TWIM_SCR = TWIM_SCR_CCOMP;
    1692:	2308      	movs	r3, #8
    1694:	62e3      	str	r3, [r4, #44]	; 0x2c
		twim->TWIM_IDR = TWIM_IDR_CCOMP;
    1696:	6263      	str	r3, [r4, #36]	; 0x24
	}
#endif
}
    1698:	b002      	add	sp, #8
    169a:	bd10      	pop	{r4, pc}
    169c:	000013a1 	.word	0x000013a1
    16a0:	200008f0 	.word	0x200008f0
    16a4:	200008dc 	.word	0x200008dc
    16a8:	200008b8 	.word	0x200008b8
    16ac:	20000910 	.word	0x20000910
    16b0:	20000900 	.word	0x20000900
    16b4:	200008bc 	.word	0x200008bc
    16b8:	200008cc 	.word	0x200008cc
    16bc:	20000920 	.word	0x20000920
    16c0:	200008e0 	.word	0x200008e0
    16c4:	200008a8 	.word	0x200008a8
    16c8:	20000930 	.word	0x20000930

000016cc <twim_set_speed>:
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_speed(Twim *twim, uint32_t speed, uint32_t clk,
	uint8_t cycles)
{
    16cc:	b470      	push	{r4, r5, r6}
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);
    16ce:	fbb2 f2f1 	udiv	r2, r2, r1
    16d2:	0852      	lsrs	r2, r2, #1

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
    16d4:	2aff      	cmp	r2, #255	; 0xff
    16d6:	d90b      	bls.n	16f0 <twim_set_speed+0x24>
 */
status_code_t twim_set_speed(Twim *twim, uint32_t speed, uint32_t clk,
	uint8_t cycles)
{
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
    16d8:	2100      	movs	r1, #0
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
		/* increase clock divider */
		cwgr_exp++;
    16da:	3101      	adds	r1, #1
    16dc:	b2c9      	uxtb	r1, r1
		/* divide f_prescaled value */
		f_prescaled /= 2;
    16de:	0852      	lsrs	r2, r2, #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
    16e0:	2aff      	cmp	r2, #255	; 0xff
    16e2:	d902      	bls.n	16ea <twim_set_speed+0x1e>
    16e4:	2908      	cmp	r1, #8
    16e6:	d1f8      	bne.n	16da <twim_set_speed+0xe>
    16e8:	e018      	b.n	171c <twim_set_speed+0x50>
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
	}

	if (cwgr_exp > 0x7) {
    16ea:	2907      	cmp	r1, #7
    16ec:	d901      	bls.n	16f2 <twim_set_speed+0x26>
    16ee:	e017      	b.n	1720 <twim_set_speed+0x54>
 */
status_code_t twim_set_speed(Twim *twim, uint32_t speed, uint32_t clk,
	uint8_t cycles)
{
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
    16f0:	2100      	movs	r1, #0
	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
	}

	/* set clock waveform generator register */
	twim->TWIM_CWGR = TWIM_CWGR_LOW(f_prescaled / 2)
    16f2:	0854      	lsrs	r4, r2, #1
    16f4:	b2e6      	uxtb	r6, r4
			| TWIM_CWGR_HIGH(f_prescaled - f_prescaled / 2)
			| TWIM_CWGR_EXP(cwgr_exp)
			| TWIM_CWGR_DATA(cycles)
			| TWIM_CWGR_STASTO(f_prescaled);
    16f6:	0415      	lsls	r5, r2, #16
    16f8:	f405 057f 	and.w	r5, r5, #16711680	; 0xff0000
		return ERR_INVALID_ARG;
	}

	/* set clock waveform generator register */
	twim->TWIM_CWGR = TWIM_CWGR_LOW(f_prescaled / 2)
			| TWIM_CWGR_HIGH(f_prescaled - f_prescaled / 2)
    16fc:	4335      	orrs	r5, r6
			| TWIM_CWGR_EXP(cwgr_exp)
			| TWIM_CWGR_DATA(cycles)
    16fe:	061b      	lsls	r3, r3, #24
    1700:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
	}

	/* set clock waveform generator register */
	twim->TWIM_CWGR = TWIM_CWGR_LOW(f_prescaled / 2)
			| TWIM_CWGR_HIGH(f_prescaled - f_prescaled / 2)
			| TWIM_CWGR_EXP(cwgr_exp)
    1704:	432b      	orrs	r3, r5
		return ERR_INVALID_ARG;
	}

	/* set clock waveform generator register */
	twim->TWIM_CWGR = TWIM_CWGR_LOW(f_prescaled / 2)
			| TWIM_CWGR_HIGH(f_prescaled - f_prescaled / 2)
    1706:	1b12      	subs	r2, r2, r4
    1708:	0212      	lsls	r2, r2, #8
    170a:	b292      	uxth	r2, r2
			| TWIM_CWGR_EXP(cwgr_exp)
			| TWIM_CWGR_DATA(cycles)
    170c:	4313      	orrs	r3, r2
	}

	/* set clock waveform generator register */
	twim->TWIM_CWGR = TWIM_CWGR_LOW(f_prescaled / 2)
			| TWIM_CWGR_HIGH(f_prescaled - f_prescaled / 2)
			| TWIM_CWGR_EXP(cwgr_exp)
    170e:	0709      	lsls	r1, r1, #28
    1710:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
			| TWIM_CWGR_DATA(cycles)
			| TWIM_CWGR_STASTO(f_prescaled);
    1714:	4319      	orrs	r1, r3
	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
	}

	/* set clock waveform generator register */
	twim->TWIM_CWGR = TWIM_CWGR_LOW(f_prescaled / 2)
    1716:	6041      	str	r1, [r0, #4]
			| TWIM_CWGR_HIGH(f_prescaled - f_prescaled / 2)
			| TWIM_CWGR_EXP(cwgr_exp)
			| TWIM_CWGR_DATA(cycles)
			| TWIM_CWGR_STASTO(f_prescaled);

	return STATUS_OK;
    1718:	2000      	movs	r0, #0
    171a:	e002      	b.n	1722 <twim_set_speed+0x56>
		/* divide f_prescaled value */
		f_prescaled /= 2;
	}

	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
    171c:	20f8      	movs	r0, #248	; 0xf8
    171e:	e000      	b.n	1722 <twim_set_speed+0x56>
    1720:	20f8      	movs	r0, #248	; 0xf8
			| TWIM_CWGR_EXP(cwgr_exp)
			| TWIM_CWGR_DATA(cycles)
			| TWIM_CWGR_STASTO(f_prescaled);

	return STATUS_OK;
}
    1722:	b240      	sxtb	r0, r0
    1724:	bc70      	pop	{r4, r5, r6}
    1726:	4770      	bx	lr

00001728 <twim_set_hsmode_speed>:
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_hsmode_speed(Twim *twim, uint32_t speed, uint32_t clk,
	uint8_t cycles)
{
    1728:	b470      	push	{r4, r5, r6}
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);
    172a:	fbb2 f2f1 	udiv	r2, r2, r1
    172e:	0852      	lsrs	r2, r2, #1

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
    1730:	2aff      	cmp	r2, #255	; 0xff
    1732:	d90b      	bls.n	174c <twim_set_hsmode_speed+0x24>
 */
status_code_t twim_set_hsmode_speed(Twim *twim, uint32_t speed, uint32_t clk,
	uint8_t cycles)
{
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
    1734:	2100      	movs	r1, #0
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
		/* increase clock divider */
		cwgr_exp++;
    1736:	3101      	adds	r1, #1
    1738:	b2c9      	uxtb	r1, r1
		/* divide f_prescaled value */
		f_prescaled /= 2;
    173a:	0852      	lsrs	r2, r2, #1
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (clk / speed / 2);

	/* f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits */
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
    173c:	2aff      	cmp	r2, #255	; 0xff
    173e:	d902      	bls.n	1746 <twim_set_hsmode_speed+0x1e>
    1740:	2908      	cmp	r1, #8
    1742:	d1f8      	bne.n	1736 <twim_set_hsmode_speed+0xe>
    1744:	e018      	b.n	1778 <twim_set_hsmode_speed+0x50>
		cwgr_exp++;
		/* divide f_prescaled value */
		f_prescaled /= 2;
	}

	if (cwgr_exp > 0x7) {
    1746:	2907      	cmp	r1, #7
    1748:	d901      	bls.n	174e <twim_set_hsmode_speed+0x26>
    174a:	e017      	b.n	177c <twim_set_hsmode_speed+0x54>
 */
status_code_t twim_set_hsmode_speed(Twim *twim, uint32_t speed, uint32_t clk,
	uint8_t cycles)
{
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
    174c:	2100      	movs	r1, #0
	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
	}

	/* set clock waveform generator register */
	twim->TWIM_HSCWGR = TWIM_HSCWGR_LOW(f_prescaled / 2)
    174e:	0854      	lsrs	r4, r2, #1
    1750:	b2e6      	uxtb	r6, r4
			| TWIM_HSCWGR_HIGH(f_prescaled - f_prescaled / 2)
			| TWIM_HSCWGR_EXP(cwgr_exp)
			| TWIM_HSCWGR_DATA(cycles)
			| TWIM_HSCWGR_STASTO(f_prescaled);
    1752:	0415      	lsls	r5, r2, #16
    1754:	f405 057f 	and.w	r5, r5, #16711680	; 0xff0000
		return ERR_INVALID_ARG;
	}

	/* set clock waveform generator register */
	twim->TWIM_HSCWGR = TWIM_HSCWGR_LOW(f_prescaled / 2)
			| TWIM_HSCWGR_HIGH(f_prescaled - f_prescaled / 2)
    1758:	4335      	orrs	r5, r6
			| TWIM_HSCWGR_EXP(cwgr_exp)
			| TWIM_HSCWGR_DATA(cycles)
    175a:	061b      	lsls	r3, r3, #24
    175c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
	}

	/* set clock waveform generator register */
	twim->TWIM_HSCWGR = TWIM_HSCWGR_LOW(f_prescaled / 2)
			| TWIM_HSCWGR_HIGH(f_prescaled - f_prescaled / 2)
			| TWIM_HSCWGR_EXP(cwgr_exp)
    1760:	432b      	orrs	r3, r5
		return ERR_INVALID_ARG;
	}

	/* set clock waveform generator register */
	twim->TWIM_HSCWGR = TWIM_HSCWGR_LOW(f_prescaled / 2)
			| TWIM_HSCWGR_HIGH(f_prescaled - f_prescaled / 2)
    1762:	1b12      	subs	r2, r2, r4
    1764:	0212      	lsls	r2, r2, #8
    1766:	b292      	uxth	r2, r2
			| TWIM_HSCWGR_EXP(cwgr_exp)
			| TWIM_HSCWGR_DATA(cycles)
    1768:	4313      	orrs	r3, r2
	}

	/* set clock waveform generator register */
	twim->TWIM_HSCWGR = TWIM_HSCWGR_LOW(f_prescaled / 2)
			| TWIM_HSCWGR_HIGH(f_prescaled - f_prescaled / 2)
			| TWIM_HSCWGR_EXP(cwgr_exp)
    176a:	0709      	lsls	r1, r1, #28
    176c:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
			| TWIM_HSCWGR_DATA(cycles)
			| TWIM_HSCWGR_STASTO(f_prescaled);
    1770:	4319      	orrs	r1, r3
	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
	}

	/* set clock waveform generator register */
	twim->TWIM_HSCWGR = TWIM_HSCWGR_LOW(f_prescaled / 2)
    1772:	6381      	str	r1, [r0, #56]	; 0x38
			| TWIM_HSCWGR_HIGH(f_prescaled - f_prescaled / 2)
			| TWIM_HSCWGR_EXP(cwgr_exp)
			| TWIM_HSCWGR_DATA(cycles)
			| TWIM_HSCWGR_STASTO(f_prescaled);

	return STATUS_OK;
    1774:	2000      	movs	r0, #0
    1776:	e002      	b.n	177e <twim_set_hsmode_speed+0x56>
		/* divide f_prescaled value */
		f_prescaled /= 2;
	}

	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
    1778:	20f8      	movs	r0, #248	; 0xf8
    177a:	e000      	b.n	177e <twim_set_hsmode_speed+0x56>
    177c:	20f8      	movs	r0, #248	; 0xf8
			| TWIM_HSCWGR_EXP(cwgr_exp)
			| TWIM_HSCWGR_DATA(cycles)
			| TWIM_HSCWGR_STASTO(f_prescaled);

	return STATUS_OK;
}
    177e:	b240      	sxtb	r0, r0
    1780:	bc70      	pop	{r4, r5, r6}
    1782:	4770      	bx	lr

00001784 <twim_set_config>:
 *
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_config(Twim *twim, struct twim_config *config)
{
    1784:	b570      	push	{r4, r5, r6, lr}
    1786:	4605      	mov	r5, r0
    1788:	460c      	mov	r4, r1
	sysclk_enable_peripheral_clock(twim);
    178a:	4b34      	ldr	r3, [pc, #208]	; (185c <twim_set_config+0xd8>)
    178c:	4798      	blx	r3
	/* Enable master transfer */
	twim->TWIM_CR = TWIM_CR_MEN;
    178e:	2301      	movs	r3, #1
    1790:	602b      	str	r3, [r5, #0]
	/* Reset TWI */
	twim->TWIM_CR = TWIM_CR_SWRST;
    1792:	2380      	movs	r3, #128	; 0x80
    1794:	602b      	str	r3, [r5, #0]
	/* Clear SR */
	twim->TWIM_SCR = ~0UL;
    1796:	f04f 33ff 	mov.w	r3, #4294967295
    179a:	62eb      	str	r3, [r5, #44]	; 0x2c

	if (config->smbus) {
    179c:	7ba3      	ldrb	r3, [r4, #14]
    179e:	b123      	cbz	r3, 17aa <twim_set_config+0x26>
		/* Enable SMBUS Transfer */
		twim->TWIM_CR = TWIM_CR_SMEN;
    17a0:	2310      	movs	r3, #16
    17a2:	602b      	str	r3, [r5, #0]
		twim->TWIM_SMBTR = (uint32_t) -1;
    17a4:	f04f 33ff 	mov.w	r3, #4294967295
    17a8:	60ab      	str	r3, [r5, #8]
	}

	/* Select the speed */
	if (config->speed) {
    17aa:	6861      	ldr	r1, [r4, #4]
    17ac:	b131      	cbz	r1, 17bc <twim_set_config+0x38>
		if (twim_set_speed(twim, config->speed, config->twim_clk,
    17ae:	4628      	mov	r0, r5
    17b0:	6822      	ldr	r2, [r4, #0]
    17b2:	7b23      	ldrb	r3, [r4, #12]
    17b4:	4e2a      	ldr	r6, [pc, #168]	; (1860 <twim_set_config+0xdc>)
    17b6:	47b0      	blx	r6
    17b8:	2800      	cmp	r0, #0
    17ba:	d14a      	bne.n	1852 <twim_set_config+0xce>
				config->data_setup_cycles) != STATUS_OK) {
			return ERR_INVALID_ARG;
		}
	}
	if (config->hsmode_speed) {
    17bc:	68a1      	ldr	r1, [r4, #8]
    17be:	b131      	cbz	r1, 17ce <twim_set_config+0x4a>
		if (twim_set_hsmode_speed(twim, config->hsmode_speed, config->twim_clk,
    17c0:	4628      	mov	r0, r5
    17c2:	6822      	ldr	r2, [r4, #0]
    17c4:	7b63      	ldrb	r3, [r4, #13]
    17c6:	4e27      	ldr	r6, [pc, #156]	; (1864 <twim_set_config+0xe0>)
    17c8:	47b0      	blx	r6
    17ca:	2800      	cmp	r0, #0
    17cc:	d143      	bne.n	1856 <twim_set_config+0xd2>
		}
	}

	/* Set clock and data slew rate */
	twim->TWIM_SRR = ((config->speed < TWI_FAST_MODE_PLUS_SPEED) ?
			TWIM_SRR_FILTER(2) : TWIM_SRR_FILTER(3))
    17ce:	6863      	ldr	r3, [r4, #4]
    17d0:	4a25      	ldr	r2, [pc, #148]	; (1868 <twim_set_config+0xe4>)
    17d2:	4293      	cmp	r3, r2
    17d4:	bf8c      	ite	hi
    17d6:	f04f 5340 	movhi.w	r3, #805306368	; 0x30000000
    17da:	f04f 5300 	movls.w	r3, #536870912	; 0x20000000
			| TWIM_SRR_CLSLEW(config->clock_slew_limit)
    17de:	7be1      	ldrb	r1, [r4, #15]
    17e0:	0609      	lsls	r1, r1, #24
    17e2:	f001 7140 	and.w	r1, r1, #50331648	; 0x3000000
			| TWIM_SRR_CLDRIVEL(config->clock_drive_strength_low)
    17e6:	7c22      	ldrb	r2, [r4, #16]
    17e8:	0412      	lsls	r2, r2, #16
    17ea:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
	}

	/* Set clock and data slew rate */
	twim->TWIM_SRR = ((config->speed < TWI_FAST_MODE_PLUS_SPEED) ?
			TWIM_SRR_FILTER(2) : TWIM_SRR_FILTER(3))
			| TWIM_SRR_CLSLEW(config->clock_slew_limit)
    17ee:	430a      	orrs	r2, r1
			| TWIM_SRR_CLDRIVEL(config->clock_drive_strength_low)
			| TWIM_SRR_DASLEW(config->data_slew_limit)
			| TWIM_SRR_DADRIVEL(config->data_drive_strength_low);
    17f0:	7ca1      	ldrb	r1, [r4, #18]
    17f2:	f001 0107 	and.w	r1, r1, #7

	/* Set clock and data slew rate */
	twim->TWIM_SRR = ((config->speed < TWI_FAST_MODE_PLUS_SPEED) ?
			TWIM_SRR_FILTER(2) : TWIM_SRR_FILTER(3))
			| TWIM_SRR_CLSLEW(config->clock_slew_limit)
			| TWIM_SRR_CLDRIVEL(config->clock_drive_strength_low)
    17f6:	430a      	orrs	r2, r1
			| TWIM_SRR_DASLEW(config->data_slew_limit)
    17f8:	7c61      	ldrb	r1, [r4, #17]
    17fa:	0209      	lsls	r1, r1, #8
    17fc:	f401 7140 	and.w	r1, r1, #768	; 0x300
    1800:	430a      	orrs	r2, r1
			| TWIM_SRR_DADRIVEL(config->data_drive_strength_low);
    1802:	4313      	orrs	r3, r2
			return ERR_INVALID_ARG;
		}
	}

	/* Set clock and data slew rate */
	twim->TWIM_SRR = ((config->speed < TWI_FAST_MODE_PLUS_SPEED) ?
    1804:	63eb      	str	r3, [r5, #60]	; 0x3c
	twim->TWIM_HSSRR = TWIM_HSSRR_FILTER(1)
			| TWIM_HSSRR_CLSLEW(config->hs_clock_slew_limit)
			| TWIM_HSSRR_CLDRIVEL(config->hs_clock_drive_strength_low)
			| TWIM_HSSRR_CLDRIVEH(config->hs_clock_drive_strength_high)
			| TWIM_HSSRR_DASLEW(config->hs_data_slew_limit)
			| TWIM_HSSRR_DADRIVEL(config->hs_data_drive_strength_low);
    1806:	7de2      	ldrb	r2, [r4, #23]
    1808:	f002 0207 	and.w	r2, r2, #7
			| TWIM_SRR_CLDRIVEL(config->clock_drive_strength_low)
			| TWIM_SRR_DASLEW(config->data_slew_limit)
			| TWIM_SRR_DADRIVEL(config->data_drive_strength_low);
	twim->TWIM_HSSRR = TWIM_HSSRR_FILTER(1)
			| TWIM_HSSRR_CLSLEW(config->hs_clock_slew_limit)
			| TWIM_HSSRR_CLDRIVEL(config->hs_clock_drive_strength_low)
    180c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
			| TWIM_SRR_CLSLEW(config->clock_slew_limit)
			| TWIM_SRR_CLDRIVEL(config->clock_drive_strength_low)
			| TWIM_SRR_DASLEW(config->data_slew_limit)
			| TWIM_SRR_DADRIVEL(config->data_drive_strength_low);
	twim->TWIM_HSSRR = TWIM_HSSRR_FILTER(1)
			| TWIM_HSSRR_CLSLEW(config->hs_clock_slew_limit)
    1810:	7ce3      	ldrb	r3, [r4, #19]
    1812:	061b      	lsls	r3, r3, #24
    1814:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
			| TWIM_HSSRR_CLDRIVEL(config->hs_clock_drive_strength_low)
			| TWIM_HSSRR_CLDRIVEH(config->hs_clock_drive_strength_high)
    1818:	4313      	orrs	r3, r2
			| TWIM_SRR_CLDRIVEL(config->clock_drive_strength_low)
			| TWIM_SRR_DASLEW(config->data_slew_limit)
			| TWIM_SRR_DADRIVEL(config->data_drive_strength_low);
	twim->TWIM_HSSRR = TWIM_HSSRR_FILTER(1)
			| TWIM_HSSRR_CLSLEW(config->hs_clock_slew_limit)
			| TWIM_HSSRR_CLDRIVEL(config->hs_clock_drive_strength_low)
    181a:	7d62      	ldrb	r2, [r4, #21]
    181c:	0412      	lsls	r2, r2, #16
    181e:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
			| TWIM_HSSRR_CLDRIVEH(config->hs_clock_drive_strength_high)
			| TWIM_HSSRR_DASLEW(config->hs_data_slew_limit)
    1822:	4313      	orrs	r3, r2
			| TWIM_SRR_DASLEW(config->data_slew_limit)
			| TWIM_SRR_DADRIVEL(config->data_drive_strength_low);
	twim->TWIM_HSSRR = TWIM_HSSRR_FILTER(1)
			| TWIM_HSSRR_CLSLEW(config->hs_clock_slew_limit)
			| TWIM_HSSRR_CLDRIVEL(config->hs_clock_drive_strength_low)
			| TWIM_HSSRR_CLDRIVEH(config->hs_clock_drive_strength_high)
    1824:	7d22      	ldrb	r2, [r4, #20]
    1826:	0512      	lsls	r2, r2, #20
    1828:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
			| TWIM_HSSRR_DASLEW(config->hs_data_slew_limit)
			| TWIM_HSSRR_DADRIVEL(config->hs_data_drive_strength_low);
    182c:	4313      	orrs	r3, r2
			| TWIM_SRR_DADRIVEL(config->data_drive_strength_low);
	twim->TWIM_HSSRR = TWIM_HSSRR_FILTER(1)
			| TWIM_HSSRR_CLSLEW(config->hs_clock_slew_limit)
			| TWIM_HSSRR_CLDRIVEL(config->hs_clock_drive_strength_low)
			| TWIM_HSSRR_CLDRIVEH(config->hs_clock_drive_strength_high)
			| TWIM_HSSRR_DASLEW(config->hs_data_slew_limit)
    182e:	7da2      	ldrb	r2, [r4, #22]
    1830:	0212      	lsls	r2, r2, #8
    1832:	f402 7240 	and.w	r2, r2, #768	; 0x300
			| TWIM_HSSRR_DADRIVEL(config->hs_data_drive_strength_low);
    1836:	4313      	orrs	r3, r2
			TWIM_SRR_FILTER(2) : TWIM_SRR_FILTER(3))
			| TWIM_SRR_CLSLEW(config->clock_slew_limit)
			| TWIM_SRR_CLDRIVEL(config->clock_drive_strength_low)
			| TWIM_SRR_DASLEW(config->data_slew_limit)
			| TWIM_SRR_DADRIVEL(config->data_drive_strength_low);
	twim->TWIM_HSSRR = TWIM_HSSRR_FILTER(1)
    1838:	642b      	str	r3, [r5, #64]	; 0x40
    183a:	4b0c      	ldr	r3, [pc, #48]	; (186c <twim_set_config+0xe8>)
    183c:	1dd9      	adds	r1, r3, #7
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    183e:	2200      	movs	r2, #0
    1840:	f803 2f01 	strb.w	r2, [r3, #1]!
static inline void sleepmgr_init(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
    1844:	428b      	cmp	r3, r1
    1846:	d1fb      	bne.n	1840 <twim_set_config+0xbc>
		sleepmgr_locks[i] = 0;
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    1848:	2201      	movs	r2, #1
    184a:	4b09      	ldr	r3, [pc, #36]	; (1870 <twim_set_config+0xec>)
    184c:	71da      	strb	r2, [r3, #7]

#if TWIM_LOW_POWER_ENABLE
	sleepmgr_init();
#endif

	return STATUS_OK;
    184e:	2000      	movs	r0, #0
    1850:	e002      	b.n	1858 <twim_set_config+0xd4>

	/* Select the speed */
	if (config->speed) {
		if (twim_set_speed(twim, config->speed, config->twim_clk,
				config->data_setup_cycles) != STATUS_OK) {
			return ERR_INVALID_ARG;
    1852:	20f8      	movs	r0, #248	; 0xf8
    1854:	e000      	b.n	1858 <twim_set_config+0xd4>
		}
	}
	if (config->hsmode_speed) {
		if (twim_set_hsmode_speed(twim, config->hsmode_speed, config->twim_clk,
				config->hsmode_data_setup_cycles) != STATUS_OK) {
			return ERR_INVALID_ARG;
    1856:	20f8      	movs	r0, #248	; 0xf8
#if TWIM_LOW_POWER_ENABLE
	sleepmgr_init();
#endif

	return STATUS_OK;
}
    1858:	b240      	sxtb	r0, r0
    185a:	bd70      	pop	{r4, r5, r6, pc}
    185c:	00000b3d 	.word	0x00000b3d
    1860:	000016cd 	.word	0x000016cd
    1864:	00001729 	.word	0x00001729
    1868:	000f423f 	.word	0x000f423f
    186c:	20000a13 	.word	0x20000a13
    1870:	20000a14 	.word	0x20000a14

00001874 <twim_set_callback>:
 * \param callback   Callback function pointer
 * \param irq_level  Interrupt level
 */
void twim_set_callback(Twim *twim, uint32_t interrupt_source,
	twim_callback_t callback, uint8_t irq_level)
{
    1874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1878:	4604      	mov	r4, r0
    187a:	460f      	mov	r7, r1
    187c:	4616      	mov	r6, r2
    187e:	4698      	mov	r8, r3
	uint32_t twim_ch = find_twim_channel_num(twim);
    1880:	4b25      	ldr	r3, [pc, #148]	; (1918 <twim_set_callback+0xa4>)
    1882:	4798      	blx	r3
	uint32_t irq_line = 0;

#if defined(ID_TWIM3)
	if (twim == TWIM3) {
    1884:	4b25      	ldr	r3, [pc, #148]	; (191c <twim_set_callback+0xa8>)
    1886:	429c      	cmp	r4, r3
    1888:	d009      	beq.n	189e <twim_set_callback+0x2a>
		irq_line = TWIM3_IRQn;
	}
#endif
#if defined(ID_TWIM2)
	if (twim == TWIM2) {
    188a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    188e:	429c      	cmp	r4, r3
    1890:	d00a      	beq.n	18a8 <twim_set_callback+0x34>
		irq_line = TWIM2_IRQn;
	}
#endif
#if defined(ID_TWIM1)
	if (twim == TWIM1) {
    1892:	f5a3 23b8 	sub.w	r3, r3, #376832	; 0x5c000
    1896:	429c      	cmp	r4, r3
    1898:	d032      	beq.n	1900 <twim_set_callback+0x8c>
 */
void twim_set_callback(Twim *twim, uint32_t interrupt_source,
	twim_callback_t callback, uint8_t irq_level)
{
	uint32_t twim_ch = find_twim_channel_num(twim);
	uint32_t irq_line = 0;
    189a:	2500      	movs	r5, #0
    189c:	e000      	b.n	18a0 <twim_set_callback+0x2c>

#if defined(ID_TWIM3)
	if (twim == TWIM3) {
		irq_line = TWIM3_IRQn;
    189e:	254e      	movs	r5, #78	; 0x4e
	if (twim == TWIM1) {
		irq_line = TWIM1_IRQn;
	}
#endif
#if defined(ID_TWIM0)
	if (twim == TWIM0) {
    18a0:	4b1f      	ldr	r3, [pc, #124]	; (1920 <twim_set_callback+0xac>)
    18a2:	429c      	cmp	r4, r3
    18a4:	d101      	bne.n	18aa <twim_set_callback+0x36>
    18a6:	e020      	b.n	18ea <twim_set_callback+0x76>
		irq_line = TWIM3_IRQn;
	}
#endif
#if defined(ID_TWIM2)
	if (twim == TWIM2) {
		irq_line = TWIM2_IRQn;
    18a8:	254d      	movs	r5, #77	; 0x4d
#if defined(ID_TWIM0)
	if (twim == TWIM0) {
		irq_line = TWIM0_IRQn;
	}
#endif
	twim_callback_pointer[twim_ch] = callback;
    18aa:	4b1e      	ldr	r3, [pc, #120]	; (1924 <twim_set_callback+0xb0>)
    18ac:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
	NVIC_ClearPendingIRQ((IRQn_Type)irq_line);
    18b0:	b2ed      	uxtb	r5, r5

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    18b2:	b26a      	sxtb	r2, r5
    18b4:	0950      	lsrs	r0, r2, #5
    18b6:	f005 050f 	and.w	r5, r5, #15
    18ba:	2301      	movs	r3, #1
    18bc:	fa03 f505 	lsl.w	r5, r3, r5
    18c0:	f100 0160 	add.w	r1, r0, #96	; 0x60
    18c4:	4b18      	ldr	r3, [pc, #96]	; (1928 <twim_set_callback+0xb4>)
    18c6:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
    18ca:	ea4f 1808 	mov.w	r8, r8, lsl #4
    18ce:	fa5f f888 	uxtb.w	r8, r8
    18d2:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
    18d6:	f502 4261 	add.w	r2, r2, #57600	; 0xe100
    18da:	f882 8300 	strb.w	r8, [r2, #768]	; 0x300
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
    18de:	4b12      	ldr	r3, [pc, #72]	; (1928 <twim_set_callback+0xb4>)
    18e0:	f843 5020 	str.w	r5, [r3, r0, lsl #2]
 * \param interrupt_source  The TWI interrupt to be enabled
 */
void twim_enable_interrupt(Twim *twim, uint32_t interrupt_source)
{
	/* Set the interrupt flags */
	twim->TWIM_IER = interrupt_source;
    18e4:	6227      	str	r7, [r4, #32]
    18e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
#if defined(ID_TWIM0)
	if (twim == TWIM0) {
		irq_line = TWIM0_IRQn;
	}
#endif
	twim_callback_pointer[twim_ch] = callback;
    18ea:	4b0e      	ldr	r3, [pc, #56]	; (1924 <twim_set_callback+0xb0>)
    18ec:	f843 6020 	str.w	r6, [r3, r0, lsl #2]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    18f0:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
    18f4:	4b0c      	ldr	r3, [pc, #48]	; (1928 <twim_set_callback+0xb4>)
    18f6:	f8c3 5184 	str.w	r5, [r3, #388]	; 0x184
    18fa:	2001      	movs	r0, #1
    18fc:	223d      	movs	r2, #61	; 0x3d
    18fe:	e7e4      	b.n	18ca <twim_set_callback+0x56>
    1900:	4b08      	ldr	r3, [pc, #32]	; (1924 <twim_set_callback+0xb0>)
    1902:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
    1906:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
    190a:	4b07      	ldr	r3, [pc, #28]	; (1928 <twim_set_callback+0xb4>)
    190c:	f8c3 5184 	str.w	r5, [r3, #388]	; 0x184
    1910:	2001      	movs	r0, #1
    1912:	223f      	movs	r2, #63	; 0x3f
    1914:	e7d9      	b.n	18ca <twim_set_callback+0x56>
    1916:	bf00      	nop
    1918:	000013a1 	.word	0x000013a1
    191c:	4007c000 	.word	0x4007c000
    1920:	40018000 	.word	0x40018000
    1924:	20000a40 	.word	0x20000a40
    1928:	e000e100 	.word	0xe000e100

0000192c <TWIM0_Handler>:
	twim_enable_interrupt(twim, interrupt_source);
}

#if defined(ID_TWIM0)
void TWIM0_Handler(void)
{
    192c:	b508      	push	{r3, lr}
	twim_callback_pointer[0](TWIM0);
    192e:	4b02      	ldr	r3, [pc, #8]	; (1938 <TWIM0_Handler+0xc>)
    1930:	681b      	ldr	r3, [r3, #0]
    1932:	4802      	ldr	r0, [pc, #8]	; (193c <TWIM0_Handler+0x10>)
    1934:	4798      	blx	r3
    1936:	bd08      	pop	{r3, pc}
    1938:	20000a40 	.word	0x20000a40
    193c:	40018000 	.word	0x40018000

00001940 <TWIM1_Handler>:
}
#endif

#if defined(ID_TWIM1)
void TWIM1_Handler(void)
{
    1940:	b508      	push	{r3, lr}
	twim_callback_pointer[1](TWIM1);
    1942:	4b02      	ldr	r3, [pc, #8]	; (194c <TWIM1_Handler+0xc>)
    1944:	685b      	ldr	r3, [r3, #4]
    1946:	4802      	ldr	r0, [pc, #8]	; (1950 <TWIM1_Handler+0x10>)
    1948:	4798      	blx	r3
    194a:	bd08      	pop	{r3, pc}
    194c:	20000a40 	.word	0x20000a40
    1950:	4001c000 	.word	0x4001c000

00001954 <TWIM2_Handler>:
}
#endif

#if defined(ID_TWIM2)
void TWIM2_Handler(void)
{
    1954:	b508      	push	{r3, lr}
	twim_callback_pointer[2](TWIM2);
    1956:	4b02      	ldr	r3, [pc, #8]	; (1960 <TWIM2_Handler+0xc>)
    1958:	689b      	ldr	r3, [r3, #8]
    195a:	4802      	ldr	r0, [pc, #8]	; (1964 <TWIM2_Handler+0x10>)
    195c:	4798      	blx	r3
    195e:	bd08      	pop	{r3, pc}
    1960:	20000a40 	.word	0x20000a40
    1964:	40078000 	.word	0x40078000

00001968 <TWIM3_Handler>:
}
#endif

#if defined(ID_TWIM3)
void TWIM3_Handler(void)
{
    1968:	b508      	push	{r3, lr}
	twim_callback_pointer[3](TWIM3);
    196a:	4b02      	ldr	r3, [pc, #8]	; (1974 <TWIM3_Handler+0xc>)
    196c:	68db      	ldr	r3, [r3, #12]
    196e:	4802      	ldr	r0, [pc, #8]	; (1978 <TWIM3_Handler+0x10>)
    1970:	4798      	blx	r3
    1972:	bd08      	pop	{r3, pc}
    1974:	20000a40 	.word	0x20000a40
    1978:	4007c000 	.word	0x4007c000

0000197c <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
    197c:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
    197e:	010b      	lsls	r3, r1, #4
    1980:	4293      	cmp	r3, r2
    1982:	d90d      	bls.n	19a0 <usart_set_async_baudrate+0x24>
    1984:	e01a      	b.n	19bc <usart_set_async_baudrate+0x40>
		return 1;
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
    1986:	6841      	ldr	r1, [r0, #4]
    1988:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
    198c:	6041      	str	r1, [r0, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
    198e:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    1992:	6203      	str	r3, [r0, #32]

	return 0;
    1994:	2000      	movs	r0, #0
    1996:	e020      	b.n	19da <usart_set_async_baudrate+0x5e>
	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
		return 1;
    1998:	2001      	movs	r0, #1
    199a:	e01e      	b.n	19da <usart_set_async_baudrate+0x5e>
    199c:	2001      	movs	r0, #1
    199e:	e01c      	b.n	19da <usart_set_async_baudrate+0x5e>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
    19a0:	00d2      	lsls	r2, r2, #3
    19a2:	eb02 0253 	add.w	r2, r2, r3, lsr #1
    19a6:	fbb2 f3f3 	udiv	r3, r2, r3
	cd = cd_fp >> 3;
    19aa:	08da      	lsrs	r2, r3, #3
	fp = cd_fp & 0x07;
    19ac:	f003 0307 	and.w	r3, r3, #7
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
    19b0:	1e54      	subs	r4, r2, #1
    19b2:	f64f 71fe 	movw	r1, #65534	; 0xfffe
    19b6:	428c      	cmp	r4, r1
    19b8:	d9e9      	bls.n	198e <usart_set_async_baudrate+0x12>
    19ba:	e7ed      	b.n	1998 <usart_set_async_baudrate+0x1c>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
    19bc:	00c9      	lsls	r1, r1, #3
    19be:	00d3      	lsls	r3, r2, #3
    19c0:	eb03 0351 	add.w	r3, r3, r1, lsr #1
    19c4:	fbb3 f3f1 	udiv	r3, r3, r1
	cd = cd_fp >> 3;
    19c8:	08da      	lsrs	r2, r3, #3
	fp = cd_fp & 0x07;
    19ca:	f003 0307 	and.w	r3, r3, #7
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
    19ce:	1e54      	subs	r4, r2, #1
    19d0:	f64f 71fe 	movw	r1, #65534	; 0xfffe
    19d4:	428c      	cmp	r4, r1
    19d6:	d9d6      	bls.n	1986 <usart_set_async_baudrate+0xa>
    19d8:	e7e0      	b.n	199c <usart_set_async_baudrate+0x20>

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);

	return 0;
}
    19da:	f85d 4b04 	ldr.w	r4, [sp], #4
    19de:	4770      	bx	lr

000019e0 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
    19e0:	4b0a      	ldr	r3, [pc, #40]	; (1a0c <usart_reset+0x2c>)
    19e2:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
{
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
    19e6:	2300      	movs	r3, #0
    19e8:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
    19ea:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
    19ec:	6283      	str	r3, [r0, #40]	; 0x28
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
    19ee:	2388      	movs	r3, #136	; 0x88
    19f0:	6003      	str	r3, [r0, #0]
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
    19f2:	2324      	movs	r3, #36	; 0x24
    19f4:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RSTSTA;
    19f6:	f44f 7380 	mov.w	r3, #256	; 0x100
    19fa:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RTSDIS;
    19fc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
    1a00:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_DTRDIS;
    1a02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    1a06:	6003      	str	r3, [r0, #0]
    1a08:	4770      	bx	lr
    1a0a:	bf00      	nop
    1a0c:	55534100 	.word	0x55534100

00001a10 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
    1a10:	b570      	push	{r4, r5, r6, lr}
    1a12:	4605      	mov	r5, r0
    1a14:	460c      	mov	r4, r1
    1a16:	4616      	mov	r6, r2
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
    1a18:	4b0f      	ldr	r3, [pc, #60]	; (1a58 <usart_init_rs232+0x48>)
    1a1a:	4798      	blx	r3

	ul_reg_val = 0;
    1a1c:	2100      	movs	r1, #0
    1a1e:	4b0f      	ldr	r3, [pc, #60]	; (1a5c <usart_init_rs232+0x4c>)
    1a20:	6019      	str	r1, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
    1a22:	b19c      	cbz	r4, 1a4c <usart_init_rs232+0x3c>
    1a24:	4628      	mov	r0, r5
    1a26:	6821      	ldr	r1, [r4, #0]
    1a28:	4632      	mov	r2, r6
    1a2a:	4b0d      	ldr	r3, [pc, #52]	; (1a60 <usart_init_rs232+0x50>)
    1a2c:	4798      	blx	r3
    1a2e:	4603      	mov	r3, r0
    1a30:	b970      	cbnz	r0, 1a50 <usart_init_rs232+0x40>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
    1a32:	68a1      	ldr	r1, [r4, #8]
    1a34:	6862      	ldr	r2, [r4, #4]
    1a36:	430a      	orrs	r2, r1
    1a38:	6921      	ldr	r1, [r4, #16]
    1a3a:	430a      	orrs	r2, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
    1a3c:	68e0      	ldr	r0, [r4, #12]
    1a3e:	4302      	orrs	r2, r0
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
    1a40:	4906      	ldr	r1, [pc, #24]	; (1a5c <usart_init_rs232+0x4c>)
    1a42:	600a      	str	r2, [r1, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;
    1a44:	6869      	ldr	r1, [r5, #4]
    1a46:	430a      	orrs	r2, r1
    1a48:	606a      	str	r2, [r5, #4]

	return 0;
    1a4a:	e002      	b.n	1a52 <usart_init_rs232+0x42>

	ul_reg_val = 0;
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
    1a4c:	2301      	movs	r3, #1
    1a4e:	e000      	b.n	1a52 <usart_init_rs232+0x42>
    1a50:	2301      	movs	r3, #1
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;

	return 0;
}
    1a52:	4618      	mov	r0, r3
    1a54:	bd70      	pop	{r4, r5, r6, pc}
    1a56:	bf00      	nop
    1a58:	000019e1 	.word	0x000019e1
    1a5c:	20000940 	.word	0x20000940
    1a60:	0000197d 	.word	0x0000197d

00001a64 <usart_enable_tx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_TXEN;
    1a64:	2340      	movs	r3, #64	; 0x40
    1a66:	6003      	str	r3, [r0, #0]
    1a68:	4770      	bx	lr
    1a6a:	bf00      	nop

00001a6c <usart_enable_rx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RXEN;
    1a6c:	2310      	movs	r3, #16
    1a6e:	6003      	str	r3, [r0, #0]
    1a70:	4770      	bx	lr
    1a72:	bf00      	nop

00001a74 <usart_enable_interrupt>:
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
	p_usart->US_IER = ul_sources;
    1a74:	6081      	str	r1, [r0, #8]
    1a76:	4770      	bx	lr

00001a78 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1a78:	e7fe      	b.n	1a78 <Dummy_Handler>
    1a7a:	bf00      	nop

00001a7c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    1a7c:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
    1a7e:	4b19      	ldr	r3, [pc, #100]	; (1ae4 <Reset_Handler+0x68>)
    1a80:	4a19      	ldr	r2, [pc, #100]	; (1ae8 <Reset_Handler+0x6c>)
    1a82:	429a      	cmp	r2, r3
    1a84:	d003      	beq.n	1a8e <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
    1a86:	4b19      	ldr	r3, [pc, #100]	; (1aec <Reset_Handler+0x70>)
    1a88:	4a16      	ldr	r2, [pc, #88]	; (1ae4 <Reset_Handler+0x68>)
    1a8a:	429a      	cmp	r2, r3
    1a8c:	d304      	bcc.n	1a98 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
    1a8e:	4b18      	ldr	r3, [pc, #96]	; (1af0 <Reset_Handler+0x74>)
    1a90:	4a18      	ldr	r2, [pc, #96]	; (1af4 <Reset_Handler+0x78>)
    1a92:	429a      	cmp	r2, r3
    1a94:	d30f      	bcc.n	1ab6 <Reset_Handler+0x3a>
    1a96:	e01a      	b.n	1ace <Reset_Handler+0x52>
    1a98:	4b17      	ldr	r3, [pc, #92]	; (1af8 <Reset_Handler+0x7c>)
    1a9a:	4c18      	ldr	r4, [pc, #96]	; (1afc <Reset_Handler+0x80>)
    1a9c:	1ae4      	subs	r4, r4, r3
    1a9e:	f024 0403 	bic.w	r4, r4, #3
    1aa2:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
    1aa4:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
    1aa6:	480f      	ldr	r0, [pc, #60]	; (1ae4 <Reset_Handler+0x68>)
    1aa8:	490f      	ldr	r1, [pc, #60]	; (1ae8 <Reset_Handler+0x6c>)
    1aaa:	585a      	ldr	r2, [r3, r1]
    1aac:	501a      	str	r2, [r3, r0]
    1aae:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
    1ab0:	42a3      	cmp	r3, r4
    1ab2:	d1fa      	bne.n	1aaa <Reset_Handler+0x2e>
    1ab4:	e7eb      	b.n	1a8e <Reset_Handler+0x12>
    1ab6:	4b12      	ldr	r3, [pc, #72]	; (1b00 <Reset_Handler+0x84>)
    1ab8:	4912      	ldr	r1, [pc, #72]	; (1b04 <Reset_Handler+0x88>)
    1aba:	1ac9      	subs	r1, r1, r3
    1abc:	f021 0103 	bic.w	r1, r1, #3
    1ac0:	1d1a      	adds	r2, r3, #4
    1ac2:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
    1ac4:	2200      	movs	r2, #0
    1ac6:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
    1aca:	428b      	cmp	r3, r1
    1acc:	d1fb      	bne.n	1ac6 <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) &_sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1ace:	4b0e      	ldr	r3, [pc, #56]	; (1b08 <Reset_Handler+0x8c>)
    1ad0:	4a0e      	ldr	r2, [pc, #56]	; (1b0c <Reset_Handler+0x90>)
    1ad2:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    1ad6:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
    1ad8:	4b0d      	ldr	r3, [pc, #52]	; (1b10 <Reset_Handler+0x94>)
    1ada:	4798      	blx	r3

	/* Branch to main function */
	main();
    1adc:	4b0d      	ldr	r3, [pc, #52]	; (1b14 <Reset_Handler+0x98>)
    1ade:	4798      	blx	r3
    1ae0:	e7fe      	b.n	1ae0 <Reset_Handler+0x64>
    1ae2:	bf00      	nop
    1ae4:	20000000 	.word	0x20000000
    1ae8:	000025c4 	.word	0x000025c4
    1aec:	20000884 	.word	0x20000884
    1af0:	20000a54 	.word	0x20000a54
    1af4:	20000884 	.word	0x20000884
    1af8:	20000004 	.word	0x20000004
    1afc:	20000887 	.word	0x20000887
    1b00:	20000880 	.word	0x20000880
    1b04:	20000a4f 	.word	0x20000a4f
    1b08:	e000ed00 	.word	0xe000ed00
    1b0c:	00000000 	.word	0x00000000
    1b10:	00001ca5 	.word	0x00001ca5
    1b14:	00001c81 	.word	0x00001c81

00001b18 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
    1b18:	4b09      	ldr	r3, [pc, #36]	; (1b40 <_sbrk+0x28>)
    1b1a:	681b      	ldr	r3, [r3, #0]
    1b1c:	b913      	cbnz	r3, 1b24 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
    1b1e:	4a09      	ldr	r2, [pc, #36]	; (1b44 <_sbrk+0x2c>)
    1b20:	4b07      	ldr	r3, [pc, #28]	; (1b40 <_sbrk+0x28>)
    1b22:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    1b24:	4b06      	ldr	r3, [pc, #24]	; (1b40 <_sbrk+0x28>)
    1b26:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
    1b28:	181a      	adds	r2, r3, r0
    1b2a:	4907      	ldr	r1, [pc, #28]	; (1b48 <_sbrk+0x30>)
    1b2c:	4291      	cmp	r1, r2
    1b2e:	db04      	blt.n	1b3a <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
    1b30:	4610      	mov	r0, r2
    1b32:	4a03      	ldr	r2, [pc, #12]	; (1b40 <_sbrk+0x28>)
    1b34:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
    1b36:	4618      	mov	r0, r3
    1b38:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
    1b3a:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
    1b3e:	4770      	bx	lr
    1b40:	20000944 	.word	0x20000944
    1b44:	20001a58 	.word	0x20001a58
    1b48:	20007ffc 	.word	0x20007ffc

00001b4c <SVC_Handler>:
/**
 * \brief Handler for Sytem supervisor call.
 */
void vPortSVCHandler(void)
{
	__asm volatile (" ldr r3, pxCurrentTCBConst2  \n"  /* Restore the context. */
    1b4c:	4b06      	ldr	r3, [pc, #24]	; (1b68 <pxCurrentTCBConst2>)
    1b4e:	6819      	ldr	r1, [r3, #0]
    1b50:	6808      	ldr	r0, [r1, #0]
    1b52:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    1b56:	f380 8809 	msr	PSP, r0
    1b5a:	f04f 0000 	mov.w	r0, #0
    1b5e:	f380 8811 	msr	BASEPRI, r0
    1b62:	f04e 0e0d 	orr.w	lr, lr, #13
    1b66:	4770      	bx	lr

00001b68 <pxCurrentTCBConst2>:
    1b68:	200009d4 	.word	0x200009d4

00001b6c <PendSV_Handler>:
 * \brief Handler for Sytem interrupt-driven request.
 */
void xPortPendSVHandler(void)
{
	/* This is a naked function. */
	__asm volatile (" mrs r0, psp      \n"
    1b6c:	f3ef 8009 	mrs	r0, PSP
    1b70:	4b0c      	ldr	r3, [pc, #48]	; (1ba4 <pxCurrentTCBConst>)
    1b72:	681a      	ldr	r2, [r3, #0]
    1b74:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    1b78:	6010      	str	r0, [r2, #0]
    1b7a:	e92d 4008 	stmdb	sp!, {r3, lr}
    1b7e:	f04f 00a0 	mov.w	r0, #160	; 0xa0
    1b82:	f380 8811 	msr	BASEPRI, r0
    1b86:	f000 f80f 	bl	1ba8 <vTaskSwitchContext>
    1b8a:	f04f 0000 	mov.w	r0, #0
    1b8e:	f380 8811 	msr	BASEPRI, r0
    1b92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    1b96:	6819      	ldr	r1, [r3, #0]
    1b98:	6808      	ldr	r0, [r1, #0]
    1b9a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    1b9e:	f380 8809 	msr	PSP, r0
    1ba2:	4770      	bx	lr

00001ba4 <pxCurrentTCBConst>:
    1ba4:	200009d4 	.word	0x200009d4

00001ba8 <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    1ba8:	4b2b      	ldr	r3, [pc, #172]	; (1c58 <vTaskSwitchContext+0xb0>)
    1baa:	681b      	ldr	r3, [r3, #0]
    1bac:	b943      	cbnz	r3, 1bc0 <vTaskSwitchContext+0x18>

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    1bae:	4b2b      	ldr	r3, [pc, #172]	; (1c5c <vTaskSwitchContext+0xb4>)
    1bb0:	681b      	ldr	r3, [r3, #0]
    1bb2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    1bb6:	009b      	lsls	r3, r3, #2
    1bb8:	4a29      	ldr	r2, [pc, #164]	; (1c60 <vTaskSwitchContext+0xb8>)
    1bba:	58d3      	ldr	r3, [r2, r3]
    1bbc:	b123      	cbz	r3, 1bc8 <vTaskSwitchContext+0x20>
    1bbe:	e00f      	b.n	1be0 <vTaskSwitchContext+0x38>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    1bc0:	2201      	movs	r2, #1
    1bc2:	4b28      	ldr	r3, [pc, #160]	; (1c64 <vTaskSwitchContext+0xbc>)
    1bc4:	601a      	str	r2, [r3, #0]
    1bc6:	4770      	bx	lr

		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    1bc8:	4b24      	ldr	r3, [pc, #144]	; (1c5c <vTaskSwitchContext+0xb4>)

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    1bca:	4925      	ldr	r1, [pc, #148]	; (1c60 <vTaskSwitchContext+0xb8>)
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    1bcc:	681a      	ldr	r2, [r3, #0]
    1bce:	3a01      	subs	r2, #1
    1bd0:	601a      	str	r2, [r3, #0]

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    1bd2:	681a      	ldr	r2, [r3, #0]
    1bd4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    1bd8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    1bdc:	2a00      	cmp	r2, #0
    1bde:	d0f5      	beq.n	1bcc <vTaskSwitchContext+0x24>
			--uxTopReadyPriority;
		}

		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    1be0:	4b1e      	ldr	r3, [pc, #120]	; (1c5c <vTaskSwitchContext+0xb4>)
    1be2:	681b      	ldr	r3, [r3, #0]
    1be4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    1be8:	4a1d      	ldr	r2, [pc, #116]	; (1c60 <vTaskSwitchContext+0xb8>)
    1bea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1bee:	685a      	ldr	r2, [r3, #4]
    1bf0:	6852      	ldr	r2, [r2, #4]
    1bf2:	605a      	str	r2, [r3, #4]
    1bf4:	f103 0108 	add.w	r1, r3, #8
    1bf8:	428a      	cmp	r2, r1
    1bfa:	bf04      	itt	eq
    1bfc:	6852      	ldreq	r2, [r2, #4]
    1bfe:	605a      	streq	r2, [r3, #4]
    1c00:	685b      	ldr	r3, [r3, #4]
    1c02:	68da      	ldr	r2, [r3, #12]
    1c04:	4b18      	ldr	r3, [pc, #96]	; (1c68 <vTaskSwitchContext+0xc0>)
    1c06:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();
		vWriteTraceToBuffer();
    1c08:	4b18      	ldr	r3, [pc, #96]	; (1c6c <vTaskSwitchContext+0xc4>)
    1c0a:	681b      	ldr	r3, [r3, #0]
    1c0c:	b31b      	cbz	r3, 1c56 <vTaskSwitchContext+0xae>
    1c0e:	4b16      	ldr	r3, [pc, #88]	; (1c68 <vTaskSwitchContext+0xc0>)
    1c10:	681b      	ldr	r3, [r3, #0]
    1c12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    1c14:	4b16      	ldr	r3, [pc, #88]	; (1c70 <vTaskSwitchContext+0xc8>)
    1c16:	681b      	ldr	r3, [r3, #0]
    1c18:	429a      	cmp	r2, r3
    1c1a:	d01c      	beq.n	1c56 <vTaskSwitchContext+0xae>
    1c1c:	4b15      	ldr	r3, [pc, #84]	; (1c74 <vTaskSwitchContext+0xcc>)
    1c1e:	681b      	ldr	r3, [r3, #0]
    1c20:	3308      	adds	r3, #8
    1c22:	4a15      	ldr	r2, [pc, #84]	; (1c78 <vTaskSwitchContext+0xd0>)
    1c24:	6812      	ldr	r2, [r2, #0]
    1c26:	429a      	cmp	r2, r3
    1c28:	d912      	bls.n	1c50 <vTaskSwitchContext+0xa8>
    1c2a:	4b0f      	ldr	r3, [pc, #60]	; (1c68 <vTaskSwitchContext+0xc0>)
    1c2c:	681b      	ldr	r3, [r3, #0]
    1c2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    1c30:	4b0f      	ldr	r3, [pc, #60]	; (1c70 <vTaskSwitchContext+0xc8>)
    1c32:	601a      	str	r2, [r3, #0]
    1c34:	4b0f      	ldr	r3, [pc, #60]	; (1c74 <vTaskSwitchContext+0xcc>)
    1c36:	6818      	ldr	r0, [r3, #0]
    1c38:	4910      	ldr	r1, [pc, #64]	; (1c7c <vTaskSwitchContext+0xd4>)
    1c3a:	6809      	ldr	r1, [r1, #0]
    1c3c:	6001      	str	r1, [r0, #0]
    1c3e:	6819      	ldr	r1, [r3, #0]
    1c40:	3104      	adds	r1, #4
    1c42:	6019      	str	r1, [r3, #0]
    1c44:	6819      	ldr	r1, [r3, #0]
    1c46:	600a      	str	r2, [r1, #0]
    1c48:	681a      	ldr	r2, [r3, #0]
    1c4a:	3204      	adds	r2, #4
    1c4c:	601a      	str	r2, [r3, #0]
    1c4e:	4770      	bx	lr
    1c50:	2200      	movs	r2, #0
    1c52:	4b06      	ldr	r3, [pc, #24]	; (1c6c <vTaskSwitchContext+0xc4>)
    1c54:	601a      	str	r2, [r3, #0]
    1c56:	4770      	bx	lr
    1c58:	200009d8 	.word	0x200009d8
    1c5c:	20000948 	.word	0x20000948
    1c60:	20000950 	.word	0x20000950
    1c64:	200009cc 	.word	0x200009cc
    1c68:	200009d4 	.word	0x200009d4
    1c6c:	200009c8 	.word	0x200009c8
    1c70:	20000040 	.word	0x20000040
    1c74:	200009d0 	.word	0x200009d0
    1c78:	200009dc 	.word	0x200009dc
    1c7c:	2000094c 	.word	0x2000094c

00001c80 <main>:
	//}
//}


int main(void)
{
    1c80:	b508      	push	{r3, lr}
	/* Initialize the SAM system */
	sysclk_init();
    1c82:	4b04      	ldr	r3, [pc, #16]	; (1c94 <main+0x14>)
    1c84:	4798      	blx	r3
	eic_enable(EIC);
    1c86:	4804      	ldr	r0, [pc, #16]	; (1c98 <main+0x18>)
    1c88:	4b04      	ldr	r3, [pc, #16]	; (1c9c <main+0x1c>)
    1c8a:	4798      	blx	r3
	board_init();
    1c8c:	4b04      	ldr	r3, [pc, #16]	; (1ca0 <main+0x20>)
    1c8e:	4798      	blx	r3
	//}
	///* Start the scheduler. */
	//vTaskStartScheduler();
	///* Will only get here if there was insufficient memory to create the idle task. */
	return 0;
}
    1c90:	2000      	movs	r0, #0
    1c92:	bd08      	pop	{r3, pc}
    1c94:	00000f71 	.word	0x00000f71
    1c98:	400f1000 	.word	0x400f1000
    1c9c:	0000107d 	.word	0x0000107d
    1ca0:	00000311 	.word	0x00000311

00001ca4 <__libc_init_array>:
    1ca4:	b570      	push	{r4, r5, r6, lr}
    1ca6:	4e0f      	ldr	r6, [pc, #60]	; (1ce4 <__libc_init_array+0x40>)
    1ca8:	4d0f      	ldr	r5, [pc, #60]	; (1ce8 <__libc_init_array+0x44>)
    1caa:	1b76      	subs	r6, r6, r5
    1cac:	10b6      	asrs	r6, r6, #2
    1cae:	d007      	beq.n	1cc0 <__libc_init_array+0x1c>
    1cb0:	3d04      	subs	r5, #4
    1cb2:	2400      	movs	r4, #0
    1cb4:	3401      	adds	r4, #1
    1cb6:	f855 3f04 	ldr.w	r3, [r5, #4]!
    1cba:	4798      	blx	r3
    1cbc:	42a6      	cmp	r6, r4
    1cbe:	d1f9      	bne.n	1cb4 <__libc_init_array+0x10>
    1cc0:	4e0a      	ldr	r6, [pc, #40]	; (1cec <__libc_init_array+0x48>)
    1cc2:	4d0b      	ldr	r5, [pc, #44]	; (1cf0 <__libc_init_array+0x4c>)
    1cc4:	1b76      	subs	r6, r6, r5
    1cc6:	f000 fc6b 	bl	25a0 <_init>
    1cca:	10b6      	asrs	r6, r6, #2
    1ccc:	d008      	beq.n	1ce0 <__libc_init_array+0x3c>
    1cce:	3d04      	subs	r5, #4
    1cd0:	2400      	movs	r4, #0
    1cd2:	3401      	adds	r4, #1
    1cd4:	f855 3f04 	ldr.w	r3, [r5, #4]!
    1cd8:	4798      	blx	r3
    1cda:	42a6      	cmp	r6, r4
    1cdc:	d1f9      	bne.n	1cd2 <__libc_init_array+0x2e>
    1cde:	bd70      	pop	{r4, r5, r6, pc}
    1ce0:	bd70      	pop	{r4, r5, r6, pc}
    1ce2:	bf00      	nop
    1ce4:	000025ac 	.word	0x000025ac
    1ce8:	000025ac 	.word	0x000025ac
    1cec:	000025b4 	.word	0x000025b4
    1cf0:	000025ac 	.word	0x000025ac

00001cf4 <malloc>:
    1cf4:	4b02      	ldr	r3, [pc, #8]	; (1d00 <malloc+0xc>)
    1cf6:	4601      	mov	r1, r0
    1cf8:	6818      	ldr	r0, [r3, #0]
    1cfa:	f000 b803 	b.w	1d04 <_malloc_r>
    1cfe:	bf00      	nop
    1d00:	20000470 	.word	0x20000470

00001d04 <_malloc_r>:
    1d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1d08:	f101 050b 	add.w	r5, r1, #11
    1d0c:	2d16      	cmp	r5, #22
    1d0e:	b083      	sub	sp, #12
    1d10:	4606      	mov	r6, r0
    1d12:	d927      	bls.n	1d64 <_malloc_r+0x60>
    1d14:	f035 0507 	bics.w	r5, r5, #7
    1d18:	d427      	bmi.n	1d6a <_malloc_r+0x66>
    1d1a:	42a9      	cmp	r1, r5
    1d1c:	d825      	bhi.n	1d6a <_malloc_r+0x66>
    1d1e:	4630      	mov	r0, r6
    1d20:	f000 fa8c 	bl	223c <__malloc_lock>
    1d24:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
    1d28:	d226      	bcs.n	1d78 <_malloc_r+0x74>
    1d2a:	4fc1      	ldr	r7, [pc, #772]	; (2030 <_malloc_r+0x32c>)
    1d2c:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
    1d30:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
    1d34:	68dc      	ldr	r4, [r3, #12]
    1d36:	429c      	cmp	r4, r3
    1d38:	f000 81d2 	beq.w	20e0 <_malloc_r+0x3dc>
    1d3c:	6863      	ldr	r3, [r4, #4]
    1d3e:	68e2      	ldr	r2, [r4, #12]
    1d40:	68a1      	ldr	r1, [r4, #8]
    1d42:	f023 0303 	bic.w	r3, r3, #3
    1d46:	4423      	add	r3, r4
    1d48:	4630      	mov	r0, r6
    1d4a:	685d      	ldr	r5, [r3, #4]
    1d4c:	60ca      	str	r2, [r1, #12]
    1d4e:	f045 0501 	orr.w	r5, r5, #1
    1d52:	6091      	str	r1, [r2, #8]
    1d54:	605d      	str	r5, [r3, #4]
    1d56:	f000 fa73 	bl	2240 <__malloc_unlock>
    1d5a:	3408      	adds	r4, #8
    1d5c:	4620      	mov	r0, r4
    1d5e:	b003      	add	sp, #12
    1d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1d64:	2510      	movs	r5, #16
    1d66:	42a9      	cmp	r1, r5
    1d68:	d9d9      	bls.n	1d1e <_malloc_r+0x1a>
    1d6a:	2400      	movs	r4, #0
    1d6c:	230c      	movs	r3, #12
    1d6e:	4620      	mov	r0, r4
    1d70:	6033      	str	r3, [r6, #0]
    1d72:	b003      	add	sp, #12
    1d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1d78:	ea5f 2c55 	movs.w	ip, r5, lsr #9
    1d7c:	f000 808a 	beq.w	1e94 <_malloc_r+0x190>
    1d80:	f1bc 0f04 	cmp.w	ip, #4
    1d84:	f200 8160 	bhi.w	2048 <_malloc_r+0x344>
    1d88:	ea4f 1c95 	mov.w	ip, r5, lsr #6
    1d8c:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
    1d90:	ea4f 014c 	mov.w	r1, ip, lsl #1
    1d94:	4fa6      	ldr	r7, [pc, #664]	; (2030 <_malloc_r+0x32c>)
    1d96:	eb07 0181 	add.w	r1, r7, r1, lsl #2
    1d9a:	68cc      	ldr	r4, [r1, #12]
    1d9c:	42a1      	cmp	r1, r4
    1d9e:	d105      	bne.n	1dac <_malloc_r+0xa8>
    1da0:	e00c      	b.n	1dbc <_malloc_r+0xb8>
    1da2:	2b00      	cmp	r3, #0
    1da4:	da7a      	bge.n	1e9c <_malloc_r+0x198>
    1da6:	68e4      	ldr	r4, [r4, #12]
    1da8:	42a1      	cmp	r1, r4
    1daa:	d007      	beq.n	1dbc <_malloc_r+0xb8>
    1dac:	6862      	ldr	r2, [r4, #4]
    1dae:	f022 0203 	bic.w	r2, r2, #3
    1db2:	1b53      	subs	r3, r2, r5
    1db4:	2b0f      	cmp	r3, #15
    1db6:	ddf4      	ble.n	1da2 <_malloc_r+0x9e>
    1db8:	f10c 3cff 	add.w	ip, ip, #4294967295
    1dbc:	f10c 0c01 	add.w	ip, ip, #1
    1dc0:	4b9b      	ldr	r3, [pc, #620]	; (2030 <_malloc_r+0x32c>)
    1dc2:	693c      	ldr	r4, [r7, #16]
    1dc4:	f103 0e08 	add.w	lr, r3, #8
    1dc8:	4574      	cmp	r4, lr
    1dca:	f000 817e 	beq.w	20ca <_malloc_r+0x3c6>
    1dce:	6861      	ldr	r1, [r4, #4]
    1dd0:	f021 0103 	bic.w	r1, r1, #3
    1dd4:	1b4a      	subs	r2, r1, r5
    1dd6:	2a0f      	cmp	r2, #15
    1dd8:	f300 8164 	bgt.w	20a4 <_malloc_r+0x3a0>
    1ddc:	2a00      	cmp	r2, #0
    1dde:	f8c3 e014 	str.w	lr, [r3, #20]
    1de2:	f8c3 e010 	str.w	lr, [r3, #16]
    1de6:	da6a      	bge.n	1ebe <_malloc_r+0x1ba>
    1de8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    1dec:	f080 813a 	bcs.w	2064 <_malloc_r+0x360>
    1df0:	08c9      	lsrs	r1, r1, #3
    1df2:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
    1df6:	ea4f 08a1 	mov.w	r8, r1, asr #2
    1dfa:	685a      	ldr	r2, [r3, #4]
    1dfc:	6881      	ldr	r1, [r0, #8]
    1dfe:	60a1      	str	r1, [r4, #8]
    1e00:	f04f 0901 	mov.w	r9, #1
    1e04:	fa09 f808 	lsl.w	r8, r9, r8
    1e08:	ea48 0202 	orr.w	r2, r8, r2
    1e0c:	60e0      	str	r0, [r4, #12]
    1e0e:	605a      	str	r2, [r3, #4]
    1e10:	6084      	str	r4, [r0, #8]
    1e12:	60cc      	str	r4, [r1, #12]
    1e14:	ea4f 03ac 	mov.w	r3, ip, asr #2
    1e18:	2001      	movs	r0, #1
    1e1a:	4098      	lsls	r0, r3
    1e1c:	4290      	cmp	r0, r2
    1e1e:	d85b      	bhi.n	1ed8 <_malloc_r+0x1d4>
    1e20:	4202      	tst	r2, r0
    1e22:	d106      	bne.n	1e32 <_malloc_r+0x12e>
    1e24:	f02c 0c03 	bic.w	ip, ip, #3
    1e28:	0040      	lsls	r0, r0, #1
    1e2a:	4202      	tst	r2, r0
    1e2c:	f10c 0c04 	add.w	ip, ip, #4
    1e30:	d0fa      	beq.n	1e28 <_malloc_r+0x124>
    1e32:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
    1e36:	4644      	mov	r4, r8
    1e38:	46e1      	mov	r9, ip
    1e3a:	68e3      	ldr	r3, [r4, #12]
    1e3c:	429c      	cmp	r4, r3
    1e3e:	d107      	bne.n	1e50 <_malloc_r+0x14c>
    1e40:	e145      	b.n	20ce <_malloc_r+0x3ca>
    1e42:	2a00      	cmp	r2, #0
    1e44:	f280 8156 	bge.w	20f4 <_malloc_r+0x3f0>
    1e48:	68db      	ldr	r3, [r3, #12]
    1e4a:	429c      	cmp	r4, r3
    1e4c:	f000 813f 	beq.w	20ce <_malloc_r+0x3ca>
    1e50:	6859      	ldr	r1, [r3, #4]
    1e52:	f021 0103 	bic.w	r1, r1, #3
    1e56:	1b4a      	subs	r2, r1, r5
    1e58:	2a0f      	cmp	r2, #15
    1e5a:	ddf2      	ble.n	1e42 <_malloc_r+0x13e>
    1e5c:	461c      	mov	r4, r3
    1e5e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
    1e62:	f854 8f08 	ldr.w	r8, [r4, #8]!
    1e66:	1959      	adds	r1, r3, r5
    1e68:	f045 0901 	orr.w	r9, r5, #1
    1e6c:	f042 0501 	orr.w	r5, r2, #1
    1e70:	f8c3 9004 	str.w	r9, [r3, #4]
    1e74:	4630      	mov	r0, r6
    1e76:	f8c8 c00c 	str.w	ip, [r8, #12]
    1e7a:	f8cc 8008 	str.w	r8, [ip, #8]
    1e7e:	6179      	str	r1, [r7, #20]
    1e80:	6139      	str	r1, [r7, #16]
    1e82:	f8c1 e00c 	str.w	lr, [r1, #12]
    1e86:	f8c1 e008 	str.w	lr, [r1, #8]
    1e8a:	604d      	str	r5, [r1, #4]
    1e8c:	508a      	str	r2, [r1, r2]
    1e8e:	f000 f9d7 	bl	2240 <__malloc_unlock>
    1e92:	e763      	b.n	1d5c <_malloc_r+0x58>
    1e94:	217e      	movs	r1, #126	; 0x7e
    1e96:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
    1e9a:	e77b      	b.n	1d94 <_malloc_r+0x90>
    1e9c:	4422      	add	r2, r4
    1e9e:	68e3      	ldr	r3, [r4, #12]
    1ea0:	6850      	ldr	r0, [r2, #4]
    1ea2:	68a1      	ldr	r1, [r4, #8]
    1ea4:	f040 0501 	orr.w	r5, r0, #1
    1ea8:	60cb      	str	r3, [r1, #12]
    1eaa:	4630      	mov	r0, r6
    1eac:	6099      	str	r1, [r3, #8]
    1eae:	6055      	str	r5, [r2, #4]
    1eb0:	f000 f9c6 	bl	2240 <__malloc_unlock>
    1eb4:	3408      	adds	r4, #8
    1eb6:	4620      	mov	r0, r4
    1eb8:	b003      	add	sp, #12
    1eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1ebe:	4421      	add	r1, r4
    1ec0:	4630      	mov	r0, r6
    1ec2:	684b      	ldr	r3, [r1, #4]
    1ec4:	f043 0301 	orr.w	r3, r3, #1
    1ec8:	604b      	str	r3, [r1, #4]
    1eca:	f000 f9b9 	bl	2240 <__malloc_unlock>
    1ece:	3408      	adds	r4, #8
    1ed0:	4620      	mov	r0, r4
    1ed2:	b003      	add	sp, #12
    1ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1ed8:	68bc      	ldr	r4, [r7, #8]
    1eda:	6863      	ldr	r3, [r4, #4]
    1edc:	f023 0903 	bic.w	r9, r3, #3
    1ee0:	45a9      	cmp	r9, r5
    1ee2:	d304      	bcc.n	1eee <_malloc_r+0x1ea>
    1ee4:	ebc5 0309 	rsb	r3, r5, r9
    1ee8:	2b0f      	cmp	r3, #15
    1eea:	f300 8091 	bgt.w	2010 <_malloc_r+0x30c>
    1eee:	4b51      	ldr	r3, [pc, #324]	; (2034 <_malloc_r+0x330>)
    1ef0:	4a51      	ldr	r2, [pc, #324]	; (2038 <_malloc_r+0x334>)
    1ef2:	6819      	ldr	r1, [r3, #0]
    1ef4:	6813      	ldr	r3, [r2, #0]
    1ef6:	3301      	adds	r3, #1
    1ef8:	eb05 0a01 	add.w	sl, r5, r1
    1efc:	eb04 0b09 	add.w	fp, r4, r9
    1f00:	f000 8161 	beq.w	21c6 <_malloc_r+0x4c2>
    1f04:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
    1f08:	f10a 0a0f 	add.w	sl, sl, #15
    1f0c:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
    1f10:	f02a 0a0f 	bic.w	sl, sl, #15
    1f14:	4630      	mov	r0, r6
    1f16:	4651      	mov	r1, sl
    1f18:	9201      	str	r2, [sp, #4]
    1f1a:	f000 f993 	bl	2244 <_sbrk_r>
    1f1e:	f1b0 3fff 	cmp.w	r0, #4294967295
    1f22:	4680      	mov	r8, r0
    1f24:	9a01      	ldr	r2, [sp, #4]
    1f26:	f000 8100 	beq.w	212a <_malloc_r+0x426>
    1f2a:	4583      	cmp	fp, r0
    1f2c:	f200 80fa 	bhi.w	2124 <_malloc_r+0x420>
    1f30:	f8df c110 	ldr.w	ip, [pc, #272]	; 2044 <_malloc_r+0x340>
    1f34:	f8dc 3000 	ldr.w	r3, [ip]
    1f38:	45c3      	cmp	fp, r8
    1f3a:	4453      	add	r3, sl
    1f3c:	f8cc 3000 	str.w	r3, [ip]
    1f40:	f000 814a 	beq.w	21d8 <_malloc_r+0x4d4>
    1f44:	6812      	ldr	r2, [r2, #0]
    1f46:	493c      	ldr	r1, [pc, #240]	; (2038 <_malloc_r+0x334>)
    1f48:	3201      	adds	r2, #1
    1f4a:	bf1b      	ittet	ne
    1f4c:	ebcb 0b08 	rsbne	fp, fp, r8
    1f50:	445b      	addne	r3, fp
    1f52:	f8c1 8000 	streq.w	r8, [r1]
    1f56:	f8cc 3000 	strne.w	r3, [ip]
    1f5a:	f018 0307 	ands.w	r3, r8, #7
    1f5e:	f000 8113 	beq.w	2188 <_malloc_r+0x484>
    1f62:	f1c3 0208 	rsb	r2, r3, #8
    1f66:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
    1f6a:	4490      	add	r8, r2
    1f6c:	3308      	adds	r3, #8
    1f6e:	44c2      	add	sl, r8
    1f70:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
    1f74:	ebca 0a03 	rsb	sl, sl, r3
    1f78:	4651      	mov	r1, sl
    1f7a:	4630      	mov	r0, r6
    1f7c:	f8cd c004 	str.w	ip, [sp, #4]
    1f80:	f000 f960 	bl	2244 <_sbrk_r>
    1f84:	1c43      	adds	r3, r0, #1
    1f86:	f8dd c004 	ldr.w	ip, [sp, #4]
    1f8a:	f000 8135 	beq.w	21f8 <_malloc_r+0x4f4>
    1f8e:	ebc8 0200 	rsb	r2, r8, r0
    1f92:	4452      	add	r2, sl
    1f94:	f042 0201 	orr.w	r2, r2, #1
    1f98:	f8dc 3000 	ldr.w	r3, [ip]
    1f9c:	f8c7 8008 	str.w	r8, [r7, #8]
    1fa0:	4453      	add	r3, sl
    1fa2:	42bc      	cmp	r4, r7
    1fa4:	f8c8 2004 	str.w	r2, [r8, #4]
    1fa8:	f8cc 3000 	str.w	r3, [ip]
    1fac:	f8df a094 	ldr.w	sl, [pc, #148]	; 2044 <_malloc_r+0x340>
    1fb0:	d015      	beq.n	1fde <_malloc_r+0x2da>
    1fb2:	f1b9 0f0f 	cmp.w	r9, #15
    1fb6:	f240 80ea 	bls.w	218e <_malloc_r+0x48a>
    1fba:	6861      	ldr	r1, [r4, #4]
    1fbc:	f1a9 020c 	sub.w	r2, r9, #12
    1fc0:	f022 0207 	bic.w	r2, r2, #7
    1fc4:	f001 0e01 	and.w	lr, r1, #1
    1fc8:	18a1      	adds	r1, r4, r2
    1fca:	2005      	movs	r0, #5
    1fcc:	ea42 0e0e 	orr.w	lr, r2, lr
    1fd0:	2a0f      	cmp	r2, #15
    1fd2:	f8c4 e004 	str.w	lr, [r4, #4]
    1fd6:	6048      	str	r0, [r1, #4]
    1fd8:	6088      	str	r0, [r1, #8]
    1fda:	f200 8111 	bhi.w	2200 <_malloc_r+0x4fc>
    1fde:	4a17      	ldr	r2, [pc, #92]	; (203c <_malloc_r+0x338>)
    1fe0:	68bc      	ldr	r4, [r7, #8]
    1fe2:	6811      	ldr	r1, [r2, #0]
    1fe4:	428b      	cmp	r3, r1
    1fe6:	bf88      	it	hi
    1fe8:	6013      	strhi	r3, [r2, #0]
    1fea:	4a15      	ldr	r2, [pc, #84]	; (2040 <_malloc_r+0x33c>)
    1fec:	6811      	ldr	r1, [r2, #0]
    1fee:	428b      	cmp	r3, r1
    1ff0:	bf88      	it	hi
    1ff2:	6013      	strhi	r3, [r2, #0]
    1ff4:	6862      	ldr	r2, [r4, #4]
    1ff6:	f022 0203 	bic.w	r2, r2, #3
    1ffa:	4295      	cmp	r5, r2
    1ffc:	ebc5 0302 	rsb	r3, r5, r2
    2000:	d801      	bhi.n	2006 <_malloc_r+0x302>
    2002:	2b0f      	cmp	r3, #15
    2004:	dc04      	bgt.n	2010 <_malloc_r+0x30c>
    2006:	4630      	mov	r0, r6
    2008:	f000 f91a 	bl	2240 <__malloc_unlock>
    200c:	2400      	movs	r4, #0
    200e:	e6a5      	b.n	1d5c <_malloc_r+0x58>
    2010:	1962      	adds	r2, r4, r5
    2012:	f043 0301 	orr.w	r3, r3, #1
    2016:	f045 0501 	orr.w	r5, r5, #1
    201a:	6065      	str	r5, [r4, #4]
    201c:	4630      	mov	r0, r6
    201e:	60ba      	str	r2, [r7, #8]
    2020:	6053      	str	r3, [r2, #4]
    2022:	f000 f90d 	bl	2240 <__malloc_unlock>
    2026:	3408      	adds	r4, #8
    2028:	4620      	mov	r0, r4
    202a:	b003      	add	sp, #12
    202c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2030:	20000474 	.word	0x20000474
    2034:	200009e8 	.word	0x200009e8
    2038:	20000880 	.word	0x20000880
    203c:	200009e4 	.word	0x200009e4
    2040:	200009e0 	.word	0x200009e0
    2044:	200009ec 	.word	0x200009ec
    2048:	f1bc 0f14 	cmp.w	ip, #20
    204c:	d961      	bls.n	2112 <_malloc_r+0x40e>
    204e:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
    2052:	f200 808f 	bhi.w	2174 <_malloc_r+0x470>
    2056:	ea4f 3c15 	mov.w	ip, r5, lsr #12
    205a:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
    205e:	ea4f 014c 	mov.w	r1, ip, lsl #1
    2062:	e697      	b.n	1d94 <_malloc_r+0x90>
    2064:	0a4b      	lsrs	r3, r1, #9
    2066:	2b04      	cmp	r3, #4
    2068:	d958      	bls.n	211c <_malloc_r+0x418>
    206a:	2b14      	cmp	r3, #20
    206c:	f200 80ae 	bhi.w	21cc <_malloc_r+0x4c8>
    2070:	f103 025b 	add.w	r2, r3, #91	; 0x5b
    2074:	0050      	lsls	r0, r2, #1
    2076:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    207a:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 2238 <_malloc_r+0x534>
    207e:	6883      	ldr	r3, [r0, #8]
    2080:	4283      	cmp	r3, r0
    2082:	f000 808a 	beq.w	219a <_malloc_r+0x496>
    2086:	685a      	ldr	r2, [r3, #4]
    2088:	f022 0203 	bic.w	r2, r2, #3
    208c:	4291      	cmp	r1, r2
    208e:	d202      	bcs.n	2096 <_malloc_r+0x392>
    2090:	689b      	ldr	r3, [r3, #8]
    2092:	4298      	cmp	r0, r3
    2094:	d1f7      	bne.n	2086 <_malloc_r+0x382>
    2096:	68d9      	ldr	r1, [r3, #12]
    2098:	687a      	ldr	r2, [r7, #4]
    209a:	60e1      	str	r1, [r4, #12]
    209c:	60a3      	str	r3, [r4, #8]
    209e:	608c      	str	r4, [r1, #8]
    20a0:	60dc      	str	r4, [r3, #12]
    20a2:	e6b7      	b.n	1e14 <_malloc_r+0x110>
    20a4:	1961      	adds	r1, r4, r5
    20a6:	f042 0701 	orr.w	r7, r2, #1
    20aa:	f045 0501 	orr.w	r5, r5, #1
    20ae:	6065      	str	r5, [r4, #4]
    20b0:	4630      	mov	r0, r6
    20b2:	6159      	str	r1, [r3, #20]
    20b4:	6119      	str	r1, [r3, #16]
    20b6:	f8c1 e00c 	str.w	lr, [r1, #12]
    20ba:	f8c1 e008 	str.w	lr, [r1, #8]
    20be:	604f      	str	r7, [r1, #4]
    20c0:	508a      	str	r2, [r1, r2]
    20c2:	3408      	adds	r4, #8
    20c4:	f000 f8bc 	bl	2240 <__malloc_unlock>
    20c8:	e648      	b.n	1d5c <_malloc_r+0x58>
    20ca:	685a      	ldr	r2, [r3, #4]
    20cc:	e6a2      	b.n	1e14 <_malloc_r+0x110>
    20ce:	f109 0901 	add.w	r9, r9, #1
    20d2:	f019 0f03 	tst.w	r9, #3
    20d6:	f104 0408 	add.w	r4, r4, #8
    20da:	f47f aeae 	bne.w	1e3a <_malloc_r+0x136>
    20de:	e02d      	b.n	213c <_malloc_r+0x438>
    20e0:	f104 0308 	add.w	r3, r4, #8
    20e4:	6964      	ldr	r4, [r4, #20]
    20e6:	42a3      	cmp	r3, r4
    20e8:	bf08      	it	eq
    20ea:	f10c 0c02 	addeq.w	ip, ip, #2
    20ee:	f43f ae67 	beq.w	1dc0 <_malloc_r+0xbc>
    20f2:	e623      	b.n	1d3c <_malloc_r+0x38>
    20f4:	4419      	add	r1, r3
    20f6:	461c      	mov	r4, r3
    20f8:	6848      	ldr	r0, [r1, #4]
    20fa:	68db      	ldr	r3, [r3, #12]
    20fc:	f854 2f08 	ldr.w	r2, [r4, #8]!
    2100:	f040 0501 	orr.w	r5, r0, #1
    2104:	604d      	str	r5, [r1, #4]
    2106:	4630      	mov	r0, r6
    2108:	60d3      	str	r3, [r2, #12]
    210a:	609a      	str	r2, [r3, #8]
    210c:	f000 f898 	bl	2240 <__malloc_unlock>
    2110:	e624      	b.n	1d5c <_malloc_r+0x58>
    2112:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
    2116:	ea4f 014c 	mov.w	r1, ip, lsl #1
    211a:	e63b      	b.n	1d94 <_malloc_r+0x90>
    211c:	098a      	lsrs	r2, r1, #6
    211e:	3238      	adds	r2, #56	; 0x38
    2120:	0050      	lsls	r0, r2, #1
    2122:	e7a8      	b.n	2076 <_malloc_r+0x372>
    2124:	42bc      	cmp	r4, r7
    2126:	f43f af03 	beq.w	1f30 <_malloc_r+0x22c>
    212a:	68bc      	ldr	r4, [r7, #8]
    212c:	6862      	ldr	r2, [r4, #4]
    212e:	f022 0203 	bic.w	r2, r2, #3
    2132:	e762      	b.n	1ffa <_malloc_r+0x2f6>
    2134:	f8d8 8000 	ldr.w	r8, [r8]
    2138:	4598      	cmp	r8, r3
    213a:	d17b      	bne.n	2234 <_malloc_r+0x530>
    213c:	f01c 0f03 	tst.w	ip, #3
    2140:	f1a8 0308 	sub.w	r3, r8, #8
    2144:	f10c 3cff 	add.w	ip, ip, #4294967295
    2148:	d1f4      	bne.n	2134 <_malloc_r+0x430>
    214a:	687b      	ldr	r3, [r7, #4]
    214c:	ea23 0300 	bic.w	r3, r3, r0
    2150:	607b      	str	r3, [r7, #4]
    2152:	0040      	lsls	r0, r0, #1
    2154:	4298      	cmp	r0, r3
    2156:	f63f aebf 	bhi.w	1ed8 <_malloc_r+0x1d4>
    215a:	2800      	cmp	r0, #0
    215c:	f43f aebc 	beq.w	1ed8 <_malloc_r+0x1d4>
    2160:	4203      	tst	r3, r0
    2162:	46cc      	mov	ip, r9
    2164:	f47f ae65 	bne.w	1e32 <_malloc_r+0x12e>
    2168:	0040      	lsls	r0, r0, #1
    216a:	4203      	tst	r3, r0
    216c:	f10c 0c04 	add.w	ip, ip, #4
    2170:	d0fa      	beq.n	2168 <_malloc_r+0x464>
    2172:	e65e      	b.n	1e32 <_malloc_r+0x12e>
    2174:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
    2178:	d81a      	bhi.n	21b0 <_malloc_r+0x4ac>
    217a:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
    217e:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
    2182:	ea4f 014c 	mov.w	r1, ip, lsl #1
    2186:	e605      	b.n	1d94 <_malloc_r+0x90>
    2188:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    218c:	e6ef      	b.n	1f6e <_malloc_r+0x26a>
    218e:	2301      	movs	r3, #1
    2190:	f8c8 3004 	str.w	r3, [r8, #4]
    2194:	4644      	mov	r4, r8
    2196:	2200      	movs	r2, #0
    2198:	e72f      	b.n	1ffa <_malloc_r+0x2f6>
    219a:	1091      	asrs	r1, r2, #2
    219c:	2001      	movs	r0, #1
    219e:	f8d8 2004 	ldr.w	r2, [r8, #4]
    21a2:	fa00 f101 	lsl.w	r1, r0, r1
    21a6:	430a      	orrs	r2, r1
    21a8:	f8c8 2004 	str.w	r2, [r8, #4]
    21ac:	4619      	mov	r1, r3
    21ae:	e774      	b.n	209a <_malloc_r+0x396>
    21b0:	f240 5354 	movw	r3, #1364	; 0x554
    21b4:	459c      	cmp	ip, r3
    21b6:	d81b      	bhi.n	21f0 <_malloc_r+0x4ec>
    21b8:	ea4f 4c95 	mov.w	ip, r5, lsr #18
    21bc:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
    21c0:	ea4f 014c 	mov.w	r1, ip, lsl #1
    21c4:	e5e6      	b.n	1d94 <_malloc_r+0x90>
    21c6:	f10a 0a10 	add.w	sl, sl, #16
    21ca:	e6a3      	b.n	1f14 <_malloc_r+0x210>
    21cc:	2b54      	cmp	r3, #84	; 0x54
    21ce:	d81f      	bhi.n	2210 <_malloc_r+0x50c>
    21d0:	0b0a      	lsrs	r2, r1, #12
    21d2:	326e      	adds	r2, #110	; 0x6e
    21d4:	0050      	lsls	r0, r2, #1
    21d6:	e74e      	b.n	2076 <_malloc_r+0x372>
    21d8:	f3cb 010b 	ubfx	r1, fp, #0, #12
    21dc:	2900      	cmp	r1, #0
    21de:	f47f aeb1 	bne.w	1f44 <_malloc_r+0x240>
    21e2:	eb0a 0109 	add.w	r1, sl, r9
    21e6:	68ba      	ldr	r2, [r7, #8]
    21e8:	f041 0101 	orr.w	r1, r1, #1
    21ec:	6051      	str	r1, [r2, #4]
    21ee:	e6f6      	b.n	1fde <_malloc_r+0x2da>
    21f0:	21fc      	movs	r1, #252	; 0xfc
    21f2:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
    21f6:	e5cd      	b.n	1d94 <_malloc_r+0x90>
    21f8:	2201      	movs	r2, #1
    21fa:	f04f 0a00 	mov.w	sl, #0
    21fe:	e6cb      	b.n	1f98 <_malloc_r+0x294>
    2200:	f104 0108 	add.w	r1, r4, #8
    2204:	4630      	mov	r0, r6
    2206:	f000 f8a5 	bl	2354 <_free_r>
    220a:	f8da 3000 	ldr.w	r3, [sl]
    220e:	e6e6      	b.n	1fde <_malloc_r+0x2da>
    2210:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    2214:	d803      	bhi.n	221e <_malloc_r+0x51a>
    2216:	0bca      	lsrs	r2, r1, #15
    2218:	3277      	adds	r2, #119	; 0x77
    221a:	0050      	lsls	r0, r2, #1
    221c:	e72b      	b.n	2076 <_malloc_r+0x372>
    221e:	f240 5254 	movw	r2, #1364	; 0x554
    2222:	4293      	cmp	r3, r2
    2224:	d803      	bhi.n	222e <_malloc_r+0x52a>
    2226:	0c8a      	lsrs	r2, r1, #18
    2228:	327c      	adds	r2, #124	; 0x7c
    222a:	0050      	lsls	r0, r2, #1
    222c:	e723      	b.n	2076 <_malloc_r+0x372>
    222e:	20fc      	movs	r0, #252	; 0xfc
    2230:	227e      	movs	r2, #126	; 0x7e
    2232:	e720      	b.n	2076 <_malloc_r+0x372>
    2234:	687b      	ldr	r3, [r7, #4]
    2236:	e78c      	b.n	2152 <_malloc_r+0x44e>
    2238:	20000474 	.word	0x20000474

0000223c <__malloc_lock>:
    223c:	4770      	bx	lr
    223e:	bf00      	nop

00002240 <__malloc_unlock>:
    2240:	4770      	bx	lr
    2242:	bf00      	nop

00002244 <_sbrk_r>:
    2244:	b538      	push	{r3, r4, r5, lr}
    2246:	4c07      	ldr	r4, [pc, #28]	; (2264 <_sbrk_r+0x20>)
    2248:	2300      	movs	r3, #0
    224a:	4605      	mov	r5, r0
    224c:	4608      	mov	r0, r1
    224e:	6023      	str	r3, [r4, #0]
    2250:	f7ff fc62 	bl	1b18 <_sbrk>
    2254:	1c43      	adds	r3, r0, #1
    2256:	d000      	beq.n	225a <_sbrk_r+0x16>
    2258:	bd38      	pop	{r3, r4, r5, pc}
    225a:	6823      	ldr	r3, [r4, #0]
    225c:	2b00      	cmp	r3, #0
    225e:	d0fb      	beq.n	2258 <_sbrk_r+0x14>
    2260:	602b      	str	r3, [r5, #0]
    2262:	bd38      	pop	{r3, r4, r5, pc}
    2264:	20000a50 	.word	0x20000a50

00002268 <register_fini>:
    2268:	4b02      	ldr	r3, [pc, #8]	; (2274 <register_fini+0xc>)
    226a:	b113      	cbz	r3, 2272 <register_fini+0xa>
    226c:	4802      	ldr	r0, [pc, #8]	; (2278 <register_fini+0x10>)
    226e:	f000 b805 	b.w	227c <atexit>
    2272:	4770      	bx	lr
    2274:	00000000 	.word	0x00000000
    2278:	00002289 	.word	0x00002289

0000227c <atexit>:
    227c:	4601      	mov	r1, r0
    227e:	2000      	movs	r0, #0
    2280:	4602      	mov	r2, r0
    2282:	4603      	mov	r3, r0
    2284:	f000 b934 	b.w	24f0 <__register_exitproc>

00002288 <__libc_fini_array>:
    2288:	b538      	push	{r3, r4, r5, lr}
    228a:	4d09      	ldr	r5, [pc, #36]	; (22b0 <__libc_fini_array+0x28>)
    228c:	4c09      	ldr	r4, [pc, #36]	; (22b4 <__libc_fini_array+0x2c>)
    228e:	1b64      	subs	r4, r4, r5
    2290:	10a4      	asrs	r4, r4, #2
    2292:	bf18      	it	ne
    2294:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
    2298:	d005      	beq.n	22a6 <__libc_fini_array+0x1e>
    229a:	3c01      	subs	r4, #1
    229c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    22a0:	4798      	blx	r3
    22a2:	2c00      	cmp	r4, #0
    22a4:	d1f9      	bne.n	229a <__libc_fini_array+0x12>
    22a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    22aa:	f000 b983 	b.w	25b4 <_fini>
    22ae:	bf00      	nop
    22b0:	000025c0 	.word	0x000025c0
    22b4:	000025c4 	.word	0x000025c4

000022b8 <_malloc_trim_r>:
    22b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    22ba:	4d23      	ldr	r5, [pc, #140]	; (2348 <_malloc_trim_r+0x90>)
    22bc:	460f      	mov	r7, r1
    22be:	4604      	mov	r4, r0
    22c0:	f7ff ffbc 	bl	223c <__malloc_lock>
    22c4:	68ab      	ldr	r3, [r5, #8]
    22c6:	685e      	ldr	r6, [r3, #4]
    22c8:	f026 0603 	bic.w	r6, r6, #3
    22cc:	1bf1      	subs	r1, r6, r7
    22ce:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
    22d2:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
    22d6:	f021 010f 	bic.w	r1, r1, #15
    22da:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
    22de:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
    22e2:	db07      	blt.n	22f4 <_malloc_trim_r+0x3c>
    22e4:	4620      	mov	r0, r4
    22e6:	2100      	movs	r1, #0
    22e8:	f7ff ffac 	bl	2244 <_sbrk_r>
    22ec:	68ab      	ldr	r3, [r5, #8]
    22ee:	4433      	add	r3, r6
    22f0:	4298      	cmp	r0, r3
    22f2:	d004      	beq.n	22fe <_malloc_trim_r+0x46>
    22f4:	4620      	mov	r0, r4
    22f6:	f7ff ffa3 	bl	2240 <__malloc_unlock>
    22fa:	2000      	movs	r0, #0
    22fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    22fe:	4620      	mov	r0, r4
    2300:	4279      	negs	r1, r7
    2302:	f7ff ff9f 	bl	2244 <_sbrk_r>
    2306:	3001      	adds	r0, #1
    2308:	d00d      	beq.n	2326 <_malloc_trim_r+0x6e>
    230a:	4b10      	ldr	r3, [pc, #64]	; (234c <_malloc_trim_r+0x94>)
    230c:	68aa      	ldr	r2, [r5, #8]
    230e:	6819      	ldr	r1, [r3, #0]
    2310:	1bf6      	subs	r6, r6, r7
    2312:	f046 0601 	orr.w	r6, r6, #1
    2316:	4620      	mov	r0, r4
    2318:	1bc9      	subs	r1, r1, r7
    231a:	6056      	str	r6, [r2, #4]
    231c:	6019      	str	r1, [r3, #0]
    231e:	f7ff ff8f 	bl	2240 <__malloc_unlock>
    2322:	2001      	movs	r0, #1
    2324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2326:	4620      	mov	r0, r4
    2328:	2100      	movs	r1, #0
    232a:	f7ff ff8b 	bl	2244 <_sbrk_r>
    232e:	68ab      	ldr	r3, [r5, #8]
    2330:	1ac2      	subs	r2, r0, r3
    2332:	2a0f      	cmp	r2, #15
    2334:	ddde      	ble.n	22f4 <_malloc_trim_r+0x3c>
    2336:	4d06      	ldr	r5, [pc, #24]	; (2350 <_malloc_trim_r+0x98>)
    2338:	4904      	ldr	r1, [pc, #16]	; (234c <_malloc_trim_r+0x94>)
    233a:	682d      	ldr	r5, [r5, #0]
    233c:	f042 0201 	orr.w	r2, r2, #1
    2340:	1b40      	subs	r0, r0, r5
    2342:	605a      	str	r2, [r3, #4]
    2344:	6008      	str	r0, [r1, #0]
    2346:	e7d5      	b.n	22f4 <_malloc_trim_r+0x3c>
    2348:	20000474 	.word	0x20000474
    234c:	200009ec 	.word	0x200009ec
    2350:	20000880 	.word	0x20000880

00002354 <_free_r>:
    2354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2358:	460d      	mov	r5, r1
    235a:	4606      	mov	r6, r0
    235c:	2900      	cmp	r1, #0
    235e:	d055      	beq.n	240c <_free_r+0xb8>
    2360:	f7ff ff6c 	bl	223c <__malloc_lock>
    2364:	f855 1c04 	ldr.w	r1, [r5, #-4]
    2368:	f8df c174 	ldr.w	ip, [pc, #372]	; 24e0 <_free_r+0x18c>
    236c:	f021 0301 	bic.w	r3, r1, #1
    2370:	f1a5 0408 	sub.w	r4, r5, #8
    2374:	18e2      	adds	r2, r4, r3
    2376:	f8dc 0008 	ldr.w	r0, [ip, #8]
    237a:	6857      	ldr	r7, [r2, #4]
    237c:	4290      	cmp	r0, r2
    237e:	f027 0703 	bic.w	r7, r7, #3
    2382:	d069      	beq.n	2458 <_free_r+0x104>
    2384:	f011 0101 	ands.w	r1, r1, #1
    2388:	6057      	str	r7, [r2, #4]
    238a:	d032      	beq.n	23f2 <_free_r+0x9e>
    238c:	2100      	movs	r1, #0
    238e:	19d0      	adds	r0, r2, r7
    2390:	6840      	ldr	r0, [r0, #4]
    2392:	07c0      	lsls	r0, r0, #31
    2394:	d406      	bmi.n	23a4 <_free_r+0x50>
    2396:	443b      	add	r3, r7
    2398:	6890      	ldr	r0, [r2, #8]
    239a:	2900      	cmp	r1, #0
    239c:	d04e      	beq.n	243c <_free_r+0xe8>
    239e:	68d2      	ldr	r2, [r2, #12]
    23a0:	60c2      	str	r2, [r0, #12]
    23a2:	6090      	str	r0, [r2, #8]
    23a4:	f043 0201 	orr.w	r2, r3, #1
    23a8:	6062      	str	r2, [r4, #4]
    23aa:	50e3      	str	r3, [r4, r3]
    23ac:	b9e1      	cbnz	r1, 23e8 <_free_r+0x94>
    23ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    23b2:	d32d      	bcc.n	2410 <_free_r+0xbc>
    23b4:	0a5a      	lsrs	r2, r3, #9
    23b6:	2a04      	cmp	r2, #4
    23b8:	d86a      	bhi.n	2490 <_free_r+0x13c>
    23ba:	0998      	lsrs	r0, r3, #6
    23bc:	3038      	adds	r0, #56	; 0x38
    23be:	0041      	lsls	r1, r0, #1
    23c0:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
    23c4:	4946      	ldr	r1, [pc, #280]	; (24e0 <_free_r+0x18c>)
    23c6:	f8dc 2008 	ldr.w	r2, [ip, #8]
    23ca:	4562      	cmp	r2, ip
    23cc:	d066      	beq.n	249c <_free_r+0x148>
    23ce:	6851      	ldr	r1, [r2, #4]
    23d0:	f021 0103 	bic.w	r1, r1, #3
    23d4:	428b      	cmp	r3, r1
    23d6:	d202      	bcs.n	23de <_free_r+0x8a>
    23d8:	6892      	ldr	r2, [r2, #8]
    23da:	4594      	cmp	ip, r2
    23dc:	d1f7      	bne.n	23ce <_free_r+0x7a>
    23de:	68d3      	ldr	r3, [r2, #12]
    23e0:	60e3      	str	r3, [r4, #12]
    23e2:	60a2      	str	r2, [r4, #8]
    23e4:	609c      	str	r4, [r3, #8]
    23e6:	60d4      	str	r4, [r2, #12]
    23e8:	4630      	mov	r0, r6
    23ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    23ee:	f7ff bf27 	b.w	2240 <__malloc_unlock>
    23f2:	f855 5c08 	ldr.w	r5, [r5, #-8]
    23f6:	1b64      	subs	r4, r4, r5
    23f8:	f10c 0808 	add.w	r8, ip, #8
    23fc:	68a0      	ldr	r0, [r4, #8]
    23fe:	4540      	cmp	r0, r8
    2400:	442b      	add	r3, r5
    2402:	d043      	beq.n	248c <_free_r+0x138>
    2404:	68e5      	ldr	r5, [r4, #12]
    2406:	60c5      	str	r5, [r0, #12]
    2408:	60a8      	str	r0, [r5, #8]
    240a:	e7c0      	b.n	238e <_free_r+0x3a>
    240c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2410:	08db      	lsrs	r3, r3, #3
    2412:	eb0c 02c3 	add.w	r2, ip, r3, lsl #3
    2416:	2501      	movs	r5, #1
    2418:	f8dc 0004 	ldr.w	r0, [ip, #4]
    241c:	6891      	ldr	r1, [r2, #8]
    241e:	60a1      	str	r1, [r4, #8]
    2420:	109b      	asrs	r3, r3, #2
    2422:	fa05 f303 	lsl.w	r3, r5, r3
    2426:	4318      	orrs	r0, r3
    2428:	60e2      	str	r2, [r4, #12]
    242a:	f8cc 0004 	str.w	r0, [ip, #4]
    242e:	6094      	str	r4, [r2, #8]
    2430:	4630      	mov	r0, r6
    2432:	60cc      	str	r4, [r1, #12]
    2434:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2438:	f7ff bf02 	b.w	2240 <__malloc_unlock>
    243c:	4d29      	ldr	r5, [pc, #164]	; (24e4 <_free_r+0x190>)
    243e:	42a8      	cmp	r0, r5
    2440:	d1ad      	bne.n	239e <_free_r+0x4a>
    2442:	f043 0201 	orr.w	r2, r3, #1
    2446:	f8cc 4014 	str.w	r4, [ip, #20]
    244a:	f8cc 4010 	str.w	r4, [ip, #16]
    244e:	60e0      	str	r0, [r4, #12]
    2450:	60a0      	str	r0, [r4, #8]
    2452:	6062      	str	r2, [r4, #4]
    2454:	50e3      	str	r3, [r4, r3]
    2456:	e7c7      	b.n	23e8 <_free_r+0x94>
    2458:	441f      	add	r7, r3
    245a:	07cb      	lsls	r3, r1, #31
    245c:	d407      	bmi.n	246e <_free_r+0x11a>
    245e:	f855 3c08 	ldr.w	r3, [r5, #-8]
    2462:	1ae4      	subs	r4, r4, r3
    2464:	441f      	add	r7, r3
    2466:	68a2      	ldr	r2, [r4, #8]
    2468:	68e3      	ldr	r3, [r4, #12]
    246a:	60d3      	str	r3, [r2, #12]
    246c:	609a      	str	r2, [r3, #8]
    246e:	4b1e      	ldr	r3, [pc, #120]	; (24e8 <_free_r+0x194>)
    2470:	681b      	ldr	r3, [r3, #0]
    2472:	f047 0201 	orr.w	r2, r7, #1
    2476:	429f      	cmp	r7, r3
    2478:	6062      	str	r2, [r4, #4]
    247a:	f8cc 4008 	str.w	r4, [ip, #8]
    247e:	d3b3      	bcc.n	23e8 <_free_r+0x94>
    2480:	4b1a      	ldr	r3, [pc, #104]	; (24ec <_free_r+0x198>)
    2482:	4630      	mov	r0, r6
    2484:	6819      	ldr	r1, [r3, #0]
    2486:	f7ff ff17 	bl	22b8 <_malloc_trim_r>
    248a:	e7ad      	b.n	23e8 <_free_r+0x94>
    248c:	2101      	movs	r1, #1
    248e:	e77e      	b.n	238e <_free_r+0x3a>
    2490:	2a14      	cmp	r2, #20
    2492:	d80c      	bhi.n	24ae <_free_r+0x15a>
    2494:	f102 005b 	add.w	r0, r2, #91	; 0x5b
    2498:	0041      	lsls	r1, r0, #1
    249a:	e791      	b.n	23c0 <_free_r+0x6c>
    249c:	684b      	ldr	r3, [r1, #4]
    249e:	1080      	asrs	r0, r0, #2
    24a0:	2501      	movs	r5, #1
    24a2:	fa05 f000 	lsl.w	r0, r5, r0
    24a6:	4303      	orrs	r3, r0
    24a8:	604b      	str	r3, [r1, #4]
    24aa:	4613      	mov	r3, r2
    24ac:	e798      	b.n	23e0 <_free_r+0x8c>
    24ae:	2a54      	cmp	r2, #84	; 0x54
    24b0:	d803      	bhi.n	24ba <_free_r+0x166>
    24b2:	0b18      	lsrs	r0, r3, #12
    24b4:	306e      	adds	r0, #110	; 0x6e
    24b6:	0041      	lsls	r1, r0, #1
    24b8:	e782      	b.n	23c0 <_free_r+0x6c>
    24ba:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    24be:	d803      	bhi.n	24c8 <_free_r+0x174>
    24c0:	0bd8      	lsrs	r0, r3, #15
    24c2:	3077      	adds	r0, #119	; 0x77
    24c4:	0041      	lsls	r1, r0, #1
    24c6:	e77b      	b.n	23c0 <_free_r+0x6c>
    24c8:	f240 5154 	movw	r1, #1364	; 0x554
    24cc:	428a      	cmp	r2, r1
    24ce:	d803      	bhi.n	24d8 <_free_r+0x184>
    24d0:	0c98      	lsrs	r0, r3, #18
    24d2:	307c      	adds	r0, #124	; 0x7c
    24d4:	0041      	lsls	r1, r0, #1
    24d6:	e773      	b.n	23c0 <_free_r+0x6c>
    24d8:	21fc      	movs	r1, #252	; 0xfc
    24da:	207e      	movs	r0, #126	; 0x7e
    24dc:	e770      	b.n	23c0 <_free_r+0x6c>
    24de:	bf00      	nop
    24e0:	20000474 	.word	0x20000474
    24e4:	2000047c 	.word	0x2000047c
    24e8:	2000087c 	.word	0x2000087c
    24ec:	200009e8 	.word	0x200009e8

000024f0 <__register_exitproc>:
    24f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    24f2:	4c27      	ldr	r4, [pc, #156]	; (2590 <__register_exitproc+0xa0>)
    24f4:	6826      	ldr	r6, [r4, #0]
    24f6:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
    24fa:	b085      	sub	sp, #20
    24fc:	4607      	mov	r7, r0
    24fe:	2c00      	cmp	r4, #0
    2500:	d041      	beq.n	2586 <__register_exitproc+0x96>
    2502:	6865      	ldr	r5, [r4, #4]
    2504:	2d1f      	cmp	r5, #31
    2506:	dd1e      	ble.n	2546 <__register_exitproc+0x56>
    2508:	4822      	ldr	r0, [pc, #136]	; (2594 <__register_exitproc+0xa4>)
    250a:	b918      	cbnz	r0, 2514 <__register_exitproc+0x24>
    250c:	f04f 30ff 	mov.w	r0, #4294967295
    2510:	b005      	add	sp, #20
    2512:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2514:	f44f 70c8 	mov.w	r0, #400	; 0x190
    2518:	9103      	str	r1, [sp, #12]
    251a:	9202      	str	r2, [sp, #8]
    251c:	9301      	str	r3, [sp, #4]
    251e:	f7ff fbe9 	bl	1cf4 <malloc>
    2522:	9903      	ldr	r1, [sp, #12]
    2524:	9a02      	ldr	r2, [sp, #8]
    2526:	9b01      	ldr	r3, [sp, #4]
    2528:	4604      	mov	r4, r0
    252a:	2800      	cmp	r0, #0
    252c:	d0ee      	beq.n	250c <__register_exitproc+0x1c>
    252e:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
    2532:	6025      	str	r5, [r4, #0]
    2534:	2000      	movs	r0, #0
    2536:	6060      	str	r0, [r4, #4]
    2538:	4605      	mov	r5, r0
    253a:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
    253e:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
    2542:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
    2546:	b93f      	cbnz	r7, 2558 <__register_exitproc+0x68>
    2548:	1cab      	adds	r3, r5, #2
    254a:	2000      	movs	r0, #0
    254c:	3501      	adds	r5, #1
    254e:	6065      	str	r5, [r4, #4]
    2550:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
    2554:	b005      	add	sp, #20
    2556:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2558:	eb04 0085 	add.w	r0, r4, r5, lsl #2
    255c:	f04f 0c01 	mov.w	ip, #1
    2560:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    2564:	f8d4 6188 	ldr.w	r6, [r4, #392]	; 0x188
    2568:	fa0c f205 	lsl.w	r2, ip, r5
    256c:	4316      	orrs	r6, r2
    256e:	2f02      	cmp	r7, #2
    2570:	f8c4 6188 	str.w	r6, [r4, #392]	; 0x188
    2574:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    2578:	d1e6      	bne.n	2548 <__register_exitproc+0x58>
    257a:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
    257e:	431a      	orrs	r2, r3
    2580:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    2584:	e7e0      	b.n	2548 <__register_exitproc+0x58>
    2586:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
    258a:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
    258e:	e7b8      	b.n	2502 <__register_exitproc+0x12>
    2590:	0000259c 	.word	0x0000259c
    2594:	00001cf5 	.word	0x00001cf5
    2598:	00000043 	.word	0x00000043

0000259c <_global_impure_ptr>:
    259c:	20000048                                H.. 

000025a0 <_init>:
    25a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    25a2:	bf00      	nop
    25a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    25a6:	bc08      	pop	{r3}
    25a8:	469e      	mov	lr, r3
    25aa:	4770      	bx	lr

000025ac <__init_array_start>:
    25ac:	00002269 	.word	0x00002269

000025b0 <__frame_dummy_init_array_entry>:
    25b0:	000001a5                                ....

000025b4 <_fini>:
    25b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    25b6:	bf00      	nop
    25b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    25ba:	bc08      	pop	{r3}
    25bc:	469e      	mov	lr, r3
    25be:	4770      	bx	lr

000025c0 <__fini_array_start>:
    25c0:	00000181 	.word	0x00000181

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <bpm_ps_no_halt_exec>:
 */
RAMFUNC bool bpm_ps_no_halt_exec(Bpm *bpm, uint32_t pmcon)
{
	bool b_psok = false;
	bool b_timeout = false;
	BPM_UNLOCK(PMCON);
2000000c:	4a07      	ldr	r2, [pc, #28]	; (2000002c <bpm_ps_no_halt_exec+0x20>)
2000000e:	4b08      	ldr	r3, [pc, #32]	; (20000030 <bpm_ps_no_halt_exec+0x24>)
20000010:	619a      	str	r2, [r3, #24]
	bpm->BPM_PMCON = pmcon;
20000012:	61c1      	str	r1, [r0, #28]
	do {
		b_psok = (BPM->BPM_SR & BPM_SR_PSOK);
20000014:	4619      	mov	r1, r3
		b_timeout = (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk);
20000016:	4a07      	ldr	r2, [pc, #28]	; (20000034 <bpm_ps_no_halt_exec+0x28>)
	bool b_psok = false;
	bool b_timeout = false;
	BPM_UNLOCK(PMCON);
	bpm->BPM_PMCON = pmcon;
	do {
		b_psok = (BPM->BPM_SR & BPM_SR_PSOK);
20000018:	6948      	ldr	r0, [r1, #20]
		b_timeout = (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk);
2000001a:	6813      	ldr	r3, [r2, #0]
2000001c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
	} while (!b_psok && !b_timeout);
20000020:	f010 0001 	ands.w	r0, r0, #1
20000024:	d101      	bne.n	2000002a <bpm_ps_no_halt_exec+0x1e>
20000026:	2b00      	cmp	r3, #0
20000028:	d0f6      	beq.n	20000018 <bpm_ps_no_halt_exec+0xc>
	return b_psok;
}
2000002a:	4770      	bx	lr
2000002c:	aa00001c 	.word	0xaa00001c
20000030:	400f0000 	.word	0x400f0000
20000034:	e000e010 	.word	0xe000e010

20000038 <g_interrupt_enabled>:
20000038:	00000001                                ....

2000003c <flashcalw_wait_until_ready>:
2000003c:	00001175                                u...

20000040 <uxPreviousTask>:
20000040:	000000ff 00000000                       ........

20000048 <impure_data>:
20000048:	00000000 20000334 2000039c 20000404     ....4.. ... ... 
	...
2000007c:	00002598 00000000 00000000 00000000     .%..............
	...
200000f0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20000100:	0005deec 0000000b 00000000 00000000     ................
	...

20000470 <_impure_ptr>:
20000470:	20000048                                H.. 

20000474 <__malloc_av_>:
	...
2000047c:	20000474 20000474 2000047c 2000047c     t.. t.. |.. |.. 
2000048c:	20000484 20000484 2000048c 2000048c     ... ... ... ... 
2000049c:	20000494 20000494 2000049c 2000049c     ... ... ... ... 
200004ac:	200004a4 200004a4 200004ac 200004ac     ... ... ... ... 
200004bc:	200004b4 200004b4 200004bc 200004bc     ... ... ... ... 
200004cc:	200004c4 200004c4 200004cc 200004cc     ... ... ... ... 
200004dc:	200004d4 200004d4 200004dc 200004dc     ... ... ... ... 
200004ec:	200004e4 200004e4 200004ec 200004ec     ... ... ... ... 
200004fc:	200004f4 200004f4 200004fc 200004fc     ... ... ... ... 
2000050c:	20000504 20000504 2000050c 2000050c     ... ... ... ... 
2000051c:	20000514 20000514 2000051c 2000051c     ... ... ... ... 
2000052c:	20000524 20000524 2000052c 2000052c     $.. $.. ,.. ,.. 
2000053c:	20000534 20000534 2000053c 2000053c     4.. 4.. <.. <.. 
2000054c:	20000544 20000544 2000054c 2000054c     D.. D.. L.. L.. 
2000055c:	20000554 20000554 2000055c 2000055c     T.. T.. \.. \.. 
2000056c:	20000564 20000564 2000056c 2000056c     d.. d.. l.. l.. 
2000057c:	20000574 20000574 2000057c 2000057c     t.. t.. |.. |.. 
2000058c:	20000584 20000584 2000058c 2000058c     ... ... ... ... 
2000059c:	20000594 20000594 2000059c 2000059c     ... ... ... ... 
200005ac:	200005a4 200005a4 200005ac 200005ac     ... ... ... ... 
200005bc:	200005b4 200005b4 200005bc 200005bc     ... ... ... ... 
200005cc:	200005c4 200005c4 200005cc 200005cc     ... ... ... ... 
200005dc:	200005d4 200005d4 200005dc 200005dc     ... ... ... ... 
200005ec:	200005e4 200005e4 200005ec 200005ec     ... ... ... ... 
200005fc:	200005f4 200005f4 200005fc 200005fc     ... ... ... ... 
2000060c:	20000604 20000604 2000060c 2000060c     ... ... ... ... 
2000061c:	20000614 20000614 2000061c 2000061c     ... ... ... ... 
2000062c:	20000624 20000624 2000062c 2000062c     $.. $.. ,.. ,.. 
2000063c:	20000634 20000634 2000063c 2000063c     4.. 4.. <.. <.. 
2000064c:	20000644 20000644 2000064c 2000064c     D.. D.. L.. L.. 
2000065c:	20000654 20000654 2000065c 2000065c     T.. T.. \.. \.. 
2000066c:	20000664 20000664 2000066c 2000066c     d.. d.. l.. l.. 
2000067c:	20000674 20000674 2000067c 2000067c     t.. t.. |.. |.. 
2000068c:	20000684 20000684 2000068c 2000068c     ... ... ... ... 
2000069c:	20000694 20000694 2000069c 2000069c     ... ... ... ... 
200006ac:	200006a4 200006a4 200006ac 200006ac     ... ... ... ... 
200006bc:	200006b4 200006b4 200006bc 200006bc     ... ... ... ... 
200006cc:	200006c4 200006c4 200006cc 200006cc     ... ... ... ... 
200006dc:	200006d4 200006d4 200006dc 200006dc     ... ... ... ... 
200006ec:	200006e4 200006e4 200006ec 200006ec     ... ... ... ... 
200006fc:	200006f4 200006f4 200006fc 200006fc     ... ... ... ... 
2000070c:	20000704 20000704 2000070c 2000070c     ... ... ... ... 
2000071c:	20000714 20000714 2000071c 2000071c     ... ... ... ... 
2000072c:	20000724 20000724 2000072c 2000072c     $.. $.. ,.. ,.. 
2000073c:	20000734 20000734 2000073c 2000073c     4.. 4.. <.. <.. 
2000074c:	20000744 20000744 2000074c 2000074c     D.. D.. L.. L.. 
2000075c:	20000754 20000754 2000075c 2000075c     T.. T.. \.. \.. 
2000076c:	20000764 20000764 2000076c 2000076c     d.. d.. l.. l.. 
2000077c:	20000774 20000774 2000077c 2000077c     t.. t.. |.. |.. 
2000078c:	20000784 20000784 2000078c 2000078c     ... ... ... ... 
2000079c:	20000794 20000794 2000079c 2000079c     ... ... ... ... 
200007ac:	200007a4 200007a4 200007ac 200007ac     ... ... ... ... 
200007bc:	200007b4 200007b4 200007bc 200007bc     ... ... ... ... 
200007cc:	200007c4 200007c4 200007cc 200007cc     ... ... ... ... 
200007dc:	200007d4 200007d4 200007dc 200007dc     ... ... ... ... 
200007ec:	200007e4 200007e4 200007ec 200007ec     ... ... ... ... 
200007fc:	200007f4 200007f4 200007fc 200007fc     ... ... ... ... 
2000080c:	20000804 20000804 2000080c 2000080c     ... ... ... ... 
2000081c:	20000814 20000814 2000081c 2000081c     ... ... ... ... 
2000082c:	20000824 20000824 2000082c 2000082c     $.. $.. ,.. ,.. 
2000083c:	20000834 20000834 2000083c 2000083c     4.. 4.. <.. <.. 
2000084c:	20000844 20000844 2000084c 2000084c     D.. D.. L.. L.. 
2000085c:	20000854 20000854 2000085c 2000085c     T.. T.. \.. \.. 
2000086c:	20000864 20000864 2000086c 2000086c     d.. d.. l.. l.. 

2000087c <__malloc_trim_threshold>:
2000087c:	00020000                                ....

20000880 <__malloc_sbrk_base>:
20000880:	ffffffff                                ....
